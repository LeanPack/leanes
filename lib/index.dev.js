'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var inversify = require('inversify');
var _ = _interopDefault(require('lodash'));
var stringify = _interopDefault(require('json-stable-stringify'));
var assert = _interopDefault(require('assert'));
var joi = _interopDefault(require('joi'));
var moment = _interopDefault(require('moment'));
var crypto$1 = _interopDefault(require('crypto'));
var jwt = _interopDefault(require('jsonwebtoken'));
var axios = _interopDefault(require('axios'));
var EventEmitter = _interopDefault(require('events'));

var __dirname$1 = '/leanes';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

var __dirname$2 = '/puremvc';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect$1;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof commonjsGlobal === "object" ? commonjsGlobal :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect$1 || (Reflect$1 = {}));

var __dirname$3 = '/es';

var customizer = function customizer(objValue, srcValue) {
  if (_.isArray(objValue)) {
    return objValue.concat(srcValue);
  }
};

function assign() {
  var target = _.head(arguments);

  if (_.isArray(target)) {
    var others = _.tail(arguments);

    return _.concat.apply(_, [target].concat(_toConsumableArray(others)));
  } else {
    var args = _.slice(arguments);

    args.push(customizer);
    return _.mergeWith.apply(_, _toConsumableArray(args));
  }
}

// This file is part of LeanES.
function copy(aObject) {
  if (_.isArray(aObject)) {
    return assign([], aObject);
  } else if (_.isObject(aObject)) {
    return assign({}, aObject);
  } else {
    return _.cloneDeep(aObject);
  }
}

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
function filter(_x, _x2, _x3) {
  return _filter.apply(this, arguments);
}

function _filter() {
  _filter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var result, index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = [];
            _context2.t0 = regeneratorRuntime.keys(items);

          case 2:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 9;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 7;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return lambda.call(context, item, index, items);

                      case 2:
                        if (!_context.sent) {
                          _context.next = 4;
                          break;
                        }

                        result.push(item);

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 7:
            _context2.next = 2;
            break;

          case 9:
            return _context2.abrupt("return", result);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _filter.apply(this, arguments);
}

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
function forEach(_x, _x2, _x3) {
  return _forEach.apply(this, arguments);
}

function _forEach() {
  _forEach = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = regeneratorRuntime.keys(items);

          case 1:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 8;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 6;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return lambda.call(context, item, index, items);

                      case 2:
                        return _context.abrupt("return", _context.sent);

                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 6:
            _context2.next = 1;
            break;

          case 8:
            return _context2.abrupt("return");

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _forEach.apply(this, arguments);
}

// This file is part of LeanES.
function instanceOf(x, Type) {
  if (x == null) {
    return false;
  }

  switch (Type) {
    case String:
      return _.isString(x);

    case Number:
      return _.isNumber(x);

    case Boolean:
      return _.isBoolean(x);

    case Array:
      return _.isArray(x);

    case Object:
      return _.isPlainObject(x);

    case Date:
      return _.isDate(x);

    default:
      return function (a) {
        while (a = a.__proto__) {
          if (a === Type.prototype) {
            return true;
          }
        }

        return false;
      }(x);
  }
}

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
function isThenable(suspected) {
  return typeof (suspected != null ? suspected.then : undefined) === 'function';
}

// This file is part of LeanES.
function jsonStringify(aoObject, ahOptions) {
  return stringify(aoObject, ahOptions);
}

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
function map(_x, _x2, _x3) {
  return _map.apply(this, arguments);
}

function _map() {
  _map = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var result, index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = [];
            _context2.t0 = regeneratorRuntime.keys(items);

          case 2:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 9;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 7;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = result;
                        _context.next = 3;
                        return lambda.call(context, item, index, items);

                      case 3:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", _context.t0.push.call(_context.t0, _context.t1));

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 7:
            _context2.next = 2;
            break;

          case 9:
            return _context2.abrupt("return", result);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _map.apply(this, arguments);
}

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

var uuid = {
  v4: function v4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      // we use `Math.random` for cross platform compatibility between NodeJS and ArangoDB
      // when we will be use uuid.v4() for setting value in some attribute
      // then it attribute must has unique constraint index,
      // and logic for setting must check existing record with its value
      var sixteenNumber = Number.parseInt(Math.random() * Math.pow(10, 16));
      var r = modulo(sixteenNumber, 16);
      var v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
};

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
function isAsync(func) {
  var GeneratorFunction = Object.getPrototypeOf( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).constructor;
  var AsyncFunction = Object.getPrototypeOf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }))).constructor;

  var isFunction = function isFunction(f) {
    return typeof f === 'function';
  };

  return isFunction(func) && (func instanceof GeneratorFunction || func instanceof AsyncFunction);
}

// This file is part of LeanES.
var cpoMetaObject = Symbol["for"]('~metaObject');
function decorator(target, key, descriptor) {
  assert(target.constructor[cpoMetaObject] != null, 'Target for `decorator` decorator must be a Module.prototype');
  assert(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Decorator '").concat(key, "' can not be declared"));
  var newDescriptor = {
    configurable: false,
    enumerable: true,
    writable: false,
    value: descriptor.value || descriptor.initializer()
  };
  Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
  target.constructor.metaObject.addMetaData('decorators', key, newDescriptor);
  return;
}

// This file is part of LeanES.
var cpoMetaObject$1 = Symbol["for"]('~metaObject');
var cplExtensibles = Symbol["for"]('~isExtensible');
var cpsExtensibleSymbol = Symbol["for"]('~extensibleSymbol');
function freeze(acTarget) {
  assert(acTarget[cpoMetaObject$1] != null, 'Target for `freeze` decorator must be a Class');
  acTarget[cplExtensibles][acTarget[cpsExtensibleSymbol]] = false;
  return acTarget;
}

var cpoMetaObject$2 = Symbol["for"]('~metaObject');
function initialize(acTarget) {
  assert(acTarget[cpoMetaObject$2] != null, 'Target for `initialize` decorator must be a Class');
  var _acTarget$Module$NS = acTarget.Module.NS,
      Proto = _acTarget$Module$NS.Proto,
      meta = _acTarget$Module$NS.meta;
  acTarget.constructor = Proto;

  var vmWrapper = function vmWrapper(BaseClass) {
    var _class, _init, _class2, _temp;

    var Wrapper = (_class = (_temp = _class2 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Wrapper, _BaseClass);

      var _super = _createSuper(Wrapper);

      function Wrapper() {
        _classCallCheck(this, Wrapper);

        return _super.apply(this, arguments);
      }

      return Wrapper;
    }(BaseClass), _class2.object = {}, _temp), (_applyDecoratedDescriptor(_class, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class)), _class);
    return Wrapper;
  };

  var Wrapped = null;

  if (acTarget.Module !== acTarget || acTarget.name === 'Module') {
    assert(acTarget.Module.isExtensible, "Module '".concat(acTarget.Module.name, "' has been frozen previously. Constant '").concat(acTarget.name, "' can not be declared"));
    Wrapped = vmWrapper(acTarget);
    Reflect.defineProperty(Wrapped, 'name', {
      value: acTarget.name
    });
    Wrapped.metaObject.parent = acTarget.metaObject;
    Reflect.defineProperty(acTarget.Module.prototype, Wrapped.name, {
      configurable: false,
      enumerable: true,
      writable: false,
      value: Wrapped
    });
    acTarget.Module.metaObject.addMetaData('constants', Wrapped.name, Wrapped);
  } else if (acTarget.Module === acTarget) {
    Reflect.defineProperty(acTarget.prototype, acTarget.name, {
      configurable: false,
      enumerable: true,
      writable: false,
      value: acTarget
    });
    acTarget.metaObject.addMetaData('constants', acTarget.name, acTarget);
  }

  acTarget.onInitialize();
  return Wrapped || acTarget;
}

// This file is part of LeanES.
var cpoMetaObject$3 = Symbol["for"]('~metaObject');
function initializeMixin(acTarget) {
  assert(acTarget[cpoMetaObject$3] != null, 'Target for `initializeMixin` decorator must be a Class');
  var Proto = acTarget.Module.NS.Proto;
  acTarget.constructor = Proto;
  acTarget.onInitializeMixin();
  return acTarget;
}

// This file is part of LeanES.
var cpoMetaObject$4 = Symbol["for"]('~metaObject');
function initializePatch(acTarget) {
  assert(acTarget[cpoMetaObject$4] != null, 'Target for `initializePatch` decorator must be a Class');
  var Proto = acTarget.Module.NS.Proto;
  acTarget.constructor = Proto;
  acTarget.onInitializePatch();
  return acTarget;
}

// This file is part of LeanES.
var cpoMetaObject$5 = Symbol["for"]('~metaObject');
function mixin() {
  for (var _len = arguments.length, alMixins = new Array(_len), _key = 0; _key < _len; _key++) {
    alMixins[_key] = arguments[_key];
  }

  return function (target) {
    assert(target[cpoMetaObject$5] != null, 'Target for `mixin` decorator must be a Class');

    var vlMixins = _.castArray(alMixins);

    vlMixins.forEach(function (vmMixin) {
      assert(vmMixin != null, 'Supplied mixin was not found');
      assert(_.isFunction(vmMixin), 'Mixin must be a function');
      var SuperClass = Reflect.getPrototypeOf(target);
      var Mixin = vmMixin(SuperClass);
      Reflect.defineProperty(Mixin, 'name', {
        value: vmMixin.name
      });
      Reflect.setPrototypeOf(target, Mixin);
      Reflect.setPrototypeOf(target.prototype, Mixin.prototype);
      target.metaObject.parent = Mixin.metaObject;
      target.metaObject.addMetaData('applyedMixins', Mixin.name, Mixin);
      typeof Mixin.including === 'function' && Mixin.including.call(target);
    });
    return target;
  };
}

// This file is part of LeanES.
var cpoMetaObject$6 = Symbol["for"]('~metaObject');
function patch() {
  for (var _len = arguments.length, alPatches = new Array(_len), _key = 0; _key < _len; _key++) {
    alPatches[_key] = arguments[_key];
  }

  return function (target) {
    assert(target[cpoMetaObject$6] != null, 'Target for `patch` decorator must be a Class');
    assert(target.Module !== target, 'Target for `patch` decorator can not be a Module or its subclass');

    var vlPatches = _.castArray(alPatches);

    vlPatches.forEach(function (vmPatch) {
      assert(vmPatch != null, 'Supplied patch was not found');
      assert(_.isFunction(vmPatch), 'Patch must be a function');
      if (target.patches[vmPatch.name] != null) return;
      var SuperClass = Reflect.getPrototypeOf(target);
      var Patch = vmPatch(SuperClass);
      Reflect.defineProperty(Patch, 'name', {
        value: vmPatch.name
      });
      Reflect.setPrototypeOf(target, Patch);
      Reflect.setPrototypeOf(target.prototype, Patch.prototype);
      target.metaObject.parent = Patch.metaObject;
      target.metaObject.addMetaData('applyedPatches', Patch.name, Patch);
      typeof Patch.including === 'function' && Patch.including.call(target);
    });
    return target;
  };
}

var cpoMetaObject$7 = Symbol["for"]('~metaObject');
function extend(mixinName, className) {
  return function (Module) {
    assert(Module[cpoMetaObject$7] != null, 'Target for `extend` decorator must be a Class');
    assert(Module.Module === Module, 'Target for `extend` decorator should be a Module or its subclass');
    var _Module$NS = Module.NS,
        Proto = _Module$NS.Proto,
        meta = _Module$NS.meta; // const vlMixins = _.castArray(alMixins);

    var vmMixin = Module.NS[mixinName];
    var target = Module.NS[className];

    var vmWrapper = function vmWrapper(BaseClass) {
      var _class, _init, _class2, _temp;

      var Wrapper = (_class = (_temp = _class2 = /*#__PURE__*/function (_BaseClass) {
        _inherits(Wrapper, _BaseClass);

        var _super = _createSuper(Wrapper);

        function Wrapper() {
          _classCallCheck(this, Wrapper);

          return _super.apply(this, arguments);
        }

        return Wrapper;
      }(BaseClass), _class2.object = {}, _temp), (_applyDecoratedDescriptor(_class, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class, "object"), _init = _init ? _init.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init;
        }
      }), _class)), _class);
      return Wrapper;
    }; // let extended;
    // vlMixins.forEach((vmMixin) => {


    assert(vmMixin != null, 'Supplied mixin was not found');
    assert(_.isFunction(vmMixin), 'Mixin must be a function'); // if (target.patches[vmMixin.name] != null) return;
    // const SuperClass = Reflect.getPrototypeOf(target);

    var extended = vmMixin(extended || target);
    Reflect.defineProperty(extended, 'name', {
      value: vmMixin.name
    });
    Reflect.defineProperty(extended, 'Module', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: Module
    });
    extended.constructor = Proto; // Reflect.setPrototypeOf(target, Patch);
    // Reflect.setPrototypeOf(target.prototype, Patch.prototype);
    // target.metaObject.parent = Patch.metaObject;

    extended.metaObject.addMetaData('applyedMixins', extended.name, extended);
    typeof extended.including === 'function' && extended.including.call(extended); // target.metaObject.addMetaData('applyedPatches', Patch.name, Patch);
    // (typeof Patch.including === 'function') && Patch.including.call(target);
    // });

    var Wrapped = vmWrapper(extended || target);
    Reflect.defineProperty(Wrapped, 'name', {
      value: target.name
    });
    Wrapped.metaObject.parent = target.metaObject;
    Reflect.defineProperty(Module.prototype, Wrapped.name, {
      configurable: false,
      enumerable: true,
      writable: false,
      value: Wrapped
    });
    Module.metaObject.addMetaData('constants', Wrapped.name, Wrapped);
    return Module;
  };
}

var cpoMetaObject$8 = Symbol["for"]('~metaObject');
var slice = [].slice;
function plugin() {
  for (var _len = arguments.length, alPlugins = new Array(_len), _key = 0; _key < _len; _key++) {
    alPlugins[_key] = arguments[_key];
  }

  return function (target) {
    assert(target[cpoMetaObject$8] != null, 'Target for `plugin` decorator must be a Module');
    var inflect = target.NS.Utils.inflect;

    var vlPlugins = _.castArray(alPlugins);

    vlPlugins.forEach(function (vmPlugin) {
      assert(vmPlugin != null, 'Supplied plugin was not found');
      assert(_.isFunction(vmPlugin), 'Plugin must be a function');

      var _vmPlugin = vmPlugin(target),
          _vmPlugin2 = _slicedToArray(_vmPlugin, 2),
          filename = _vmPlugin2[0],
          vmMixin = _vmPlugin2[1];

      var _slice$call = slice.call(filename.split('/'), -2),
          _slice$call2 = _slicedToArray(_slice$call, 2),
          preLast = _slice$call2[0],
          last = _slice$call2[1];

      var pluginName = filename.includes('/') ? inflect.camelize(last !== 'index.js' ? last.split('.')[0] : preLast) : filename;
      Reflect.defineProperty(vmMixin, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: pluginName
      });
      target.metaObject.addMetaData('constants', pluginName, vmMixin);
      Reflect.defineProperty(target.prototype, pluginName, {
        configurable: false,
        enumerable: true,
        writable: false,
        value: vmMixin
      });
      target.metaObject.addMetaData('plugins', pluginName, vmMixin);
      var SuperClass = Reflect.getPrototypeOf(target);
      var Mixin = vmMixin(SuperClass);
      Reflect.defineProperty(Mixin, 'name', {
        value: pluginName
      });
      Reflect.setPrototypeOf(target, Mixin);
      Reflect.setPrototypeOf(target.prototype, Mixin.prototype);
      target.metaObject.parent = Mixin.metaObject;
      target.metaObject.addMetaData('applyedMixins', pluginName, Mixin);
      typeof Mixin.including === 'function' && Mixin.including.call(target);
      return target;
    });
  };
}

// This file is part of LeanES.
var cpoMetaObject$9 = Symbol["for"]('~metaObject');
var cplExtensibles$1 = Symbol["for"]('~isExtensible');
var cpsExtensibleSymbol$1 = Symbol["for"]('~extensibleSymbol');
function meta(acTarget) {
  assert(acTarget[cpoMetaObject$9] != null, 'Target for `meta` decorator must be a Class');
  var MetaObject = acTarget.Module.prototype.MetaObject;
  var superclass = Reflect.getPrototypeOf(acTarget) || {};
  var parent = acTarget.metaObject || superclass.metaObject;
  Reflect.defineProperty(acTarget, cpoMetaObject$9, {
    enumerable: false,
    configurable: true,
    value: MetaObject["new"](acTarget, parent)
  });
  Reflect.defineProperty(acTarget, cpsExtensibleSymbol$1, {
    enumerable: false,
    configurable: true,
    value: Symbol('extensibleSymbol')
  });
  acTarget[cplExtensibles$1][acTarget[cpsExtensibleSymbol$1]] = true;
  acTarget.onMetalize();
  return;
}

// This file is part of LeanES.
var cpoMetaObject$a = Symbol["for"]('~metaObject');
function partOf(acModule) {
  return function (target) {
    assert(target[cpoMetaObject$a] != null, 'Target for `partOf` decorator must be a Class');
    Reflect.defineProperty(target, 'Module', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: acModule
    });
    return target;
  };
}

var cpoMetaObject$b = Symbol["for"]('~metaObject');
var slice$1 = [].slice;
function nameBy(target, key, descriptor) {
  var filename = descriptor.value || descriptor.initializer && descriptor.initializer();
  assert(filename != null, 'Value must be __filename');
  assert(target[cpoMetaObject$b] != null, 'Target for `nameBy` decorator must be a Class');

  var _slice$call$0$split = slice$1.call(filename.split('/'), -1)[0].split('.'),
      _slice$call$0$split2 = _slicedToArray(_slice$call$0$split, 1),
      classname = _slice$call$0$split2[0];

  Reflect.defineProperty(target, 'name', {
    get: function get() {
      return classname;
    }
  });
  return descriptor;
}

// This file is part of LeanES.
var cpoMetaObject$c = Symbol["for"]('~metaObject');
var hasProp = {}.hasOwnProperty;
function constant(target, key, descriptor) {
  assert(target.constructor[cpoMetaObject$c] != null, 'Target for `constant` decorator must be a Module.prototype');
  assert(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Constant '").concat(key, "' can not be declared"));
  var newDescriptor;

  if (hasProp.call(descriptor, 'get') || hasProp.call(descriptor, 'set')) {
    newDescriptor = {
      configurable: false,
      enumerable: true,
      get: descriptor.get,
      set: descriptor.set
    };
    Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
    target.constructor.metaObject.addMetaData('constants', key, newDescriptor);
  } else {
    // const value = descriptor.value || descriptor.initializer && descriptor.initializer();
    newDescriptor = {
      configurable: false,
      enumerable: true,
      writable: false,
      value: descriptor.value || descriptor.initializer()
    }; // target.constructor.prototype[key] = (newDescriptor.value || newDescriptor.initializer());

    Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
    target.constructor.metaObject.addMetaData('constants', key, newDescriptor);
  }

  return newDescriptor; // return;
}

// This file is part of LeanES.
var cpoMetaObject$d = Symbol["for"]('~metaObject');
function util(target, key, descriptor) {
  assert(target.constructor[cpoMetaObject$d] != null, 'Target for `util` decorator must be a Module.prototype');
  assert(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Util '").concat(key, "' can not be declared"));
  var newDescriptor = {
    configurable: false,
    enumerable: true,
    writable: false,
    value: descriptor.value || descriptor.initializer()
  };
  Reflect.defineProperty(target, key, newDescriptor);
  target.constructor.metaObject.addMetaData('utilities', key, newDescriptor);
  return;
}

// This file is part of LeanES.
var cpoMetaObject$e = Symbol["for"]('~metaObject');
function method(target, key, descriptor) {
  var isClass = target[cpoMetaObject$e] != null;
  var vmFunctor = descriptor.value || descriptor.initializer && descriptor.initializer();
  var vcClass = isClass ? target : target.constructor;
  var stringifyedKey = _.isSymbol(key) ? Symbol.keyFor(key) : key;
  assert(vcClass.isExtensible, "Class '".concat(vcClass.name, "' has been frozen previously. Method '").concat(stringifyedKey, "' can not be declared")); // const wrapper = function (...args) {
  //   return vmFunctor.apply(this, args);
  // };
  // Reflect.defineProperty(wrapper, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(vmFunctor, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'name', {
  //   value: key,
  //   configurable: true
  // });

  Reflect.defineProperty(vmFunctor, 'name', {
    value: key,
    configurable: true
  });
  Reflect.defineProperty(vmFunctor, 'isAsync', {
    value: isAsync(vmFunctor),
    configurable: true
  }); // Reflect.defineProperty(vmFunctor, 'wrapper', {
  //   value: wrapper,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'body', {
  //   value: vmFunctor,
  //   enumerable: true
  // });

  if (isClass) {
    vcClass.metaObject.addMetaData('classMethods', key, vmFunctor);
  } else {
    vcClass.metaObject.addMetaData('instanceMethods', key, vmFunctor);
  }

  return {
    configurable: descriptor.configurable,
    enumerable: descriptor.enumerable,
    writable: false,
    value: vmFunctor
  };
}

// This file is part of LeanES.
var cpoMetaObject$f = Symbol["for"]('~metaObject');
function property(target, key, descriptor) {
  var isClass = target[cpoMetaObject$f] != null;
  var vcClass = isClass ? target : target.constructor;
  var stringifyedKey = _.isSymbol(key) ? Symbol.keyFor(key) : key;
  assert(vcClass.isExtensible, "Class '".concat(vcClass.name, "' has been frozen previously. Property '").concat(stringifyedKey, "' can not be declared"));

  if (isClass) {
    vcClass.metaObject.mergeMetaData('classVariables', key, descriptor);
  } else {
    vcClass.metaObject.mergeMetaData('instanceVariables', key, descriptor);
  }

  return descriptor;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var flowRuntime_umd = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	 module.exports = factory() ;
}(commonjsGlobal, (function () {
/**
 * This file exports a dictionary of global primitive types that are shared by all contexts.
 * It is populated in [registerPrimitiveTypes()](./registerPrimitiveTypes.js).
 */

var primitiveTypes = {};

var _regeneratorRuntime = runtime_1;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};





var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

function makeJSONError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var errors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : null;
      var actual = context.typeOf(_resolvePath(input, path)).toString();
      var field = stringifyPath(validation.path.concat(path));

      var pointer = '/' + path.join('/');

      errors.push({
        pointer: pointer,
        field: field,
        message: message,
        expected: expected,
        actual: actual
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return errors;
}

// Tracks whether we're in validation of cyclic objects.
var cyclicValidation = new WeakMap();
// Tracks whether we're toString() of cyclic objects.


var cyclicToString = new WeakSet();

function inValidationCycle(type, input) {
  try {
    var tracked = cyclicValidation.get(type);
    if (!tracked) {
      return false;
    } else {
      return weakSetHas(tracked, input);
    }
  } catch (e) {
    // some exotic values cannot be checked
    return true;
  }
}

function startValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (!tracked) {
    tracked = new WeakSet();
    cyclicValidation.set(type, tracked);
  }
  weakSetAdd(tracked, input);
}

function endValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (tracked) {
    weakSetDelete(tracked, input);
  }
}

function inToStringCycle(type) {
  return cyclicToString.has(type);
}

function startToStringCycle(type) {
  cyclicToString.add(type);
}

function endToStringCycle(type) {
  cyclicToString.delete(type);
}

function weakSetHas(weakset, value) {
  try {
    return weakset.has(value);
  } catch (e) {
    return true;
  }
}

function weakSetAdd(weakset, value) {
  try {
    weakset.add(value);
  } catch (e) {}
}

function weakSetDelete(weakset, value) {
  try {
    weakset.delete(value);
  } catch (e) {}
}

var validIdentifierOrAccessor = /^[$A-Z_][0-9A-Z_$[\].]*$/i;

var Validation = function () {
  function Validation(context, input) {
    classCallCheck(this, Validation);
    this.path = [];
    this.prefix = '';
    this.errors = [];
    this.cyclic = new WeakMap();

    this.context = context;
    this.input = input;
  }

  // Tracks whether we're in validation of cyclic objects.


  createClass(Validation, [{
    key: 'inCycle',
    value: function inCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        return false;
      } else {
        return weakSetHas(tracked, input);
      }
    }
  }, {
    key: 'startCycle',
    value: function startCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        tracked = new WeakSet();
        this.cyclic.set(type, tracked);
      }
      weakSetAdd(tracked, input);
    }
  }, {
    key: 'endCycle',
    value: function endCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (tracked) {
        weakSetDelete(tracked, input);
      }
    }
  }, {
    key: 'hasErrors',
    value: function hasErrors(path) {
      if (path) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ref = _step.value;

            var _ref2 = slicedToArray(_ref, 1);

            var candidate = _ref2[0];

            if (matchPath(path, candidate)) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      } else {
        return this.errors.length > 0;
      }
    }
  }, {
    key: 'addError',
    value: function addError(path, expectedType, message) {
      this.errors.push([path, message, expectedType]);
      return this;
    }
  }, {
    key: 'clearError',
    value: function clearError(path) {
      var didClear = false;
      if (path) {
        var _errors = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.errors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var error = _step2.value;

            if (matchPath(path, error[0])) {
              didClear = true;
            } else {
              _errors.push(error);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this.errors = _errors;
      } else {
        didClear = this.errors.length > 0;
        this.errors = [];
      }
      return didClear;
    }
  }, {
    key: 'resolvePath',
    value: function resolvePath(path) {
      return _resolvePath(this.input, path);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return makeJSONError(this);
    }
  }]);
  return Validation;
}();

function stringifyPath(path) {
  if (!path.length) {
    return 'Value';
  }
  var length = path.length;

  var parts = new Array(length);
  for (var i = 0; i < length; i++) {
    var part = path[i];
    if (part === '[[Return Type]]') {
      parts[i] = 'Return Type';
    } else if (typeof part !== 'string' || !validIdentifierOrAccessor.test(part)) {
      parts[i] = '[' + String(part) + ']';
    } else if (i > 0) {
      parts[i] = '.' + String(part);
    } else {
      parts[i] = String(part);
    }
  }
  return parts.join('');
}

function _resolvePath(input, path) {
  var subject = input;
  var length = path.length;

  for (var i = 0; i < length; i++) {
    if (subject == null) {
      return undefined;
    }
    var part = path[i];
    if (part === '[[Return Type]]') {
      continue;
    }
    if (subject instanceof Map) {
      subject = subject.get(part);
    } else {
      subject = subject[part];
    }
  }
  return subject;
}

function matchPath(path, candidate) {
  var length = path.length;

  if (length > candidate.length) {
    return false;
  }
  for (var i = 0; i < length; i++) {
    if (candidate[i] !== path[i]) {
      return false;
    }
  }
  return true;
}

var RuntimeTypeError = function (_TypeError) {
  inherits(RuntimeTypeError, _TypeError);

  function RuntimeTypeError(message, options) {
    classCallCheck(this, RuntimeTypeError);

    var _this = possibleConstructorReturn(this, (RuntimeTypeError.__proto__ || Object.getPrototypeOf(RuntimeTypeError)).call(this, message));

    _this.name = "RuntimeTypeError";

    Object.assign(_this, options);
    return _this;
  }

  return RuntimeTypeError;
}(TypeError);

var delimiter = '\n-------------------------------------------------\n\n';

function makeTypeError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var prefix = validation.prefix,
      input = validation.input,
      context = validation.context,
      errors = validation.errors;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = _resolvePath(input, path);
      var actualType = context.typeOf(actual).toString();

      var field = stringifyPath(validation.path.concat(path));

      var actualAsString = makeString(actual);

      if (typeof actualAsString === 'string') {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual Value: ' + actualAsString + '\n\nActual Type: ' + actualType + '\n');
      } else {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actualType + '\n');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (prefix) {
    return new RuntimeTypeError(prefix.trim() + ' ' + collected.join(delimiter), { errors: errors });
  } else {
    return new RuntimeTypeError(collected.join(delimiter), { errors: errors });
  }
}

function makeString(value) {
  if (value === null) {
    return 'null';
  }
  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
    case 'string':
      return '"' + value + '"';
    // Issue
    case 'symbol':
    case 'number':
    case 'boolean':
    case 'undefined':
      return String(value);
    case 'function':
      return;
    default:
      if (Array.isArray(value) || value.constructor == null || value.constructor === Object) {
        try {
          return JSON.stringify(value, null, 2);
        } catch (e) {
          return;
        }
      }
      return;
  }
}

function makeError(expected, input) {
  var context = expected.context;

  var validation = context.validate(expected, input);
  return makeTypeError(validation);
}

/**
 * Given two types, A and B, compare them and return either -1, 0, or 1:
 *
 *   -1 if A cannot accept type B.
 *
 *    0 if the types are effectively identical.
 *
 *    1 if A accepts every possible B.
 */


function compareTypes(a, b) {
  var result = void 0;

  if (a === b) {
    return 0;
  }

  if (b instanceof TypeAlias || b instanceof TypeParameter || b instanceof TypeParameterApplication || b instanceof TypeTDZ) {
    b = b.unwrap();
  }

  if (a instanceof TypeAlias) {
    result = a.compareWith(b);
  } else if (a instanceof FlowIntoType || a instanceof TypeParameter || b instanceof FlowIntoType) {
    result = a.compareWith(b);
  } else if (a instanceof AnyType || a instanceof ExistentialType || a instanceof MixedType) {
    return 1;
  } else {
    result = a.compareWith(b);
  }

  if (b instanceof AnyType) {
    // Note: This check cannot be moved higher in the scope,
    // as this would prevent types from being propagated upwards.
    return 1;
  } else {
    return result;
  }
}

/**
 * # Type
 *
 * This is the base class for all types.
 */
var Type = function () {
  function Type(context) {
    classCallCheck(this, Type);
    this.typeName = 'Type';

    this.context = context;
  }

  createClass(Type, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var validation = new Validation(this.context, input);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.errors(validation, [], input)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var error = _step.value;
          // eslint-disable-line no-unused-vars
          return false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      if (compareTypes(this, input) === -1) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return -1;
    }
  }, {
    key: 'assert',
    value: function assert(input) {
      var error = makeError(this, input);
      if (error) {
        if (typeof Error.captureStackTrace === 'function') {
          Error.captureStackTrace(error, this.assert);
        }
        throw error;
      }
      return input;
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Type';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return Type;
}();

var AnyType = function (_Type) {
  inherits(AnyType, _Type);

  function AnyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, AnyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AnyType.__proto__ || Object.getPrototypeOf(AnyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'AnyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(AnyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'any';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return AnyType;
}(Type);

var errorMessages = {
  ERR_CONSTRAINT_VIOLATION: 'violated a constraint',
  ERR_EXPECT_ARRAY: 'must be an Array',
  ERR_EXPECT_TRUE: 'must be true',
  ERR_EXPECT_FALSE: 'must be false',
  ERR_EXPECT_BOOLEAN: 'must be true or false',
  ERR_EXPECT_EMPTY: 'must be empty',
  ERR_EXPECT_EXACT_VALUE: 'must be exactly $0',
  ERR_EXPECT_CALLABLE: 'must be callable',
  ERR_EXPECT_CLASS: 'must be a Class of $0',
  ERR_EXPECT_FUNCTION: 'must be a function',
  ERR_EXPECT_GENERATOR: 'must be a generator function',
  ERR_EXPECT_ITERABLE: 'must be iterable',
  ERR_EXPECT_ARGUMENT: 'argument "$0" must be: $1',
  ERR_EXPECT_RETURN: 'expected return type of: $0',
  ERR_EXPECT_N_ARGUMENTS: 'requires $0 argument(s)',
  ERR_EXPECT_INSTANCEOF: 'must be an instance of $0',
  ERR_EXPECT_KEY_TYPE: 'keys must be: $0',
  ERR_EXPECT_NULL: 'must be null',
  ERR_EXPECT_NUMBER: 'must be a number',
  ERR_EXPECT_OBJECT: 'must be an object',
  ERR_EXPECT_PROMISE: 'must be a promise of $0',
  ERR_EXPECT_STRING: 'must be a string',
  ERR_EXPECT_SYMBOL: 'must be a symbol',
  ERR_EXPECT_THIS: 'must be exactly this',
  ERR_EXPECT_VOID: 'must be undefined',
  ERR_INVALID_DATE: 'must be a valid date',
  ERR_MISSING_PROPERTY: 'does not exist on object',
  ERR_NO_INDEXER: 'is not one of the permitted indexer types',
  ERR_NO_UNION: 'must be one of: $0',
  ERR_UNKNOWN_KEY: 'should not contain the key: "$0"'
};

function getErrorMessage(key) {
  for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  var message = errorMessages[key];
  if (params.length > 0) {
    return message.replace(/\$(\d+)/g, function (m, i) {
      return String(params[i]);
    });
  } else {
    return message;
  }
}

var TupleType = function (_Type) {
  inherits(TupleType, _Type);

  function TupleType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TupleType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TupleType.__proto__ || Object.getPrototypeOf(TupleType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TupleType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TupleType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, context, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < length)) {
                _context.next = 13;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path.concat(i), input[i]), 't0', 10);

            case 10:
              i++;
              _context.next = 8;
              break;

            case 13:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;
      var context = this.context;


      if (!context.checkPredicate('Array', input) || input.length < length) {
        return false;
      }
      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof TupleType)) {
        return -1;
      }
      var types = this.types;
      var inputTypes = input.types;
      if (inputTypes.length < types.length) {
        return -1;
      }
      var isGreater = false;
      for (var i = 0; i < types.length; i++) {
        var result = compareTypes(types[i], inputTypes[i]);
        if (result === 1) {
          isGreater = true;
        } else if (result === -1) {
          return -1;
        }
      }
      if (types.length < inputTypes.length) {
        return 0;
      } else if (isGreater) {
        return 1;
      } else {
        return 0;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.types.join(', ') + ']';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return TupleType;
}(Type);

var ArrayType = function (_Type) {
  inherits(ArrayType, _Type);

  function ArrayType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ArrayType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ArrayType.__proto__ || Object.getPrototypeOf(ArrayType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ArrayType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ArrayType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var context, elementType, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!validation.inCycle(this, input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              validation.startCycle(this, input);
              elementType = this.elementType;
              length = input.length;
              i = 0;

            case 11:
              if (!(i < length)) {
                _context.next = 16;
                break;
              }

              return _context.delegateYield(elementType.errors(validation, path.concat(i), input[i]), 't0', 13);

            case 13:
              i++;
              _context.next = 11;
              break;

            case 16:
              validation.endCycle(this, input);

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);
      var elementType = this.elementType;
      var length = input.length;

      for (var i = 0; i < length; i++) {
        if (!elementType.accepts(input[i])) {
          endValidationCycle(this, input);
          return false;
        }
      }
      endValidationCycle(this, input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var elementType = this.elementType;

      if (input instanceof TupleType) {
        var types = input.types;

        for (var i = 0; i < types.length; i++) {
          var result = compareTypes(elementType, types[i]);
          if (result === -1) {
            return -1;
          }
        }
        return 1;
      } else if (input instanceof ArrayType) {
        return compareTypes(elementType, input.elementType);
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var elementType = this.elementType;

      if (inToStringCycle(this)) {
        if (typeof elementType.name === 'string') {
          return 'Array<$Cycle<' + elementType.name + '>>';
        } else {
          return 'Array<$Cycle<Object>>';
        }
      }
      startToStringCycle(this);
      var output = 'Array<' + elementType.toString() + '>';
      endToStringCycle(this);
      return output;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        elementType: this.elementType
      };
    }
  }]);
  return ArrayType;
}(Type);

var BooleanLiteralType = function (_Type) {
  inherits(BooleanLiteralType, _Type);

  function BooleanLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanLiteralType.__proto__ || Object.getPrototypeOf(BooleanLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== this.value)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage(this.value ? 'ERR_EXPECT_TRUE' : 'ERR_EXPECT_FALSE'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.value ? 'true' : 'false';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.typeName,
        value: this.value
      };
    }
  }]);
  return BooleanLiteralType;
}(Type);

var BooleanType = function (_Type) {
  inherits(BooleanType, _Type);

  function BooleanType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanType.__proto__ || Object.getPrototypeOf(BooleanType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'boolean')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_BOOLEAN'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'boolean';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType) {
        return 1;
      } else if (input instanceof BooleanType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'boolean';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return BooleanType;
}(Type);

var EmptyType = function (_Type) {
  inherits(EmptyType, _Type);

  function EmptyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, EmptyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EmptyType.__proto__ || Object.getPrototypeOf(EmptyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'EmptyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(EmptyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return [path, getErrorMessage('ERR_EXPECT_EMPTY'), this];

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return false; // empty types accepts nothing.
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof EmptyType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'empty';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return EmptyType;
}(Type);

var ExistentialType = function (_Type) {
  inherits(ExistentialType, _Type);

  function ExistentialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExistentialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExistentialType.__proto__ || Object.getPrototypeOf(ExistentialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExistentialType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExistentialType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '*';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ExistentialType;
}(Type);

/**
 * # TypeParameterApplication
 *
 */
var TypeParameterApplication = function (_Type) {
  inherits(TypeParameterApplication, _Type);

  function TypeParameterApplication() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameterApplication);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameterApplication.__proto__ || Object.getPrototypeOf(TypeParameterApplication)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameterApplication', _this.typeInstances = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeParameterApplication, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var parent, typeInstances;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              parent = this.parent, typeInstances = this.typeInstances;
              return _context.delegateYield(parent.errors.apply(parent, [validation, path, input].concat(toConsumableArray(typeInstances))), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var parent = this.parent,
          typeInstances = this.typeInstances;

      return parent.accepts.apply(parent, [input].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var _parent;

      return (_parent = this.parent).compareWith.apply(_parent, [input].concat(toConsumableArray(this.typeInstances)));
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.hasProperty === 'function') {
        var _ref2;

        return (_ref2 = inner).hasProperty.apply(_ref2, [name].concat(toConsumableArray(this.typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.getProperty === 'function') {
        var _ref3;

        return (_ref3 = inner).getProperty.apply(_ref3, [name].concat(toConsumableArray(this.typeInstances)));
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _parent2;

      return (_parent2 = this.parent).unwrap.apply(_parent2, toConsumableArray(this.typeInstances));
    }
  }, {
    key: 'toString',
    value: function toString() {
      var parent = this.parent,
          typeInstances = this.typeInstances;
      var name = parent.name;

      if (typeInstances.length) {
        var items = [];
        for (var i = 0; i < typeInstances.length; i++) {
          var typeInstance = typeInstances[i];
          items.push(typeInstance.toString());
        }
        return name + '<' + items.join(', ') + '>';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeInstances: this.typeInstances
      };
    }
  }]);
  return TypeParameterApplication;
}(Type);

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(collectConstraintErrors);

/**
 * Add constraints to the given subject type.
 */
function addConstraints(subject) {
  var _subject$constraints;

  for (var _len = arguments.length, constraints = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    constraints[_key - 1] = arguments[_key];
  }

  (_subject$constraints = subject.constraints).push.apply(_subject$constraints, toConsumableArray(constraints));
}

/**
 * Collect any errors from constraints on the given subject type.
 */


function collectConstraintErrors(subject, validation, path) {
  for (var _len2 = arguments.length, input = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    input[_key2 - 3] = arguments[_key2];
  }

  var constraints, length, i, constraint, violation;
  return _regeneratorRuntime.wrap(function collectConstraintErrors$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          constraints = subject.constraints;
          length = constraints.length;
          i = 0;

        case 3:
          if (!(i < length)) {
            _context.next = 12;
            break;
          }

          constraint = constraints[i];
          violation = constraint.apply(undefined, toConsumableArray(input));

          if (!(typeof violation === 'string')) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return [path, violation, this];

        case 9:
          i++;
          _context.next = 3;
          break;

        case 12:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked, this);
}

/**
 * Determine whether the input passes the constraints on the subject type.
 */
function constraintsAccept(subject) {
  var constraints = subject.constraints;
  var length = constraints.length;

  for (var _len3 = arguments.length, input = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    input[_key3 - 1] = arguments[_key3];
  }

  for (var i = 0; i < length; i++) {
    var constraint = constraints[i];
    if (typeof constraint.apply(undefined, toConsumableArray(input)) === 'string') {
      return false;
    }
  }
  return true;
}

var TypeAlias = function (_Type) {
  inherits(TypeAlias, _Type);

  function TypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeAlias.__proto__ || Object.getPrototypeOf(TypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeAlias', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeAlias, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          type = this.type;

      if (withDeclaration) {
        return 'type ' + name + ' = ' + type.toString() + ';';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return this.type.properties;
    }
  }, {
    key: 'hasConstraints',
    get: function get$$1() {
      return this.constraints.length > 0;
    }
  }]);
  return TypeAlias;
}(Type);

var FlowIntoSymbol = Symbol('FlowInto');

/**
 * # TypeParameter
 *
 * Type parameters allow polymorphic type safety.
 * The first time a type parameter is checked, it records the shape of its input,
 * this recorded shape is used to check all future inputs for this particular instance.
 */

var TypeParameter = function (_Type) {
  inherits(TypeParameter, _Type);

  function TypeParameter() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameter.__proto__ || Object.getPrototypeOf(TypeParameter)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameter', _this[FlowIntoSymbol] = null, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  createClass(TypeParameter, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var boundOrDefault, recorded, context, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              boundOrDefault = this.bound || this.default;
              recorded = this.recorded, context = this.context;

              if (!(boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias)) {
                _context.next = 7;
                break;
              }

              return _context.delegateYield(boundOrDefault.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 7:
              if (!recorded) {
                _context.next = 12;
                break;
              }

              return _context.delegateYield(recorded.errors(validation, path, input), 't1', 9);

            case 9:
              return _context.abrupt('return');

            case 12:
              if (!boundOrDefault) {
                _context.next = 47;
                break;
              }

              if (!(boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType')) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 21;
              _iterator = boundOrDefault.errors(validation, path, input)[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 31;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 28;
              return error;

            case 28:
              _iteratorNormalCompletion = true;
              _context.next = 23;
              break;

            case 31:
              _context.next = 37;
              break;

            case 33:
              _context.prev = 33;
              _context.t2 = _context['catch'](21);
              _didIteratorError = true;
              _iteratorError = _context.t2;

            case 37:
              _context.prev = 37;
              _context.prev = 38;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 40:
              _context.prev = 40;

              if (!_didIteratorError) {
                _context.next = 43;
                break;
              }

              throw _iteratorError;

            case 43:
              return _context.finish(40);

            case 44:
              return _context.finish(37);

            case 45:
              if (!hasErrors) {
                _context.next = 47;
                break;
              }

              return _context.abrupt('return');

            case 47:

              this.recorded = context.typeOf(input);

            case 48:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[21, 33, 37, 45], [38,, 40, 44]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded,
          context = this.context;

      if (boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias) {
        // We defer to the other type parameter so that values from this
        // one can flow "upwards".
        return boundOrDefault.accepts(input);
      } else if (recorded) {
        return recorded.accepts(input);
      } else if (boundOrDefault) {
        if (boundOrDefault.typeName === "AnyType" || boundOrDefault.typeName === "ExistentialType") {
          return true;
        } else if (!boundOrDefault.accepts(input)) {
          return false;
        }
      }

      this.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (input instanceof TypeParameter) {
        // We don't need to check for `recorded` or `bound` fields
        // because the input has already been unwrapped, so
        // if we got a type parameter it must be totally generic and
        // we treat it like Any.
        return 1;
      } else if (recorded) {
        return compareTypes(recorded, input);
      } else if (boundOrDefault) {
        return compareTypes(boundOrDefault, input);
      } else {
        // A generic type parameter accepts any input.
        return 1;
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (recorded) {
        return recorded.unwrap();
      } else if (boundOrDefault) {
        return boundOrDefault.unwrap();
      } else {
        return this;
      }
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      var id = this.id,
          bound = this.bound,
          defaultType = this.default;

      if (withBinding) {
        if (defaultType) {
          return id + ' = ' + defaultType.toString();
        } else if (bound) {
          return id + ': ' + bound.toString();
        }
      }
      return id;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        bound: this.bound,
        recorded: this.recorded
      };
    }
  }]);
  return TypeParameter;
}(Type);

function flowIntoTypeParameter(typeParameter) {
  var existing = typeParameter[FlowIntoSymbol];
  if (existing) {
    return existing;
  }

  var target = new FlowIntoType(typeParameter.context);
  target.typeParameter = typeParameter;
  typeParameter[FlowIntoSymbol] = target;
  return target;
}

/**
 * # FlowIntoType
 *
 * A virtual type which allows types it receives to "flow" upwards into a type parameter.
 * The type parameter will become of a union of any types seen by this instance.
 */

var FlowIntoType = function (_Type) {
  inherits(FlowIntoType, _Type);

  function FlowIntoType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FlowIntoType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FlowIntoType.__proto__ || Object.getPrototypeOf(FlowIntoType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FlowIntoType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FlowIntoType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var typeParameter, context, recorded, bound, hasError, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error, _hasError, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              typeParameter = this.typeParameter, context = this.context;
              recorded = typeParameter.recorded, bound = typeParameter.bound;

              if (!(bound instanceof FlowIntoType)) {
                _context.next = 5;
                break;
              }

              return _context.delegateYield(bound.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!recorded) {
                _context.next = 47;
                break;
              }

              if (!bound) {
                _context.next = 39;
                break;
              }

              hasError = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 11;
              _iterator = bound.errors(validation, path, input)[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 21;
                break;
              }

              error = _step.value;
              _context.next = 17;
              return error;

            case 17:
              hasError = true;

            case 18:
              _iteratorNormalCompletion = true;
              _context.next = 13;
              break;

            case 21:
              _context.next = 27;
              break;

            case 23:
              _context.prev = 23;
              _context.t1 = _context['catch'](11);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 27:
              _context.prev = 27;
              _context.prev = 28;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 30:
              _context.prev = 30;

              if (!_didIteratorError) {
                _context.next = 33;
                break;
              }

              throw _iteratorError;

            case 33:
              return _context.finish(30);

            case 34:
              return _context.finish(27);

            case 35:
              if (!hasError) {
                _context.next = 37;
                break;
              }

              return _context.abrupt('return');

            case 37:
              _context.next = 45;
              break;

            case 39:
              if (!recorded.accepts(input)) {
                _context.next = 43;
                break;
              }

              return _context.abrupt('return');

            case 43:
              // we need to make a union
              typeParameter.recorded = context.union(recorded, context.typeOf(input));
              return _context.abrupt('return');

            case 45:
              _context.next = 82;
              break;

            case 47:
              if (!bound) {
                _context.next = 82;
                break;
              }

              if (!(bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType')) {
                _context.next = 52;
                break;
              }

              return _context.abrupt('return');

            case 52:
              _hasError = false;
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 56;
              _iterator2 = bound.errors(validation, path, input)[Symbol.iterator]();

            case 58:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 66;
                break;
              }

              _error = _step2.value;
              _context.next = 62;
              return _error;

            case 62:
              _hasError = true;

            case 63:
              _iteratorNormalCompletion2 = true;
              _context.next = 58;
              break;

            case 66:
              _context.next = 72;
              break;

            case 68:
              _context.prev = 68;
              _context.t2 = _context['catch'](56);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t2;

            case 72:
              _context.prev = 72;
              _context.prev = 73;

              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }

            case 75:
              _context.prev = 75;

              if (!_didIteratorError2) {
                _context.next = 78;
                break;
              }

              throw _iteratorError2;

            case 78:
              return _context.finish(75);

            case 79:
              return _context.finish(72);

            case 80:
              if (!_hasError) {
                _context.next = 82;
                break;
              }

              return _context.abrupt('return');

            case 82:

              typeParameter.recorded = context.typeOf(input);

            case 83:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[11, 23, 27, 35], [28,, 30, 34], [56, 68, 72, 80], [73,, 75, 79]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;


      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.accepts(input);
      }
      if (recorded) {
        // we've already recorded a value for this type parameter
        if (bound && !bound.accepts(input)) {
          return false;
        } else if (recorded.accepts(input)) {
          // our existing type already permits this value, there's nothing to do.
          return true;
        } else {
          // we need to make a union
          typeParameter.recorded = context.union(recorded, context.typeOf(input));
          return true;
        }
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return true;
        } else if (!bound.accepts(input)) {
          return false;
        }
      }

      typeParameter.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;

      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.compareWith(input);
      }
      if (recorded) {
        if (bound && compareTypes(bound, input) === -1) {
          return -1;
        }
        var result = compareTypes(recorded, input);
        if (result === 0) {
          // our existing type already permits this value, there's nothing to do.
          return 0;
        }
        // we need to make a union
        typeParameter.recorded = context.union(recorded, input);
        return 1;
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return 1;
        }
        var _result = compareTypes(bound, input);
        if (_result === -1) {
          return -1;
        }
      }

      typeParameter.recorded = input;
      return 0;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.typeParameter.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return this.typeParameter.toString(withBinding);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.typeParameter.toJSON();
    }
  }]);
  return FlowIntoType;
}(Type);

var FunctionTypeRestParam = function (_Type) {
  inherits(FunctionTypeRestParam, _Type);

  function FunctionTypeRestParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeRestParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeRestParam.__proto__ || Object.getPrototypeOf(FunctionTypeRestParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeRestParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeRestParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '...' + this.name + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }]);
  return FunctionTypeRestParam;
}(Type);

var FunctionTypeParam = function (_Type) {
  inherits(FunctionTypeParam, _Type);

  function FunctionTypeParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeParam.__proto__ || Object.getPrototypeOf(FunctionTypeParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optional = this.optional, type = this.type;

              if (!(optional && input === undefined)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              return _context.delegateYield(type.errors(validation, path, input), 't0', 6);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var optional = this.optional,
          type = this.type;

      if (optional && input === undefined) {
        return true;
      } else {
        return type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var optional = this.optional,
          type = this.type;

      return '' + this.name + (optional ? '?' : '') + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        optional: this.optional,
        type: this.type
      };
    }
  }]);
  return FunctionTypeParam;
}(Type);

var FunctionTypeReturn = function (_Type) {
  inherits(FunctionTypeReturn, _Type);

  function FunctionTypeReturn() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeReturn);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeReturn.__proto__ || Object.getPrototypeOf(FunctionTypeReturn)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeReturn', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeReturn, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path.concat('[[Return Type]]'), input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeReturn) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return FunctionTypeReturn;
}(Type);

var ParentSymbol = Symbol('Parent');
var NameRegistrySymbol = Symbol('NameRegistry');
var ModuleRegistrySymbol = Symbol('ModuleRegistry');
var CurrentModuleSymbol = Symbol('CurrentModule');
var TypeConstructorRegistrySymbol = Symbol('TypeConstructorRegistry');
var InferrerSymbol = Symbol('Inferrer');


var TypeSymbol = Symbol('Type');
var TypeParametersSymbol = Symbol('TypeParameters');
var TypePredicateRegistrySymbol = Symbol('TypePredicateRegistry');

var FunctionType = function (_Type) {
  inherits(FunctionType, _Type);

  function FunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionType.__proto__ || Object.getPrototypeOf(FunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionType', _this.params = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var annotation, returnType, params, i, param, annotationParam, context, _i, _param;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'function')) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              annotation = input[TypeSymbol];
              returnType = this.returnType, params = this.params;

              if (!annotation) {
                _context.next = 29;
                break;
              }

              if (annotation.params) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i = 0;

            case 10:
              if (!(i < params.length)) {
                _context.next = 24;
                break;
              }

              param = params[i];
              annotationParam = annotation.params[i];

              if (!(!annotationParam && !param.optional)) {
                _context.next = 18;
                break;
              }

              _context.next = 16;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 16:
              _context.next = 21;
              break;

            case 18:
              if (param.acceptsType(annotationParam)) {
                _context.next = 21;
                break;
              }

              _context.next = 21;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 21:
              i++;
              _context.next = 10;
              break;

            case 24:
              if (returnType.acceptsType(annotation.returnType)) {
                _context.next = 27;
                break;
              }

              _context.next = 27;
              return [path, getErrorMessage('ERR_EXPECT_RETURN', returnType.toString()), this];

            case 27:
              _context.next = 32;
              break;

            case 29:
              context = this.context;
              // We cannot safely check an unannotated function.
              // But we need to propagate `any` type feedback upwards.

              for (_i = 0; _i < params.length; _i++) {
                _param = params[_i];

                _param.acceptsType(context.any());
              }
              returnType.acceptsType(context.any());

            case 32:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (typeof input !== 'function') {
        return false;
      }
      var returnType = this.returnType,
          params = this.params;

      var annotation = input[TypeSymbol];
      if (annotation) {
        if (!annotation.params) {
          return true;
        }
        for (var i = 0; i < params.length; i++) {
          var param = params[i];
          var annotationParam = annotation.params[i];
          if (!annotationParam && !param.optional) {
            return false;
          } else if (!param.acceptsType(annotationParam)) {
            return false;
          }
        }
        if (!returnType.acceptsType(annotation.returnType)) {
          return false;
        }
        return true;
      } else {
        var context = this.context;
        // We cannot safely check an unannotated function.
        // But we need to propagate `any` type feedback upwards.

        for (var _i2 = 0; _i2 < params.length; _i2++) {
          var _param2 = params[_i2];
          _param2.acceptsType(context.any());
        }
        returnType.acceptsType(context.any());
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof FunctionType)) {
        return -1;
      }
      var returnType = this.returnType;
      var inputReturnType = input.returnType;
      var isGreater = false;
      var returnTypeResult = compareTypes(returnType, inputReturnType);
      if (returnTypeResult === -1) {
        return -1;
      } else if (returnTypeResult === 1) {
        isGreater = true;
      }

      var params = this.params;
      var inputParams = input.params;
      for (var i = 0; i < params.length; i++) {
        var param = params[i];
        var inputParam = i >= inputParams.length ? input.rest : inputParams[i];
        if (inputParam == null) {
          return -1;
        }
        var result = compareTypes(param, inputParam);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
      }
      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.accepts(args[i])) {
            return false;
          }
        } else if (!param.accepts(undefined)) {
          return false;
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i3 = paramsLength; _i3 < argsLength; _i3++) {
          if (!rest.accepts(args[_i3])) {
            return false;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          param.assert(args[i]);
        } else {
          param.assert(undefined);
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i4 = paramsLength; _i4 < argsLength; _i4++) {
          rest.assert(args[_i4]);
        }
      }

      return args;
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      this.returnType.assert(input);
      return input;
    }
  }, {
    key: 'invoke',
    value: function invoke() {
      var params = this.params,
          rest = this.rest,
          context = this.context;

      var paramsLength = params.length;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.acceptsType(args[i])) {
            return context.empty();
          }
        } else if (!param.accepts(undefined)) {
          return context.empty();
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i5 = paramsLength; _i5 < argsLength; _i5++) {
          if (!rest.acceptsType(args[_i5])) {
            return context.empty();
          }
        }
      }

      return this.returnType.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var params = this.params,
          rest = this.rest,
          returnType = this.returnType;

      var args = [];
      for (var i = 0; i < params.length; i++) {
        args.push(params[i].toString());
      }
      if (rest) {
        args.push(rest.toString());
      }
      return '(' + args.join(', ') + ') => ' + returnType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        params: this.params,
        rest: this.rest,
        returnType: this.returnType
      };
    }
  }]);
  return FunctionType;
}(Type);

var GeneratorType = function (_Type) {
  inherits(GeneratorType, _Type);

  function GeneratorType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GeneratorType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GeneratorType.__proto__ || Object.getPrototypeOf(GeneratorType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'GeneratorType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GeneratorType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isValid = input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';

              if (isValid) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_GENERATOR'), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof GeneratorType)) {
        var _result = compareTypes(this.yieldType, input);
        if (_result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
      var isGreater = false;
      var result = compareTypes(this.yieldType, input.yieldType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.returnType, input.returnType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.nextType, input.nextType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsYield',
    value: function acceptsYield(input) {
      return this.yieldType.accepts(input);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'acceptsNext',
    value: function acceptsNext(input) {
      return this.nextType.accepts(input);
    }
  }, {
    key: 'assertYield',
    value: function assertYield(input) {
      return this.yieldType.assert(input);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return this.returnType.assert(input);
    }
  }, {
    key: 'assertNext',
    value: function assertNext(input) {
      return this.nextType.assert(input);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var yieldType = this.yieldType,
          returnType = this.returnType,
          nextType = this.nextType;

      return 'Generator<' + yieldType.toString() + ', ' + returnType.toString() + ', ' + nextType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        yieldType: this.yieldType,
        returnType: this.returnType,
        nextType: this.nextType
      };
    }
  }]);
  return GeneratorType;
}(Type);

var warnedInstances = new WeakSet();

var TypeConstructor = function (_Type) {
  inherits(TypeConstructor, _Type);

  function TypeConstructor() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeConstructor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeConstructor.__proto__ || Object.getPrototypeOf(TypeConstructor)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeConstructor', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeConstructor, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement accepts().');
        warnedInstances.add(this);
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement compareWith().');
        warnedInstances.add(this);
      }
      return -1;
    }
  }, {
    key: 'inferTypeParameters',
    value: function inferTypeParameters(input) {
      return [];
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }]);
  return TypeConstructor;
}(Type);

var GenericType = function (_TypeConstructor) {
  inherits(GenericType, _TypeConstructor);

  function GenericType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GenericType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GenericType.__proto__ || Object.getPrototypeOf(GenericType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = "GenericType", _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GenericType, [{
    key: "errors",
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var name, impl;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              name = this.name, impl = this.impl;

              if (input instanceof impl) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage("ERR_EXPECT_INSTANCEOF", name), this];

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: "accepts",
    value: function accepts(input) {
      var impl = this.impl;

      return input instanceof impl;
    }
  }, {
    key: "compareWith",
    value: function compareWith(input) {
      var context = this.context,
          impl = this.impl;

      var annotation = context.getAnnotation(impl);
      if (annotation) {
        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var expected = annotation.unwrap.apply(annotation, toConsumableArray(typeInstances));
        return compareTypes(input, expected);
      } else if (input instanceof GenericType && (input.impl === impl || impl && impl.isPrototypeOf(input.impl))) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: "unwrap",
    value: function unwrap() {
      var context = this.context,
          impl = this.impl;

      if (typeof impl !== "function") {
        return this;
      }
      var annotation = context.getAnnotation(impl);
      if (annotation != null) {
        return annotation.unwrap.apply(annotation, arguments);
      } else {
        return this;
      }
    }
  }, {
    key: "inferTypeParameters",
    value: function inferTypeParameters(input) {
      return [];
    }
  }]);
  return GenericType;
}(TypeConstructor);

function invariant(input, message) {
  if (!input) {
    var error = new Error(message);
    error.name = 'InvariantViolation';
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(error, invariant);
    }
    throw error;
  }
}

var NullLiteralType = function (_Type) {
  inherits(NullLiteralType, _Type);

  function NullLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullLiteralType.__proto__ || Object.getPrototypeOf(NullLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== null)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NULL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === null;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'null';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NullLiteralType;
}(Type);

var VoidType = function (_Type) {
  inherits(VoidType, _Type);

  function VoidType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VoidType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VoidType.__proto__ || Object.getPrototypeOf(VoidType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VoidType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VoidType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== undefined)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_VOID'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === undefined;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof VoidType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'void';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return VoidType;
}(Type);

var NullableType = function (_Type) {
  inherits(NullableType, _Type);

  function NullableType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullableType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullableType.__proto__ || Object.getPrototypeOf(NullableType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullableType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullableType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input != null)) {
                _context.next = 2;
                break;
              }

              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input == null) {
        return true;
      } else {
        return this.type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType || input instanceof VoidType) {
        return 1;
      } else if (input instanceof NullableType) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '? ' + this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return NullableType;
}(Type);

var ObjectTypeProperty = function (_Type) {
  inherits(ObjectTypeProperty, _Type);

  function ObjectTypeProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeProperty.__proto__ || Object.getPrototypeOf(ObjectTypeProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeProperty', _this['static'] = false, _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeProperty, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }

    /**
     * Determine whether the property is nullable.
     */

  }, {
    key: 'isNullable',
    value: function isNullable() {
      return this.value instanceof NullableType;
    }

    /**
     * Determine whether the property exists on the given input or its prototype chain.
     */

  }, {
    key: 'existsOn',
    value: function existsOn(input) {
      // Ignore
      var key = this.key,
          isStatic = this.static;

      return key in (isStatic ? input.constructor : input) === true;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, key, value, isStatic, target, targetPath, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              optional = this.optional, key = this.key, value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 18;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 14;
                break;
              }

              if (optional) {
                _context.next = 13;
                break;
              }

              _context.next = 13;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 13:
              return _context.abrupt('return');

            case 14:
              targetPath.push(key);
              target = input.constructor[key];
              _context.next = 20;
              break;

            case 18:
              target = input[key];
              targetPath = path.concat(key);

            case 20:
              if (!(optional && target === undefined)) {
                _context.next = 22;
                break;
              }

              return _context.abrupt('return');

            case 22:
              if (!(this.isNullable() && !this.existsOn(input))) {
                _context.next = 26;
                break;
              }

              _context.next = 25;
              return [targetPath, getErrorMessage('ERR_MISSING_PROPERTY'), this];

            case 25:
              return _context.abrupt('return');

            case 26:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 30;
              _iterator = value.errors(validation, targetPath, target)[Symbol.iterator]();

            case 32:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 40;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 37;
              return error;

            case 37:
              _iteratorNormalCompletion = true;
              _context.next = 32;
              break;

            case 40:
              _context.next = 46;
              break;

            case 42:
              _context.prev = 42;
              _context.t0 = _context['catch'](30);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 46:
              _context.prev = 46;
              _context.prev = 47;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 49:
              _context.prev = 49;

              if (!_didIteratorError) {
                _context.next = 52;
                break;
              }

              throw _iteratorError;

            case 52:
              return _context.finish(49);

            case 53:
              return _context.finish(46);

            case 54:
              if (hasErrors) {
                _context.next = 56;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, targetPath, target), 't1', 56);

            case 56:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[30, 42, 46, 54], [47,, 49, 53]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var optional = this.optional,
          key = this.key,
          value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return optional ? true : false;
        }
        target = input.constructor[key];
      } else {
        target = input[key];
      }

      if (optional && target === undefined) {
        return true;
      }

      if (this.isNullable() && !this.existsOn(input)) {
        return false;
      }

      if (!value.accepts(target)) {
        return false;
      } else {
        return constraintsAccept(this, target);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeProperty)) {
        return -1;
      } else if (input.key !== this.key) {
        return -1;
      } else {
        return compareTypes(this.value, input.value);
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var key = this.key;
      // Issue 252
      if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol') {
        key = '[' + key.toString() + ']';
      }
      if (this.static) {
        return 'static ' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      } else {
        return '' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        key: this.key,
        value: this.value,
        optional: this.optional
      };
    }
  }]);
  return ObjectTypeProperty;
}(Type);

var ObjectTypeIndexer = function (_Type) {
  inherits(ObjectTypeIndexer, _Type);

  function ObjectTypeIndexer() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeIndexer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeIndexer.__proto__ || Object.getPrototypeOf(ObjectTypeIndexer)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeIndexer', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectTypeIndexer, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, key, value) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // special case number types
              if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
                key = +key;
              }

              return _context.delegateYield(this.key.errors(validation, path.concat('[[Key]]'), key), 't0', 2);

            case 2:
              return _context.delegateYield(this.value.errors(validation, path.concat(key), value), 't1', 3);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'acceptsKey',
    value: function acceptsKey(key) {
      // special case number types
      if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
        key = +key;
      }
      return this.key.accepts(key);
    }
  }, {
    key: 'acceptsValue',
    value: function acceptsValue(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ObjectTypeProperty) {
        if (!this.key.accepts(input.key)) {
          return -1;
        } else {
          return compareTypes(this.value, input.value);
        }
      } else if (!(input instanceof ObjectTypeIndexer)) {
        return -1;
      }

      var keyResult = compareTypes(this.key, input.key);
      if (keyResult === -1) {
        return -1;
      }
      var valueResult = compareTypes(this.value, input.value);
      if (valueResult === -1) {
        return -1;
      }

      if (keyResult === 0 && valueResult === 0) {
        return 0;
      } else {
        return 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.id + ': ' + this.key.toString() + ']: ' + this.value.toString() + ';';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        key: this.key,
        value: this.value
      };
    }
  }]);
  return ObjectTypeIndexer;
}(Type);

var ObjectTypeCallProperty = function (_Type) {
  inherits(ObjectTypeCallProperty, _Type);

  function ObjectTypeCallProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeCallProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeCallProperty.__proto__ || Object.getPrototypeOf(ObjectTypeCallProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeCallProperty', _this['static'] = false, _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeCallProperty, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value, isStatic, target, targetPath;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 16;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 13;
                break;
              }

              _context.next = 12;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 12:
              return _context.abrupt('return');

            case 13:
              target = input.constructor;
              _context.next = 18;
              break;

            case 16:
              target = input;
              targetPath = path;

            case 18:
              return _context.delegateYield(value.errors(validation, targetPath, target), 't0', 19);

            case 19:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return false;
        }
        target = input.constructor;
      } else {
        target = input;
      }
      return value.accepts(target);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeCallProperty)) {
        return -1;
      }
      return compareTypes(this.value, input.value);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.static) {
        return 'static ' + this.value.toString() + ';';
      } else {
        return this.value.toString();
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return ObjectTypeCallProperty;
}(Type);

var Declaration = function (_Type) {
  inherits(Declaration, _Type);

  function Declaration() {
    classCallCheck(this, Declaration);
    return possibleConstructorReturn(this, (Declaration.__proto__ || Object.getPrototypeOf(Declaration)).apply(this, arguments));
  }

  return Declaration;
}(Type);

var VarDeclaration = function (_Declaration) {
  inherits(VarDeclaration, _Declaration);

  function VarDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VarDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VarDeclaration.__proto__ || Object.getPrototypeOf(VarDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VarDeclaration', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VarDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare var ' + this.name + ': ' + this.type.toString() + ';';
    }
  }]);
  return VarDeclaration;
}(Declaration);

var TypeDeclaration = function (_Declaration) {
  inherits(TypeDeclaration, _Declaration);

  function TypeDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeDeclaration.__proto__ || Object.getPrototypeOf(TypeDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      var _typeAlias;

      (_typeAlias = this.typeAlias).addConstraint.apply(_typeAlias, arguments);
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.typeAlias.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'apply',
    value: function apply() {
      var _typeAlias2;

      return (_typeAlias2 = this.typeAlias).apply.apply(_typeAlias2, arguments);
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.typeAlias.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.typeAlias, input);
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var _typeAlias3;

      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 1] = arguments[_key2];
      }

      return (_typeAlias3 = this.typeAlias).hasProperty.apply(_typeAlias3, [name].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var _typeAlias4;

      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return (_typeAlias4 = this.typeAlias).getProperty.apply(_typeAlias4, [name].concat(toConsumableArray(typeInstances)));
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _typeAlias5;

      return (_typeAlias5 = this.typeAlias).unwrap.apply(_typeAlias5, arguments);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare ' + this.typeAlias.toString(true) + ';';
    }
  }, {
    key: 'type',
    get: function get$$1() {
      return this.typeAlias.type;
    }
  }]);
  return TypeDeclaration;
}(Declaration);

var ModuleDeclaration = function (_Declaration) {
  inherits(ModuleDeclaration, _Declaration);

  function ModuleDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleDeclaration.__proto__ || Object.getPrototypeOf(ModuleDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleDeclaration, [{
    key: 'get',
    value: function get$$1(name) {
      var moduleExports = this.moduleExports;

      if (moduleExports) {
        var exporting = moduleExports.unwrap();
        if (typeof exporting.getProperty === 'function') {
          var prop = exporting.getProperty(name);
          if (prop) {
            return prop.unwrap();
          }
        }
      } else {
        var declaration = this.declarations[name];
        if (declaration) {
          return declaration.unwrap();
        }
      }
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      if (/^\.\//.test(moduleName)) {
        moduleName = '' + this.name + moduleName.slice(1);
      }
      return this.innerContext.import(moduleName);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var name = this.name,
          declarations = this.declarations,
          modules = this.modules,
          moduleExports = this.moduleExports;

      var body = [];
      for (var _name in declarations) {
        // eslint-disable-line guard-for-in
        var declaration = declarations[_name];
        body.push(declaration.toString(true));
      }
      if (modules) {
        for (var _name2 in modules) {
          // eslint-disable-line guard-for-in
          var module = modules[_name2];
          body.push(module.toString());
        }
      }
      if (moduleExports) {
        body.push(moduleExports.toString());
      }
      return 'declare module "' + name + '" {\n' + indent$1(body.join('\n\n')) + '}';
    }
  }, {
    key: 'moduleType',
    get: function get$$1() {
      if (this.moduleExports) {
        return 'commonjs';
      } else {
        return 'es6';
      }
    }
  }, {
    key: 'isCommonJS',
    get: function get$$1() {
      return this.moduleExports ? true : false;
    }
  }, {
    key: 'isES6',
    get: function get$$1() {
      return this.moduleExports ? false : true;
    }
  }, {
    key: 'declarations',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[NameRegistrySymbol];
    }
  }, {
    key: 'modules',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[ModuleRegistrySymbol];
    }
  }]);
  return ModuleDeclaration;
}(Declaration);

function indent$1(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var ModuleExports = function (_Declaration) {
  inherits(ModuleExports, _Declaration);

  function ModuleExports() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleExports);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleExports.__proto__ || Object.getPrototypeOf(ModuleExports)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleExports', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleExports, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare module.exports: ' + this.type.toString() + ';';
    }
  }]);
  return ModuleExports;
}(Declaration);

var ClassDeclaration = function (_Declaration) {
  inherits(ClassDeclaration, _Declaration);

  function ClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassDeclaration.__proto__ || Object.getPrototypeOf(ClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var body, superClass, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref2, _ref3, errorPath, errorMessage, expectedType, propertyName;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              body = this.body;
              superClass = this.superClass && this.superClass.unwrap();

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 6;
                break;
              }

              _context.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', this.name), this];

            case 5:
              return _context.abrupt('return');

            case 6:
              if (!superClass) {
                _context.next = 42;
                break;
              }

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = superClass.errors(validation, path, input)[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 28;
                break;
              }

              _ref2 = _step.value;
              _ref3 = slicedToArray(_ref2, 3);
              errorPath = _ref3[0];
              errorMessage = _ref3[1];
              expectedType = _ref3[2];
              propertyName = errorPath[path.length];

              if (!body.getProperty(propertyName)) {
                _context.next = 23;
                break;
              }

              return _context.abrupt('continue', 25);

            case 23:
              _context.next = 25;
              return [errorPath, errorMessage, expectedType];

            case 25:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 28:
              _context.next = 34;
              break;

            case 30:
              _context.prev = 30;
              _context.t0 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 34:
              _context.prev = 34;
              _context.prev = 35;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 37:
              _context.prev = 37;

              if (!_didIteratorError) {
                _context.next = 40;
                break;
              }

              throw _iteratorError;

            case 40:
              return _context.finish(37);

            case 41:
              return _context.finish(34);

            case 42:
              return _context.delegateYield(body.errors(validation, path, input), 't1', 43);

            case 43:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 30, 34, 42], [35,, 37, 41]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var body = this.body;

      var superClass = this.superClass && this.superClass.unwrap();
      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      } else if (superClass && !superClass.accepts(input)) {
        return false;
      } else if (!body.accepts(input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ClassDeclaration) {
        if (input === this) {
          return 0;
        } else if (this.isSuperClassOf(input)) {
          return 1;
        } else {
          return -1;
        }
      }
      return compareTypes(this.body, input);
    }

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      var prop = body.getProperty(key);
      if (prop) {
        return prop;
      } else if (superClass && typeof superClass.getProperty === 'function') {
        return superClass.getProperty(key);
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      if (body.hasProperty(key)) {
        return true;
      } else if (superClass && typeof superClass.hasProperty === 'function') {
        return superClass.hasProperty(key);
      } else {
        return false;
      }
    }

    /**
     * Determine whether this class declaration represents a super class of
     * the given type.
     */

  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      var body = this.body,
          shapeID = this.shapeID;

      var current = candidate;

      while (current != null) {
        if (current === this || current === body || current.shapeID === shapeID) {
          return true;
        }
        if (current instanceof ClassDeclaration) {
          current = current.superClass;
        } else {
          current = current.unwrap();
        }
      }
      return false;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          superClass = this.superClass,
          body = this.body;

      if (withDeclaration) {
        var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
        return 'declare class ' + name + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
      } else {
        return name;
      }
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      var body = this.body,
          superClass = this.superClass;

      if (superClass == null) {
        return body.properties;
      }
      var bodyProps = body.properties;
      var superProps = superClass.unwrap().properties;
      if (superProps == null) {
        return bodyProps;
      }
      var seen = {};
      var seenStatic = {};
      var props = [];
      for (var i = 0; i < superProps.length; i++) {
        var prop = superProps[i];
        props.push(prop);
        if (prop.static) {
          seenStatic[prop.key] = i;
        } else {
          seen[prop.key] = i;
        }
      }
      for (var _i = 0; _i < bodyProps.length; _i++) {
        var _prop = bodyProps[_i];
        if (seen[_prop.key]) {
          props[_i] = _prop;
        } else {
          props.push(_prop);
        }
      }
      return props;
    }
  }]);
  return ClassDeclaration;
}(Declaration);

var PartialType = function (_Type) {
  inherits(PartialType, _Type);

  function PartialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, PartialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PartialType.__proto__ || Object.getPrototypeOf(PartialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'PartialType', _this.typeParameters = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(PartialType, [{
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this.context);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      this.typeParameters.push(target);
      return target;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var constraints, type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              constraints = this.constraints, type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (!(!hasErrors && constraints)) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var constraints = this.constraints,
          type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (constraints && !constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString(expand) {
      var type = this.type;

      return type.toString(expand);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeParameters: this.typeParameters,
        type: this.type
      };
    }
  }]);
  return PartialType;
}(Type);

var ParameterizedClassDeclaration = function (_Declaration) {
  inherits(ParameterizedClassDeclaration, _Declaration);

  function ParameterizedClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedClassDeclaration.__proto__ || Object.getPrototypeOf(ParameterizedClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return getPartial(this).compareWith(input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).type;
    }
  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      return getPartial(this).type.isSuperClassOf(candidate);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len5 = arguments.length, typeInstances = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        typeInstances[_key5] = arguments[_key5];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      if (!withDeclaration) {
        return this.name;
      }
      var partial = getPartial(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return partial.toString(true);
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      var superClass = type.superClass,
          body = type.body;

      var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
      return 'declare class ' + this.name + '<' + items.join(', ') + '>' + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getPartial(this).toJSON();
    }
  }, {
    key: 'superClass',
    get: function get$$1() {
      return getPartial(this).type.superClass;
    }
  }, {
    key: 'body',
    get: function get$$1() {
      return getPartial(this).type.body;
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial(this).type.properties;
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial(this).typeParameters;
    }
  }]);
  return ParameterizedClassDeclaration;
}(Declaration);

function getPartial(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  if (Array.isArray(body)) {
    partial.type = context.class.apply(context, [parent.name].concat(toConsumableArray(body)));
  } else {
    partial.type = context.class(parent.name, body);
  }

  partial.type.shapeID = parent.shapeID;

  var typeParameters = partial.typeParameters;

  for (var _len6 = arguments.length, typeInstances = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    typeInstances[_key6 - 1] = arguments[_key6];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ExtendsDeclaration = function (_Declaration) {
  inherits(ExtendsDeclaration, _Declaration);

  function ExtendsDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExtendsDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExtendsDeclaration.__proto__ || Object.getPrototypeOf(ExtendsDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExtendsDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExtendsDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var type = this.type;

      if (withDeclaration) {
        return 'extends ' + type.toString();
      } else {
        return type.toString();
      }
    }
  }]);
  return ExtendsDeclaration;
}(Declaration);

var _marked$1 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithIndexers);
var _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithoutIndexers);
var _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsExact);

var ObjectType = function (_Type) {
  inherits(ObjectType, _Type);

  function ObjectType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectType.__proto__ || Object.getPrototypeOf(ObjectType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectType', _this.properties = [], _this.indexers = [], _this.callProperties = [], _this.exact = false, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectType, [{
    key: 'getProperty',


    /**
     * Get a property with the given name, or undefined if it does not exist.
     */
    value: function getProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return property;
        }
      }
      return this.getIndexer(key);
    }
  }, {
    key: 'setProperty',
    value: function setProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var context = this.context,
          properties = this.properties;
      var length = properties.length;

      var newProp = new ObjectTypeProperty(context);
      newProp.key = key;
      newProp.value = value;
      newProp.optional = optional;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          properties[i] = newProp;
          return;
        }
      }
      properties.push(newProp);
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return true;
        }
      }
      return this.hasIndexer(key);
    }

    /**
     * Get an indexer with which matches the given key type.
     */

  }, {
    key: 'getIndexer',
    value: function getIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return indexer;
        }
      }
    }

    /**
     * Determine whether an indexer exists which matches the given key type.
     */

  }, {
    key: 'hasIndexer',
    value: function hasIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var hasCallProperties;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input === null)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              hasCallProperties = this.callProperties.length > 0;

              if (!hasCallProperties) {
                _context.next = 11;
                break;
              }

              if (acceptsCallProperties(this, input)) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return [path, getErrorMessage('ERR_EXPECT_CALLABLE'), this];

            case 9:
              _context.next = 15;
              break;

            case 11:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object')) {
                _context.next = 15;
                break;
              }

              _context.next = 14;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 14:
              return _context.abrupt('return');

            case 15:
              if (!validation.inCycle(this, input)) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              validation.startCycle(this, input);

              if (!(this.indexers.length > 0)) {
                _context.next = 26;
                break;
              }

              if (!(input instanceof Object && Array.isArray(input))) {
                _context.next = 23;
                break;
              }

              _context.next = 22;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 22:
              return _context.abrupt('return');

            case 23:
              return _context.delegateYield(collectErrorsWithIndexers(this, validation, path, input), 't0', 24);

            case 24:
              _context.next = 27;
              break;

            case 26:
              return _context.delegateYield(collectErrorsWithoutIndexers(this, validation, path, input), 't1', 27);

            case 27:
              if (!this.exact) {
                _context.next = 29;
                break;
              }

              return _context.delegateYield(collectErrorsExact(this, validation, path, input), 't2', 29);

            case 29:
              validation.endCycle(this, input);

            case 30:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input === null) {
        return false;
      }
      var hasCallProperties = this.callProperties.length > 0;

      if (hasCallProperties) {
        if (!acceptsCallProperties(this, input)) {
          return false;
        }
      } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object') {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);

      var result = void 0;
      if (this.indexers.length > 0) {
        result = acceptsWithIndexers(this, input);
      } else {
        result = acceptsWithoutIndexers(this, input);
      }
      if (result && this.exact) {
        result = acceptsExact(this, input);
      }
      endValidationCycle(this, input);
      return result;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectType || input instanceof ClassDeclaration || input instanceof ParameterizedClassDeclaration)) {
        return -1;
      }
      var hasCallProperties = this.callProperties.length > 0;

      var isGreater = false;
      if (hasCallProperties) {
        var _result = compareTypeCallProperties(this, input);
        if (_result === -1) {
          return -1;
        } else if (_result === 1) {
          isGreater = true;
        }
      }

      var result = void 0;
      if (this.indexers.length > 0) {
        result = compareTypeWithIndexers(this, input);
      } else {
        result = compareTypeWithoutIndexers(this, input);
      }

      if (result === -1) {
        return -1;
      } else if (isGreater) {
        return 1;
      } else {
        return result;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var callProperties = this.callProperties,
          properties = this.properties,
          indexers = this.indexers;

      if (inToStringCycle(this)) {
        return '$Cycle<Object>';
      }
      startToStringCycle(this);
      var body = [];
      for (var i = 0; i < callProperties.length; i++) {
        body.push(callProperties[i].toString());
      }
      for (var _i = 0; _i < properties.length; _i++) {
        body.push(properties[_i].toString());
      }
      for (var _i2 = 0; _i2 < indexers.length; _i2++) {
        body.push(indexers[_i2].toString());
      }
      endToStringCycle(this);
      if (this.exact) {
        return '{|\n' + indent(body.join('\n')) + '\n|}';
      } else {
        return '{\n' + indent(body.join('\n')) + '\n}';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        callProperties: this.callProperties,
        properties: this.properties,
        indexers: this.indexers,
        exact: this.exact
      };
    }
  }]);
  return ObjectType;
}(Type);

function acceptsCallProperties(type, input) {
  var callProperties = type.callProperties;

  for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];
    if (callProperty.accepts(input)) {
      return true;
    }
  }
  return false;
}

function compareTypeCallProperties(type, input) {
  var callProperties = type.callProperties;

  var inputCallProperties = input.callProperties;
  var identicalCount = 0;
  loop: for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];

    for (var j = 0; j < inputCallProperties.length; j++) {
      var inputCallProperty = inputCallProperties[j];
      var result = compareTypes(callProperty, inputCallProperty);
      if (result === 0) {
        identicalCount++;
        continue loop;
      } else if (result === 1) {
        continue loop;
      }
    }
    // If we got this far, nothing accepted.
    return -1;
  }
  if (identicalCount === callProperties.length) {
    return 0;
  } else {
    return 1;
  }
}

function acceptsWithIndexers(type, input) {
  var properties = type.properties,
      indexers = type.indexers;

  var seen = [];
  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
    seen.push(property.key);
  }
  loop: for (var key in input) {
    if (seen.indexOf(key) !== -1) {
      continue;
    }
    var value = input[key];
    for (var _i3 = 0; _i3 < indexers.length; _i3++) {
      var indexer = indexers[_i3];
      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {
        continue loop;
      }
    }

    // if we got this far the key / value did not accepts any indexers.
    return false;
  }
  return true;
}

function compareTypeWithIndexers(type, input) {
  var indexers = type.indexers,
      properties = type.properties;

  var inputIndexers = input.indexers;
  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property, inputProperty);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
  }
  loop: for (var _i4 = 0; _i4 < indexers.length; _i4++) {
    var indexer = indexers[_i4];
    for (var _j = 0; _j < inputIndexers.length; _j++) {
      var inputIndexer = inputIndexers[_j];
      var _result2 = compareTypes(indexer, inputIndexer);
      if (_result2 === 1) {
        isGreater = true;
        continue loop;
      } else if (_result2 === 0) {
        continue loop;
      }
    }
    // if we got this far, nothing accepted
    return -1;
  }
  return isGreater ? 1 : 0;
}

function acceptsWithoutIndexers(type, input) {
  var properties = type.properties;

  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
  }
  return true;
}

function acceptsExact(type, input) {
  var properties = type.properties;

  var _loop = function _loop(key) {
    // eslint-disable-line guard-for-in
    if (!properties.some(function (property) {
      return property.key === key;
    })) {
      return {
        v: false
      };
    }
  };

  for (var key in input) {
    var _ret2 = _loop(key);

    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
  }
  return true;
}

function compareTypeWithoutIndexers(type, input) {
  var properties = type.properties;

  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property.value, inputProperty.value);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
    return -1;
  }
  return isGreater ? 1 : 0;
}

function collectErrorsWithIndexers(type, validation, path, input) {
  var properties, indexers, seen, i, property, key, value, _i5, indexer;

  return _regeneratorRuntime.wrap(function collectErrorsWithIndexers$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          properties = type.properties, indexers = type.indexers;
          seen = [];
          i = 0;

        case 3:
          if (!(i < properties.length)) {
            _context2.next = 10;
            break;
          }

          property = properties[i];
          return _context2.delegateYield(property.errors(validation, path, input), 't0', 6);

        case 6:
          seen.push(property.key);

        case 7:
          i++;
          _context2.next = 3;
          break;

        case 10:
          _context2.t1 = _regeneratorRuntime.keys(input);

        case 11:
          if ((_context2.t2 = _context2.t1()).done) {
            _context2.next = 28;
            break;
          }

          key = _context2.t2.value;

          if (!(seen.indexOf(key) !== -1)) {
            _context2.next = 15;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 15:
          value = input[key];
          _i5 = 0;

        case 17:
          if (!(_i5 < indexers.length)) {
            _context2.next = 24;
            break;
          }

          indexer = indexers[_i5];

          if (!(indexer.acceptsKey(key) && indexer.acceptsValue(value))) {
            _context2.next = 21;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 21:
          _i5++;
          _context2.next = 17;
          break;

        case 24:
          _context2.next = 26;
          return [path.concat(key), getErrorMessage('ERR_NO_INDEXER'), type];

        case 26:
          _context2.next = 11;
          break;

        case 28:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked$1, this);
}

function collectErrorsWithoutIndexers(type, validation, path, input) {
  var properties, i, property;
  return _regeneratorRuntime.wrap(function collectErrorsWithoutIndexers$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          properties = type.properties;
          i = 0;

        case 2:
          if (!(i < properties.length)) {
            _context3.next = 8;
            break;
          }

          property = properties[i];
          return _context3.delegateYield(property.errors(validation, path, input), 't0', 5);

        case 5:
          i++;
          _context3.next = 2;
          break;

        case 8:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked2, this);
}

function collectErrorsExact(type, validation, path, input) {
  var _this2 = this;

  var properties, _loop2, key;

  return _regeneratorRuntime.wrap(function collectErrorsExact$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          properties = type.properties;
          _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(key) {
            return _regeneratorRuntime.wrap(function _loop2$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (properties.some(function (property) {
                      return property.key === key;
                    })) {
                      _context4.next = 3;
                      break;
                    }

                    _context4.next = 3;
                    return [path, getErrorMessage('ERR_UNKNOWN_KEY', key), type];

                  case 3:
                  case 'end':
                    return _context4.stop();
                }
              }
            }, _loop2, _this2);
          });
          _context5.t0 = _regeneratorRuntime.keys(input);

        case 3:
          if ((_context5.t1 = _context5.t0()).done) {
            _context5.next = 8;
            break;
          }

          key = _context5.t1.value;
          return _context5.delegateYield(_loop2(key), 't2', 6);

        case 6:
          _context5.next = 3;
          break;

        case 8:
        case 'end':
          return _context5.stop();
      }
    }
  }, _marked3, this);
}

function indent(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var IntersectionType = function (_Type) {
  inherits(IntersectionType, _Type);

  function IntersectionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, IntersectionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IntersectionType.__proto__ || Object.getPrototypeOf(IntersectionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'IntersectionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(IntersectionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 8;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path, input), 't0', 5);

            case 5:
              i++;
              _context.next = 3;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = length - 1; i >= 0; i--) {
        var type = types[i];
        if (typeof type.getProperty === 'function') {
          var prop = type.getProperty(key);
          if (prop) {
            return prop;
          }
        }
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (typeof type.hasProperty === 'function' && type.hasProperty(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      var identicalCount = 0;
      if (input instanceof IntersectionType) {
        var inputTypes = input.types;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }
        return identicalCount === types.length ? 0 : 1;
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          var _result = compareTypes(_type, input);
          if (_result === -1) {
            return -1;
          } else if (_result === 0) {
            identicalCount++;
          }
        }
        return identicalCount === types.length ? 0 : 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _ref2;

      var callProperties = [];
      var properties = [];
      var indexers = [];
      var types = this.types,
          context = this.context;

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        invariant(type instanceof ObjectType, 'Can only intersect object types');
        callProperties.push.apply(callProperties, toConsumableArray(type.callProperties));
        indexers.push.apply(indexers, toConsumableArray(type.indexers));
        mergeProperties(properties, type.properties);
      }
      return (_ref2 = context).object.apply(_ref2, callProperties.concat(properties, indexers));
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.types.join(' & ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return IntersectionType;
}(Type);

function getPropertyIndex(name, properties) {
  for (var i = 0; i < properties.length; i++) {
    if (properties[i].name === name) {
      return i;
    }
  }
  return -1;
}

function mergeProperties(target, source) {
  for (var i = 0; i < source.length; i++) {
    var typeProp = source[i];
    var index = getPropertyIndex(typeProp.key, target);
    if (index === -1) {
      target.push(typeProp);
    } else {
      target[index] = typeProp;
    }
  }
  return target;
}

var MixedType = function (_Type) {
  inherits(MixedType, _Type);

  function MixedType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, MixedType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = MixedType.__proto__ || Object.getPrototypeOf(MixedType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'MixedType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(MixedType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'mixed';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return MixedType;
}(Type);

var NumericLiteralType = function (_Type) {
  inherits(NumericLiteralType, _Type);

  function NumericLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumericLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumericLiteralType.__proto__ || Object.getPrototypeOf(NumericLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumericLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumericLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', value), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumericLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '' + this.value;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return NumericLiteralType;
}(Type);

var NumberType = function (_Type) {
  inherits(NumberType, _Type);

  function NumberType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumberType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumberType.__proto__ || Object.getPrototypeOf(NumberType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumberType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumberType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'number')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NUMBER'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'number';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumberType) {
        return 0;
      } else if (input instanceof NumericLiteralType) {
        return 1;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'number';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NumberType;
}(Type);

var ParameterizedTypeAlias = function (_TypeAlias) {
  inherits(ParameterizedTypeAlias, _TypeAlias);

  function ParameterizedTypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedTypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedTypeAlias.__proto__ || Object.getPrototypeOf(ParameterizedTypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedTypeAlias', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedTypeAlias, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      var partial = getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances)));
      if (!partial.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(getPartial$1(this), input);
      }
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        typeInstances[_key5 - 1] = arguments[_key5];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len6 = arguments.length, typeInstances = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        typeInstances[_key6] = arguments[_key6];
      }

      return getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var partial = getPartial$1(this);
      var typeParameters = partial.typeParameters;

      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }

      var name = this.name;

      var identifier = typeParameters.length > 0 ? name + '<' + items.join(', ') + '>' : name;

      if (withDeclaration) {
        return 'type ' + identifier + ' = ' + partial.toString() + ';';
      } else {
        return identifier;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$1(this);
      return partial.toJSON();
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial$1(this).type.properties;
    }
  }]);
  return ParameterizedTypeAlias;
}(TypeAlias);

function getPartial$1(parent) {
  var typeCreator = parent.typeCreator,
      context = parent.context,
      name = parent.name;

  var partial = new PartialType(context);
  partial.name = name;
  partial.type = typeCreator(partial);
  partial.constraints = parent.constraints;

  var typeParameters = partial.typeParameters;

  for (var _len7 = arguments.length, typeInstances = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
    typeInstances[_key7 - 1] = arguments[_key7];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ParameterizedFunctionType = function (_Type) {
  inherits(ParameterizedFunctionType, _Type);

  function ParameterizedFunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedFunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedFunctionType.__proto__ || Object.getPrototypeOf(ParameterizedFunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedFunctionType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedFunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getPartial$2(this), input);
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var _getPartial$type;

      return (_getPartial$type = getPartial$2(this).type).acceptsParams.apply(_getPartial$type, arguments);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return getPartial$2(this).type.acceptsReturn(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var _getPartial$type2;

      return (_getPartial$type2 = getPartial$2(this).type).assertParams.apply(_getPartial$type2, arguments);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return getPartial$2(this).type.assertReturn(input);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var partial = getPartial$2(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return type.toString();
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      return '<' + items.join(', ') + '> ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$2(this);
      return partial.toJSON();
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial$2(this).typeParameters;
    }
  }, {
    key: 'params',
    get: function get$$1() {
      return getPartial$2(this).type.params;
    }
  }, {
    key: 'rest',
    get: function get$$1() {
      return getPartial$2(this).type.rest;
    }
  }, {
    key: 'returnType',
    get: function get$$1() {
      return getPartial$2(this).type.returnType;
    }
  }]);
  return ParameterizedFunctionType;
}(Type);

function getPartial$2(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  partial.type = context.function.apply(context, toConsumableArray(body));

  var typeParameters = partial.typeParameters;

  for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    typeInstances[_key5 - 1] = arguments[_key5];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var RefinementType = function (_Type) {
  inherits(RefinementType, _Type);

  function RefinementType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, RefinementType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RefinementType.__proto__ || Object.getPrototypeOf(RefinementType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'RefinementType', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(RefinementType, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '$Refinment<' + type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return RefinementType;
}(Type);

var StringLiteralType = function (_Type) {
  inherits(StringLiteralType, _Type);

  function StringLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringLiteralType.__proto__ || Object.getPrototypeOf(StringLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return JSON.stringify(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return StringLiteralType;
}(Type);

var StringType = function (_Type) {
  inherits(StringType, _Type);

  function StringType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringType.__proto__ || Object.getPrototypeOf(StringType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'string')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_STRING'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'string';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType) {
        return 1;
      } else if (input instanceof StringType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'string';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return StringType;
}(Type);

var SymbolLiteralType = function (_Type) {
  inherits(SymbolLiteralType, _Type);

  function SymbolLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolLiteralType.__proto__ || Object.getPrototypeOf(SymbolLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'typeof ' + String(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return SymbolLiteralType;
}(Type);

var SymbolType = function (_Type) {
  inherits(SymbolType, _Type);

  function SymbolType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolType.__proto__ || Object.getPrototypeOf(SymbolType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'symbol')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_SYMBOL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType) {
        return 1;
      } else if (input instanceof SymbolType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Symbol';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return SymbolType;
}(Type);

/**
 * # ThisType
 * Captures a reference to a particular instance of a class or a value,
 * and uses that value to perform an identity check.
 * In the case that `this` is undefined, any value will be permitted.
 */

var ThisType = function (_Type) {
  inherits(ThisType, _Type);

  function ThisType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ThisType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ThisType.__proto__ || Object.getPrototypeOf(ThisType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ThisType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ThisType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var recorded;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              recorded = this.recorded;

              if (!(input === recorded)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              if (!(typeof recorded === 'function' && input instanceof recorded)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              if (!(recorded != null)) {
                _context.next = 12;
                break;
              }

              _context.next = 12;
              return [path, getErrorMessage('ERR_EXPECT_THIS'), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var recorded = this.recorded;

      if (input === recorded) {
        return true;
      } else if (typeof recorded === 'function' && input instanceof recorded) {
        return true;
      } else if (recorded != null) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ThisType)) {
        return -1;
      } else if (input.recorded && this.recorded) {
        return input.recorded === this.recorded ? 0 : -1;
      } else if (this.recorded) {
        return 0;
      } else {
        return 1;
      }
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return 'this';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ThisType;
}(Type);

var warnedInstances$1 = new WeakSet();

var TypeBox = function (_Type) {
  inherits(TypeBox, _Type);

  function TypeBox() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeBox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeBox.__proto__ || Object.getPrototypeOf(TypeBox)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeBox', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeBox, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this.type;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.type.toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      return this.type.name;
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var reveal = this.reveal;

      var type = reveal();
      if (!type) {
        if (!warnedInstances$1.has(this)) {
          this.context.emitWarningMessage('Failed to reveal boxed type.');
          warnedInstances$1.add(this);
        }
        return this.context.mixed();
      } else if (!(type instanceof Type)) {
        // we got a boxed reference to something like a class
        return this.context.ref(type);
      }
      return type;
    }
  }]);
  return TypeBox;
}(Type);

var warnedMissing = {};

var TypeReference = function (_Type) {
  inherits(TypeReference, _Type);

  function TypeReference() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeReference);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeReference.__proto__ || Object.getPrototypeOf(TypeReference)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeReference', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeReference, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var context = this.context,
          name = this.name;

      var type = context.get(name);
      if (!type) {
        if (!warnedMissing[name]) {
          context.emitWarningMessage('Cannot resolve type: ' + name);
          warnedMissing[name] = true;
        }
        return context.any();
      }
      return type;
    }
  }]);
  return TypeReference;
}(Type);

var warnedInstances$2 = new WeakSet();

var RevealedName = Symbol('RevealedName');
var RevealedValue = Symbol('RevealedValue');

var TypeTDZ = function (_Type) {
  inherits(TypeTDZ, _Type);

  function TypeTDZ() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeTDZ);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeTDZ.__proto__ || Object.getPrototypeOf(TypeTDZ)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeTDZ', _this[RevealedName] = undefined, _this[RevealedValue] = undefined, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  // Issue 252


  createClass(TypeTDZ, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getRevealed(this).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return getRevealed(this).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getRevealed(this), input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = getRevealed(this);

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return getRevealed(this).unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return getRevealed(this).toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getRevealed(this).toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      var name = this[RevealedName];
      if (!name) {
        name = getRevealed(this).name;
      }
      return name;
    },
    set: function set$$1(value) {
      this[RevealedName] = value;
    }
  }]);
  return TypeTDZ;
}(Type);

function getRevealed(container) {
  var existing = container[RevealedValue];
  if (existing) {
    return existing;
  } else {
    var reveal = container.reveal;

    var type = reveal();
    if (!type) {
      if (!warnedInstances$2.has(container)) {
        var name = container[RevealedName];
        if (name) {
          container.context.emitWarningMessage('Failed to reveal type called "' + name + '" in Temporal Dead Zone.');
        } else {
          container.context.emitWarningMessage('Failed to reveal unknown type in Temporal Dead Zone.');
        }
        warnedInstances$2.add(container);
      }
      return container.context.mixed();
    } else if (!(type instanceof Type)) {
      // we got a boxed reference to something like a class
      return container.context.ref(type);
    }
    return type;
  }
}

var UnionType = function (_Type) {
  inherits(UnionType, _Type);

  function UnionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, UnionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = UnionType.__proto__ || Object.getPrototypeOf(UnionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'UnionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(UnionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 10;
                break;
              }

              type = types[i];

              if (!type.accepts(input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              i++;
              _context.next = 3;
              break;

            case 10:
              _context.next = 12;
              return [path, getErrorMessage('ERR_NO_UNION', this.toString()), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      if (input instanceof UnionType) {
        var inputTypes = input.types;
        var identicalCount = 0;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }

        if (identicalCount === types.length) {
          return 0;
        } else {
          return 1;
        }
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          if (compareTypes(_type, input) >= 0) {
            return 1;
          }
        }
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var types = this.types;

      var normalized = new Array(types.length);
      for (var i = 0; i < types.length; i++) {
        var type = types[i];
        if (type.typeName === 'FunctionType' || type.typeName === 'ParameterizedFunctionType') {
          normalized[i] = '(' + type.toString() + ')';
        } else {
          normalized[i] = type.toString();
        }
      }
      return normalized.join(' | ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return UnionType;
}(Type);

function registerPrimitiveTypes(t) {
  primitiveTypes.null = Object.freeze(new NullLiteralType(t));
  primitiveTypes.empty = Object.freeze(new EmptyType(t));
  primitiveTypes.number = Object.freeze(new NumberType(t));
  primitiveTypes.boolean = Object.freeze(new BooleanType(t));
  primitiveTypes.string = Object.freeze(new StringType(t));
  primitiveTypes.symbol = Object.freeze(new SymbolType(t));
  primitiveTypes.any = Object.freeze(new AnyType(t));
  primitiveTypes.mixed = Object.freeze(new MixedType(t));
  primitiveTypes.void = Object.freeze(new VoidType(t));
  primitiveTypes.existential = Object.freeze(new ExistentialType(t));
  return t;
}

function registerBuiltinTypeConstructors(t) {

  t.declareTypeConstructor({
    name: 'Date',
    impl: Date,
    typeName: 'DateType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (input instanceof Date) {
                _context.next = 5;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Date'), this];

            case 3:
              _context.next = 8;
              break;

            case 5:
              if (!isNaN(input.getTime())) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [path, getErrorMessage('ERR_INVALID_DATE'), this];

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      return input instanceof Date && !isNaN(input.getTime());
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'DateType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Promise',
    impl: Promise,
    typeName: 'PromiseType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, futureType) {
      var context;
      return _regeneratorRuntime.wrap(function errors$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              invariant(futureType, 'Must specify type parameter for Promise.');
              context = this.context;

              if (context.checkPredicate('Promise', input)) {
                _context2.next = 5;
                break;
              }

              _context2.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_PROMISE', futureType), this];

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      var context = this.context;

      return context.checkPredicate('Promise', input);
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'PromiseType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Map',
    impl: Map,
    typeName: 'MapType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, keyType, valueType) {
      var context, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref, _ref2, key, value;

      return _regeneratorRuntime.wrap(function errors$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              invariant(keyType, 'Must specify two type parameters for Map.');
              invariant(valueType, 'Must specify two type parameters for Map.');
              context = this.context;

              if (context.checkPredicate('Map', input)) {
                _context3.next = 7;
                break;
              }

              _context3.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Map'), this];

            case 6:
              return _context3.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context3.prev = 10;
              _iterator = input[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context3.next = 24;
                break;
              }

              _ref = _step.value;
              _ref2 = slicedToArray(_ref, 2);
              key = _ref2[0];
              value = _ref2[1];

              if (keyType.accepts(key)) {
                _context3.next = 20;
                break;
              }

              _context3.next = 20;
              return [path, getErrorMessage('ERR_EXPECT_KEY_TYPE', keyType), this];

            case 20:
              return _context3.delegateYield(valueType.errors(validation, path.concat(key), value), 't0', 21);

            case 21:
              _iteratorNormalCompletion = true;
              _context3.next = 12;
              break;

            case 24:
              _context3.next = 30;
              break;

            case 26:
              _context3.prev = 26;
              _context3.t1 = _context3['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context3.t1;

            case 30:
              _context3.prev = 30;
              _context3.prev = 31;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 33:
              _context3.prev = 33;

              if (!_didIteratorError) {
                _context3.next = 36;
                break;
              }

              throw _iteratorError;

            case 36:
              return _context3.finish(33);

            case 37:
              return _context3.finish(30);

            case 38:
            case 'end':
              return _context3.stop();
          }
        }
      }, errors, this, [[10, 26, 30, 38], [31,, 33, 37]]);
    }),
    accepts: function accepts(input, keyType, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Map', input)) {
        return false;
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref3 = _step2.value;

          var _ref4 = slicedToArray(_ref3, 2);

          var key = _ref4[0];
          var value = _ref4[1];

          if (!keyType.accepts(key) || !valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'MapType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var keyTypes = [];
      var valueTypes = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        loop: for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _ref5 = _step3.value;

          var _ref6 = slicedToArray(_ref5, 2);

          var key = _ref6[0];
          var value = _ref6[1];

          findKey: {
            for (var i = 0; i < keyTypes.length; i++) {
              var type = keyTypes[i];
              if (type.accepts(key)) {
                break findKey;
              }
            }
            keyTypes.push(t.typeOf(key));
          }

          for (var _i = 0; _i < valueTypes.length; _i++) {
            var _type = valueTypes[_i];
            if (_type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var typeInstances = [];

      if (keyTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (keyTypes.length === 1) {
        typeInstances.push(keyTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, keyTypes));
      }

      if (valueTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (valueTypes.length === 1) {
        typeInstances.push(valueTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, valueTypes));
      }

      return typeInstances;
    }
  });

  t.declareTypeConstructor({
    name: 'Set',
    impl: Set,
    typeName: 'SetType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, valueType) {
      var context, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, value;

      return _regeneratorRuntime.wrap(function errors$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              invariant(valueType, 'Must specify type parameter for Set.');
              context = this.context;

              if (context.checkPredicate('Set', input)) {
                _context4.next = 6;
                break;
              }

              _context4.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Set'), this];

            case 5:
              return _context4.abrupt('return');

            case 6:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context4.prev = 9;
              _iterator4 = input[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context4.next = 17;
                break;
              }

              value = _step4.value;
              return _context4.delegateYield(valueType.errors(validation, path, value), 't0', 14);

            case 14:
              _iteratorNormalCompletion4 = true;
              _context4.next = 11;
              break;

            case 17:
              _context4.next = 23;
              break;

            case 19:
              _context4.prev = 19;
              _context4.t1 = _context4['catch'](9);
              _didIteratorError4 = true;
              _iteratorError4 = _context4.t1;

            case 23:
              _context4.prev = 23;
              _context4.prev = 24;

              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }

            case 26:
              _context4.prev = 26;

              if (!_didIteratorError4) {
                _context4.next = 29;
                break;
              }

              throw _iteratorError4;

            case 29:
              return _context4.finish(26);

            case 30:
              return _context4.finish(23);

            case 31:
            case 'end':
              return _context4.stop();
          }
        }
      }, errors, this, [[9, 19, 23, 31], [24,, 26, 30]]);
    }),
    accepts: function accepts(input, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Set', input)) {
        return false;
      }
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = input[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var value = _step5.value;

          if (!valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'SetType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var valueTypes = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        loop: for (var _iterator6 = input[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var value = _step6.value;

          for (var i = 0; i < valueTypes.length; i++) {
            var type = valueTypes[i];
            if (type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      if (valueTypes.length === 0) {
        return [t.existential()];
      } else if (valueTypes.length === 1) {
        return [valueTypes[0]];
      } else {
        return [t.union.apply(t, valueTypes)];
      }
    }
  });

  return t;
}

function registerTypePredicates(context) {
  context.setPredicate('Array', function (input) {
    return Array.isArray(input);
  });
  context.setPredicate('Map', function (input) {
    return input instanceof Map;
  });
  context.setPredicate('Set', function (input) {
    return input instanceof Set;
  });
  context.setPredicate('Promise', function (input) {
    if (input instanceof Promise) {
      return true;
    } else {
      return input !== null && ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') && typeof input.then === 'function';
    }
  });
}

var TypeInferer = function () {
  function TypeInferer(context) {
    classCallCheck(this, TypeInferer);

    this.context = context;
  }

  createClass(TypeInferer, [{
    key: 'infer',
    value: function infer(input) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      var inferred = new Map();
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferInternal',
    value: function inferInternal(input, inferred) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferPrimitive',
    value: function inferPrimitive(input) {
      var context = this.context;

      if (input === null) {
        return context.null();
      } else if (input === undefined) {
        return context.void();
      } else if (typeof input === 'number') {
        return context.number();
      } else if (typeof input === 'boolean') {
        return context.boolean();
      } else if (typeof input === 'string') {
        return context.string();
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return context.symbol(input);
        } else {
          return undefined;
        }
    }
  }, {
    key: 'inferComplex',
    value: function inferComplex(input, inferred) {
      var context = this.context;


      if (typeof input === 'function') {
        return this.inferFunction(input, inferred);
      } else if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
        return this.inferObject(input, inferred);
      } else {
        return context.any();
      }
    }
  }, {
    key: 'inferFunction',
    value: function inferFunction(input, inferred) {
      var context = this.context;
      var length = input.length;

      var body = new Array(length + 1);
      for (var i = 0; i < length; i++) {
        body[i] = context.param(String.fromCharCode(97 + i), context.existential());
      }
      body[length] = context.return(context.existential());
      return context.fn.apply(context, body);
    }
  }, {
    key: 'inferObject',
    value: function inferObject(input, inferred) {
      var existing = inferred.get(input);
      if (existing) {
        return existing;
      }
      var context = this.context;

      var type = void 0;

      // Temporarily create a box for this type to catch cyclical references.
      // Nested references to this object will receive the boxed type.
      var box = context.box(function () {
        return type;
      });
      inferred.set(input, box);

      if (context.checkPredicate('Array', input)) {
        type = this.inferArray(input, inferred);
      } else if (!(input instanceof Object)) {
        type = this.inferDict(input, inferred);
      } else if (input.constructor !== Object) {
        var handler = context.getTypeConstructor(input.constructor);
        if (handler) {
          var typeParameters = handler.inferTypeParameters(input);
          type = handler.apply.apply(handler, toConsumableArray(typeParameters));
        } else {
          type = context.ref(input.constructor);
        }
      } else {
        var body = [];
        for (var key in input) {
          // eslint-disable-line
          var value = input[key];
          body.push(context.property(key, this.inferInternal(value, inferred)));
        }
        type = context.object.apply(context, body);
      }

      // Overwrite the box with the real value.
      inferred.set(input, type);
      return type;
    }
  }, {
    key: 'inferDict',
    value: function inferDict(input, inferred) {
      var numericIndexers = [];
      var stringIndexers = [];
      loop: for (var key in input) {
        // eslint-disable-line
        var value = input[key];
        var types = isNaN(+key) ? stringIndexers : numericIndexers;
        for (var i = 0; i < types.length; i++) {
          var type = types[i];
          if (type.accepts(value)) {
            continue loop;
          }
        }
        types.push(this.inferInternal(value, inferred));
      }

      var context = this.context;

      var body = [];
      if (numericIndexers.length === 1) {
        body.push(context.indexer('index', context.number(), numericIndexers[0]));
      } else if (numericIndexers.length > 1) {
        body.push(context.indexer('index', context.number(), context.union.apply(context, numericIndexers)));
      }

      if (stringIndexers.length === 1) {
        body.push(context.indexer('key', context.string(), stringIndexers[0]));
      } else if (stringIndexers.length > 1) {
        body.push(context.indexer('key', context.string(), context.union.apply(context, stringIndexers)));
      }

      return context.object.apply(context, body);
    }
  }, {
    key: 'inferArray',
    value: function inferArray(input, inferred) {
      var context = this.context;

      var types = [];
      var values = [];
      var length = input.length;

      loop: for (var i = 0; i < length; i++) {
        var item = input[i];
        var inferredType = this.inferInternal(item, inferred);
        for (var j = 0; j < types.length; j++) {
          var type = types[j];
          if (type.accepts(item) && inferredType.accepts(values[j])) {
            continue loop;
          }
        }
        types.push(inferredType);
        values.push(item);
      }
      if (types.length === 0) {
        return context.array(context.any());
      } else if (types.length === 1) {
        return context.array(types[0]);
      } else {
        return context.array(context.union.apply(context, types));
      }
    }
  }]);
  return TypeInferer;
}();

function makeReactPropTypes(objectType) {
  var output = {};
  if (!objectType.properties) {
    return output;
  }

  var _loop = function _loop(property) {
    output[property.key] = function (props, propName, componentName) {
      return makeError(property, props);
    };
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = objectType.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;

      _loop(property);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
}

var delimiter$1 = '\n-------------------------------------------------\n\n';

function makeWarningMessage(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = context.typeOf(_resolvePath(input, path)).toString();

      var field = stringifyPath(validation.path.concat(path));

      collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actual + '\n');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return 'Warning: ' + collected.join(delimiter$1);
}

function makeUnion(context, types) {
  var length = types.length;
  var merged = [];
  for (var i = 0; i < length; i++) {
    var type = types[i];
    if (type instanceof AnyType || type instanceof MixedType || type instanceof ExistentialType) {
      return type;
    }
    if (type instanceof UnionType) {
      mergeUnionTypes(merged, type.types);
    } else {
      merged.push(type);
    }
  }
  var union = new UnionType(context);
  union.types = merged;
  return union;
}

function mergeUnionTypes(aTypes, bTypes) {
  loop: for (var i = 0; i < bTypes.length; i++) {
    var bType = bTypes[i];
    for (var j = 0; j < aTypes.length; j++) {
      var aType = aTypes[j];
      if (compareTypes(aType, bType) !== -1) {
        continue loop;
      }
    }
    aTypes.push(bType);
  }
}

function makePropertyDescriptor(typeSource, input, propertyName, descriptor, shouldAssert) {
  if (typeof descriptor.get === 'function' && typeof descriptor.set === 'function') {
    return augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert);
  } else {
    return propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert);
  }
}

function makePropertyName(name) {
  return '_flowRuntime$' + name;
}

function getClassName(input) {
  if (typeof input === 'function') {
    return input.name || '[Class anonymous]';
  } else if (typeof input.constructor === 'function') {
    return getClassName(input.constructor);
  } else {
    return '[Class anonymous]';
  }
}

function resolveType(receiver, typeSource) {
  if (typeof typeSource === 'function') {
    return typeSource.call(receiver);
  } else {
    return typeSource;
  }
}

function propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert) {
  var safeName = makePropertyName(propertyName);
  var className = getClassName(input);
  var initializer = descriptor.initializer,
      writable = descriptor.writable,
      config = objectWithoutProperties(descriptor, ['initializer', 'writable']); // eslint-disable-line no-unused-vars

  var propertyPath = [className, propertyName];

  return _extends({}, config, {
    type: 'accessor',
    get: function get$$1() {
      if (safeName in this) {
        return this[safeName];
      } else if (initializer) {
        var type = resolveType(this, typeSource);
        var _value = initializer.call(this);
        var context = type.context;
        context.check(type, _value, 'Default value for property', propertyPath);
        Object.defineProperty(this, safeName, {
          writable: true,
          value: _value
        });
        return _value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: undefined
        });
      }
    },
    set: function set$$1(value) {
      var type = resolveType(this, typeSource);
      var context = type.context;
      if (shouldAssert) {
        context.assert(type, value, 'Property', propertyPath);
      } else {
        context.warn(type, value, 'Property', propertyPath);
      }
      if (safeName in this) {
        this[safeName] = value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: value
        });
      }
    }
  });
}

function augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert) {

  var className = getClassName(input);
  var propertyPath = [className, propertyName];

  var originalSetter = descriptor.set;

  descriptor.set = function set$$1(value) {
    var type = resolveType(this, typeSource);
    var context = type.context;
    if (shouldAssert) {
      context.assert(type, value, 'Property', propertyPath);
    } else {
      context.warn(type, value, 'Property', propertyPath);
    }
    originalSetter.call(this, value);
  };
}

// eslint-disable-line no-redeclare

function annotateValue(input, type) {
  // eslint-disable-line no-redeclare
  if (type instanceof Type) {
    input[TypeSymbol] = type;
    return input;
  } else {
    var _type = input;
    return function (input) {
      input[TypeSymbol] = _type;
      return input;
    };
  }
}

// If A and B are object types, $Diff<A,B> is the type of objects that have
// properties defined in A, but not in B.
// Properties that are defined in both A and B are allowed too.

var $DiffType = function (_Type) {
  inherits($DiffType, _Type);

  function $DiffType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $DiffType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $DiffType.__proto__ || Object.getPrototypeOf($DiffType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$DiffType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($DiffType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var aType, bType, properties, i, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              aType = this.aType, bType = this.bType;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              aType = aType.unwrap();
              bType = bType.unwrap();
              invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
              properties = aType.properties;
              i = 0;

            case 10:
              if (!(i < properties.length)) {
                _context.next = 18;
                break;
              }

              property = properties[i];

              if (!bType.hasProperty(property.key)) {
                _context.next = 14;
                break;
              }

              return _context.abrupt('continue', 15);

            case 14:
              return _context.delegateYield(property.errors(validation, path.concat(property.key), input), 't0', 15);

            case 15:
              i++;
              _context.next = 10;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var aType = this.aType,
          bType = this.bType;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        if (!property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var aType = this.aType,
          bType = this.bType;

      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      var args = [];
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        args.push(property);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Diff<' + this.aType.toString() + ', ' + this.bType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        aType: this.aType,
        bType: this.bType
      };
    }
  }]);
  return $DiffType;
}(Type);

// Any subtype of T

var $FlowFixMeType = function (_Type) {
  inherits($FlowFixMeType, _Type);

  function $FlowFixMeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $FlowFixMeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $FlowFixMeType.__proto__ || Object.getPrototypeOf($FlowFixMeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$FlowFixMeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($FlowFixMeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$FlowFixMe';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return $FlowFixMeType;
}(Type);

// The set of keys of T.

var $KeysType = function (_Type) {
  inherits($KeysType, _Type);

  function $KeysType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $KeysType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $KeysType.__proto__ || Object.getPrototypeOf($KeysType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$KeysType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($KeysType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, keys, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!(input === property.key)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              keys = new Array(length);

              for (_i = 0; _i < length; _i++) {
                keys[_i] = properties[_i].key;
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', keys.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (input === property.key) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var keys = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        keys[i] = context.literal(property.key);
      }
      return (_context2 = this.context).union.apply(_context2, keys);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Keys<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $KeysType;
}(Type);

// Map over the keys and values in an object.

var $ObjMapiType = function (_Type) {
  inherits($ObjMapiType, _Type);

  function $ObjMapiType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapiType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapiType.__proto__ || Object.getPrototypeOf($ObjMapiType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapiType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapiType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key), prop.value);
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key), prop.value);

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key), prop.value)));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMapi<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapiType;
}(Type);

// Map over the keys in an object.

var $ObjMapType = function (_Type) {
  inherits($ObjMapType, _Type);

  function $ObjMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapType.__proto__ || Object.getPrototypeOf($ObjMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key));
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key));

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key))));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMap<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapType;
}(Type);

// The type of the named object property

var $PropertyType = function (_Type) {
  inherits($PropertyType, _Type);

  function $PropertyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $PropertyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $PropertyType.__proto__ || Object.getPrototypeOf($PropertyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$PropertyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($PropertyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.unwrap().errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.unwrap().accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          property = this.property;

      var unwrapped = object.unwrap();
      invariant(typeof unwrapped.getProperty === 'function', 'Can only use $PropertyType on Objects.');
      return unwrapped.getProperty(property).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$PropertyType<' + this.object.toString() + ', ' + String(this.property) + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        property: this.property
      };
    }
  }]);
  return $PropertyType;
}(Type);

// An object of type $Shape<T> does not have to have all of the properties
// that type T defines. But the types of the properties that it does have
// must accepts the types of the same properties in T.

var $ShapeType = function (_Type) {
  inherits($ShapeType, _Type);

  function $ShapeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ShapeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ShapeType.__proto__ || Object.getPrototypeOf($ShapeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ShapeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ShapeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, key, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:

              type = type.unwrap();
              invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');

              _context.t0 = _regeneratorRuntime.keys(input);

            case 8:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 16;
                break;
              }

              key = _context.t1.value;
              // eslint-disable-line guard-for-in
              property = type.getProperty(key);

              if (property) {
                _context.next = 13;
                break;
              }

              return _context.abrupt('continue', 8);

            case 13:
              return _context.delegateYield(property.errors(validation, path, input), 't2', 14);

            case 14:
              _context.next = 8;
              break;

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      type = type.unwrap();
      invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');
      for (var key in input) {
        // eslint-disable-line guard-for-in
        var property = type.getProperty(key);
        if (!property || !property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var type = this.type;

      type = type.unwrap();
      var context = this.context;
      invariant(type instanceof ObjectType, 'Can only $Shape<T> object types.');
      var properties = type.properties;
      var args = new Array(properties.length);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        args[i] = context.property(property.key, property.value, true);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Shape<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ShapeType;
}(Type);

// Any subtype of T

var $SubType = function (_Type) {
  inherits($SubType, _Type);

  function $SubType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SubType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SubType.__proto__ || Object.getPrototypeOf($SubType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SubType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SubType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(input, path), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Subtype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SubType;
}(Type);

// Any, but at least T.

var $SuperType = function (_Type) {
  inherits($SuperType, _Type);

  function $SuperType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SuperType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SuperType.__proto__ || Object.getPrototypeOf($SuperType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SuperType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SuperType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Supertype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SuperType;
}(Type);

// Map over the values in a tuple.

var $TupleMapType = function (_Type) {
  inherits($TupleMapType, _Type);

  function $TupleMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $TupleMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $TupleMapType.__proto__ || Object.getPrototypeOf($TupleMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$TupleMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($TupleMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var tuple, mapper, context, target, i, type, applied, expected, value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tuple = this.tuple, mapper = this.mapper, context = this.context;
              target = tuple.unwrap();

              invariant(target instanceof TupleType, 'Target must be a tuple type.');

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < target.types.length)) {
                _context.next = 18;
                break;
              }

              type = target.types[i];
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              expected = applied.invoke(type);
              value = input[i];
              return _context.delegateYield(expected.errors(validation, path.concat(i), value), 't0', 15);

            case 15:
              i++;
              _context.next = 8;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be a tuple type.');

      if (!context.checkPredicate('Array', input)) {
        return false;
      }

      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        if (!applied.invoke(type).accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be an tuple type.');

      var args = [];
      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        args.push(applied.invoke(type).unwrap().unwrap());
      }

      return context.tuple.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$TupleMap<' + this.tuple.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        tuple: this.tuple,
        mapper: this.mapper
      };
    }
  }]);
  return $TupleMapType;
}(Type);

// The set of keys of T.

var $ValuesType = function (_Type) {
  inherits($ValuesType, _Type);

  function $ValuesType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ValuesType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ValuesType.__proto__ || Object.getPrototypeOf($ValuesType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ValuesType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ValuesType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, values, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!property.value.accepts(input)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              values = new Array(length);

              for (_i = 0; _i < length; _i++) {
                values[_i] = properties[_i].value.toString();
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', values.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.value.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var values = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        values[i] = property.value;
      }
      return context.union.apply(context, values);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Values<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ValuesType;
}(Type);

function checkGenericType(context, expected, input) {
  var impl = expected.impl;

  if (typeof impl !== 'function') {
    // There is little else we can do here, so accept anything.
    return true;
  } else if (impl === input || impl.isPrototypeOf(input)) {
    return true;
  }

  var annotation = context.getAnnotation(impl);
  if (annotation == null) {
    return false;
  } else {
    return checkType(context, annotation, input);
  }
}

function checkType(context, expected, input) {
  var annotation = context.getAnnotation(input);
  if (annotation != null) {
    var result = compareTypes(expected, annotation);
    return result !== -1;
  }
  return true;
}

var ClassType = function (_Type) {
  inherits(ClassType, _Type);

  function ClassType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassType.__proto__ || Object.getPrototypeOf(ClassType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var instanceType, context, expectedType, isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              instanceType = this.instanceType, context = this.context;

              if (!(typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
              isValid = expectedType instanceof GenericType ? checkGenericType(context, expectedType, input) : checkType(context, expectedType, input);

              if (isValid) {
                _context.next = 10;
                break;
              }

              _context.next = 10;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 10:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var instanceType = this.instanceType,
          context = this.context;

      if (typeof input !== 'function') {
        return false;
      }
      var expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
      if (expectedType instanceof GenericType) {
        return checkGenericType(context, expectedType, input);
      } else {
        return checkType(context, expectedType, input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var instanceType = this.instanceType;

      if (input instanceof ClassType) {
        return compareTypes(instanceType, input.instanceType);
      }
      return -1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Class<' + this.instanceType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        instanceType: this.instanceType
      };
    }
  }]);
  return ClassType;
}(Type);

/**
 * Keeps track of invalid references in order to prevent
 * multiple warnings.
 */
var warnedInvalidReferences = new WeakSet();

var TypeContext = function () {
  function TypeContext() {
    classCallCheck(this, TypeContext);
    this.mode = 'assert';
    this[NameRegistrySymbol] = {};
    this[TypePredicateRegistrySymbol] = {};
    this[TypeConstructorRegistrySymbol] = new Map();
    this[InferrerSymbol] = new TypeInferer(this);
    this[ModuleRegistrySymbol] = {};
  }

  /**
   * Calls to `t.check(...)` will call either
   * `t.assert(...)` or `t.warn(...)` depending on this setting.
   */


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  createClass(TypeContext, [{
    key: 'makeJSONError',
    value: function makeJSONError$$1(validation) {
      return makeJSONError(validation);
    }
  }, {
    key: 'makeTypeError',
    value: function makeTypeError$$1(validation) {
      return makeTypeError(validation);
    }
  }, {
    key: 'createContext',
    value: function createContext() {
      var context = new TypeContext();
      // Issue 252
      context[ParentSymbol] = this;
      return context;
    }
  }, {
    key: 'typeOf',
    value: function typeOf(input) {

      var annotation = this.getAnnotation(input);
      if (annotation) {
        if (typeof input === 'function' && (annotation instanceof ClassDeclaration || annotation instanceof ParameterizedClassDeclaration)) {
          return this.Class(annotation);
        }
        return annotation;
      }
      // Issue 252
      var inferrer = this[InferrerSymbol];

      return inferrer.infer(input);
    }
  }, {
    key: 'compareTypes',
    value: function compareTypes$$1(a, b) {
      return compareTypes(a, b);
    }
  }, {
    key: 'get',
    value: function get$$1(name) {
      // Issue 252
      var item = this[NameRegistrySymbol][name];

      for (var _len = arguments.length, propertyNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        propertyNames[_key - 1] = arguments[_key];
      }

      if (item != null) {
        var current = typeof item === 'function' ? new item(this) : item;
        for (var i = 0; i < propertyNames.length; i++) {
          var propertyName = propertyNames[i];
          if (typeof current.getProperty !== 'function') {
            return;
          }
          current = current.getProperty(propertyName);
          if (!current) {
            return;
          }
          current = current.unwrap();
        }
        return current;
      }
      // Issue 252
      var parent = this[ParentSymbol];
      if (parent) {
        var fromParent = parent.get.apply(parent, [name].concat(toConsumableArray(propertyNames)));
        if (fromParent) {
          return fromParent;
        }
      }

      // if we got this far, see if we have a global type with this name.
      if (typeof commonjsGlobal[name] === 'function') {
        var target = new GenericType(this);
        target.name = name;
        target.impl = commonjsGlobal[name];
        // Issue 252
        this[NameRegistrySymbol][name] = target;
        return target;
      }
    }

    /**
     * Get the predicate for a given type name.
     * e.g. `t.getPredicate('Array')`.
     */

  }, {
    key: 'getPredicate',
    value: function getPredicate(name) {
      var item = this[TypePredicateRegistrySymbol][name];
      if (item) {
        return item;
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.getPredicate(name);
      }
    }

    /**
     * Set the predicate for a given type name.
     * This can be used to customise the behaviour of things like Array
     * detection or allowing Thenables in place of the global Promise.
     */

  }, {
    key: 'setPredicate',
    value: function setPredicate(name, predicate) {
      this[TypePredicateRegistrySymbol][name] = predicate;
    }

    /**
     * Check the given value against the named predicate.
     * Returns false if no such predicate exists.
     * e.g. `t.checkPredicate('Array', [1, 2, 3])`
     */

  }, {
    key: 'checkPredicate',
    value: function checkPredicate(name, input) {
      var predicate = this.getPredicate(name);
      if (predicate) {
        return predicate(input);
      } else {
        return false;
      }
    }

    /**
     * Returns a decorator for a function or object with the given type.
     */

  }, {
    key: 'decorate',
    value: function decorate(type, shouldAssert) {
      var _this2 = this;

      if (shouldAssert == null) {
        shouldAssert = this.mode === 'assert';
      }
      return function (input, propertyName, descriptor) {
        if (descriptor && typeof propertyName === 'string') {
          return makePropertyDescriptor(type, input, propertyName, descriptor, Boolean(shouldAssert));
        } else {
          invariant(typeof type !== 'function', 'Cannot decorate an object or function as a method.');
          return _this2.annotate(input, type);
        }
      };
    }

    /**
     * Annotates an object or function with the given type.
     * If a type is specified as the sole argument, returns a
     * function which can decorate classes or functions with the given type.
     */

  }, {
    key: 'annotate',
    value: function annotate(input, type) {
      if (type === undefined) {
        return annotateValue(input);
      } else {
        return annotateValue(input, type);
      }
    }
  }, {
    key: 'getAnnotation',
    value: function getAnnotation(input) {
      if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') {
        // Issue 252
        return input[TypeSymbol];
      }
    }
  }, {
    key: 'hasAnnotation',
    value: function hasAnnotation(input) {
      if (input == null) {
        return false;
      } else {
        return input[TypeSymbol] ? true : false;
      }
    }
  }, {
    key: 'setAnnotation',
    value: function setAnnotation(input, type) {
      input[TypeSymbol] = type;
      return input;
    }
  }, {
    key: 'type',
    value: function type(name, _type) {
      if (typeof _type === 'function') {
        var target = new ParameterizedTypeAlias(this);
        target.name = name;
        target.typeCreator = _type;
        return target;
      } else {
        var _target = new TypeAlias(this);
        _target.name = name;
        _target.type = _type;
        return _target;
      }
    }
  }, {
    key: 'declare',
    value: function declare(name, type) {

      if (name instanceof Declaration) {
        type = name;
        name = type.name;
      } else if (name instanceof TypeAlias) {
        type = name;
        name = type.name;
      }
      if (typeof type === 'function') {
        type = this.type(name, type);
      }
      if (type instanceof ModuleDeclaration) {
        var moduleRegistry = this[ModuleRegistrySymbol];
        moduleRegistry[name] = type;
        return type;
      } else {
        invariant(typeof name === 'string', 'Name must be a string');
        invariant(type instanceof Type, 'Type must be supplied to declaration');
        var nameRegistry = this[NameRegistrySymbol];

        if (type instanceof Declaration) {
          nameRegistry[name] = type;
          return type;
        } else if (type instanceof TypeAlias || type instanceof ParameterizedTypeAlias) {
          var target = new TypeDeclaration(this);
          target.name = name;
          target.typeAlias = type;
          nameRegistry[name] = target;
          return target;
        } else {
          var _target2 = this.var(name, type);
          nameRegistry[name] = _target2;
          return _target2;
        }
      }
    }
  }, {
    key: 'declarations',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function declarations() {
      var nameRegistry, key;
      return _regeneratorRuntime.wrap(function declarations$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nameRegistry = this[NameRegistrySymbol];
              _context.t0 = _regeneratorRuntime.keys(nameRegistry);

            case 2:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 8;
                break;
              }

              key = _context.t1.value;
              _context.next = 6;
              return [key, nameRegistry[key]];

            case 6:
              _context.next = 2;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, declarations, this);
    })
  }, {
    key: 'modules',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function modules() {
      var moduleRegistry, key;
      return _regeneratorRuntime.wrap(function modules$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              moduleRegistry = this[ModuleRegistrySymbol];
              _context2.t0 = _regeneratorRuntime.keys(moduleRegistry);

            case 2:
              if ((_context2.t1 = _context2.t0()).done) {
                _context2.next = 8;
                break;
              }

              key = _context2.t1.value;
              _context2.next = 6;
              return moduleRegistry[key];

            case 6:
              _context2.next = 2;
              break;

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, modules, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      var moduleRegistry = this[ModuleRegistrySymbol];
      if (moduleRegistry[moduleName]) {
        return moduleRegistry[moduleName];
      }

      var _moduleName$split = moduleName.split('/'),
          _moduleName$split2 = slicedToArray(_moduleName$split, 1),
          head = _moduleName$split2[0];

      var module = moduleRegistry[head];
      if (module) {
        return module.import(moduleName);
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.import(moduleName);
      }
    }
  }, {
    key: 'declareTypeConstructor',
    value: function declareTypeConstructor(_ref) {
      var name = _ref.name,
          impl = _ref.impl,
          typeName = _ref.typeName,
          errors = _ref.errors,
          accepts = _ref.accepts,
          inferTypeParameters = _ref.inferTypeParameters,
          compareWith = _ref.compareWith;

      var nameRegistry = this[NameRegistrySymbol];

      if (nameRegistry[name]) {
        this.emitWarningMessage('Redeclaring type: ' + name + ', this may be unintended.');
      }

      var target = new TypeConstructor(this);
      target.name = name;
      target.typeName = typeName;
      target.impl = impl;
      target.errors = errors;
      target.accepts = accepts;
      target.inferTypeParameters = inferTypeParameters;
      if (typeof compareWith === 'function') {
        target.compareWith = compareWith;
      }

      nameRegistry[name] = target;

      if (typeof impl === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        if (handlerRegistry.has(impl)) {
          this.emitWarningMessage('A type handler already exists for the given implementation of ' + name + '.');
        }
        handlerRegistry.set(impl, target);
      }
      return target;
    }
  }, {
    key: 'getTypeConstructor',
    value: function getTypeConstructor(impl) {
      // Issue 252
      var handlerRegistry = this[TypeConstructorRegistrySymbol];

      return handlerRegistry.get(impl);
    }
  }, {
    key: 'literal',
    value: function literal(input) {
      if (input === undefined) {
        return this.void();
      } else if (input === null) {
        return this.null();
      } else if (typeof input === 'boolean') {
        return this.boolean(input);
      } else if (typeof input === 'number') {
        return this.number(input);
      } else if (typeof input === 'string') {
        return this.string(input);
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return this.symbol(input);
        } else {
          return this.typeOf(input);
        }
    }
  }, {
    key: 'null',
    value: function _null() {
      return primitiveTypes.null;
    }
  }, {
    key: 'nullable',
    value: function nullable(type) {
      var target = new NullableType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'existential',
    value: function existential() {
      return primitiveTypes.existential;
    }
  }, {
    key: 'empty',
    value: function empty() {
      return primitiveTypes.empty;
    }
  }, {
    key: 'any',
    value: function any() {
      return primitiveTypes.any;
    }
  }, {
    key: 'mixed',
    value: function mixed() {
      return primitiveTypes.mixed;
    }
  }, {
    key: 'void',
    value: function _void() {
      return primitiveTypes.void;
    }
  }, {
    key: 'this',
    value: function _this(input) {
      var target = new ThisType(this);
      if (input !== undefined) {
        target.recorded = input;
      }
      return target;
    }
  }, {
    key: 'number',
    value: function number(input) {
      if (input !== undefined) {
        var target = new NumericLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.number;
      }
    }
  }, {
    key: 'boolean',
    value: function boolean(input) {
      if (input !== undefined) {
        var target = new BooleanLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.boolean;
      }
    }
  }, {
    key: 'string',
    value: function string(input) {
      if (input !== undefined) {
        var target = new StringLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.string;
      }
    }
  }, {
    key: 'symbol',
    value: function symbol(input) {
      if (input !== undefined) {
        var target = new SymbolLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.symbol;
      }
    }
  }, {
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      return target;
    }
  }, {
    key: 'flowInto',
    value: function flowInto(typeParameter) {
      return flowIntoTypeParameter(typeParameter);
    }

    /**
     * Bind the type parameters for the parent class of the given instance.
     */

  }, {
    key: 'bindTypeParameters',
    value: function bindTypeParameters(subject) {
      var instancePrototype = Object.getPrototypeOf(subject);
      // Issue
      var parentPrototype = instancePrototype && Object.getPrototypeOf(instancePrototype);
      // Issue
      var parentClass = parentPrototype && parentPrototype.constructor;

      if (!parentClass) {
        this.emitWarningMessage('Could not bind type parameters for non-existent parent class.');
        return subject;
      }
      // Issue 252
      var typeParametersPointer = parentClass[TypeParametersSymbol];

      if (typeParametersPointer) {
        var typeParameters = subject[typeParametersPointer];
        var keys = Object.keys(typeParameters);

        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var length = Math.min(keys.length, typeInstances.length);
        for (var i = 0; i < length; i++) {
          var typeParam = typeParameters[keys[i]];
          typeParam.bound = typeInstances[i];
        }
      }
      return subject;
    }
  }, {
    key: 'module',
    value: function module(name, body) {
      var target = new ModuleDeclaration(this);
      target.name = name;
      var innerContext = this.createContext();
      // Issue 252
      innerContext[ParentSymbol] = this;
      // Issue 252
      innerContext[CurrentModuleSymbol] = target;

      target.innerContext = innerContext;
      body(innerContext);
      return target;
    }
  }, {
    key: 'moduleExports',
    value: function moduleExports(type) {
      var currentModule = this[CurrentModuleSymbol];
      if (!currentModule) {
        throw new Error('Cannot declare module.exports outside of a module.');
      }
      var target = new ModuleExports(this);
      target.type = type;
      currentModule.moduleExports = target;
      return target;
    }
  }, {
    key: 'var',
    value: function _var(name, type) {
      var target = new VarDeclaration(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'class',
    value: function _class(name, head) {
      if (typeof head === 'function') {
        var _target3 = new ParameterizedClassDeclaration(this);
        _target3.name = name;
        _target3.bodyCreator = head;
        return _target3;
      }
      var target = new ClassDeclaration(this);
      target.name = name;

      for (var _len3 = arguments.length, tail = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        tail[_key3 - 2] = arguments[_key3];
      }

      if (head != null) {
        tail.unshift(head);
      }
      var length = tail.length;

      var properties = [];
      var body = void 0;

      for (var i = 0; i < length; i++) {
        var item = tail[i];
        if (item instanceof ObjectTypeProperty || item instanceof ObjectTypeIndexer) {
          properties.push(item);
        } else if (item instanceof ObjectType) {
          invariant(!body, 'Class body must only be declared once.');
          body = item;
        } else if (item instanceof ExtendsDeclaration) {
          invariant(!target.superClass, 'Classes can only have one super class.');
          target.superClass = item;
        } else if (item != null && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !(item instanceof Type)) {
          for (var propertyName in item) {
            // eslint-disable-line
            properties.push(this.property(propertyName, item[propertyName]));
          }
        } else {
          throw new Error('ClassDeclaration cannot contain the given type directly.');
        }
      }
      if (!body) {
        body = new ObjectType(this);
      }
      if (properties.length) {
        var _body$properties;

        (_body$properties = body.properties).push.apply(_body$properties, properties);
      }
      target.body = body;
      return target;
    }
  }, {
    key: 'extends',
    value: function _extends(subject) {
      var target = new ExtendsDeclaration(this);

      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      target.type = this.ref.apply(this, [subject].concat(toConsumableArray(typeInstances)));
      return target;
    }
  }, {
    key: 'fn',
    value: function fn(head) {
      for (var _len5 = arguments.length, tail = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        tail[_key5 - 1] = arguments[_key5];
      }

      return this.function.apply(this, [head].concat(tail));
    }
  }, {
    key: 'function',
    value: function _function(head) {
      if (typeof head === 'function') {
        var _target4 = new ParameterizedFunctionType(this);
        _target4.bodyCreator = head;
        return _target4;
      }
      var target = new FunctionType(this);
      if (head != null) {
        for (var _len6 = arguments.length, tail = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          tail[_key6 - 1] = arguments[_key6];
        }

        tail.unshift(head);
        var length = tail.length;

        for (var i = 0; i < length; i++) {
          var item = tail[i];
          if (item instanceof FunctionTypeParam) {
            target.params.push(item);
          } else if (item instanceof FunctionTypeRestParam) {
            target.rest = item;
          } else if (item instanceof FunctionTypeReturn) {
            target.returnType = item;
          } else {
            throw new Error('FunctionType cannot contain the given type directly.');
          }
        }
      }
      if (!target.returnType) {
        target.returnType = this.any();
      }
      return target;
    }
  }, {
    key: 'param',
    value: function param(name, type) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new FunctionTypeParam(this);
      target.name = name;
      target.type = type;
      target.optional = optional;
      return target;
    }
  }, {
    key: 'rest',
    value: function rest(name, type) {
      var target = new FunctionTypeRestParam(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'return',
    value: function _return(type) {
      var target = new FunctionTypeReturn(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'generator',
    value: function generator(yieldType, returnType, nextType) {
      var target = new GeneratorType(this);
      target.yieldType = yieldType;
      target.returnType = returnType || this.any();
      target.nextType = nextType || this.any();
      return target;
    }
  }, {
    key: 'object',
    value: function object(head) {
      var target = new ObjectType(this);
      if (head != null && (typeof head === 'undefined' ? 'undefined' : _typeof(head)) === 'object' && !(head instanceof Type)) {
        for (var propertyName in head) {
          // eslint-disable-line
          target.properties.push(this.property(propertyName, head[propertyName]));
        }
      } else {
        var body = void 0;

        for (var _len7 = arguments.length, tail = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          tail[_key7 - 1] = arguments[_key7];
        }

        if (head) {
          body = [head].concat(toConsumableArray(tail));
        } else {
          body = tail;
        }
        var _body = body,
            length = _body.length;

        for (var i = 0; i < length; i++) {
          var item = body[i];
          if (item instanceof ObjectTypeProperty) {
            target.properties.push(item);
          } else if (item instanceof ObjectTypeIndexer) {
            target.indexers.push(item);
          } else if (item instanceof ObjectTypeCallProperty) {
            target.callProperties.push(item);
          } else {
            throw new Error('ObjectType cannot contain the given type directly.');
          }
        }
      }
      return target;
    }
  }, {
    key: 'exactObject',
    value: function exactObject(head) {
      for (var _len8 = arguments.length, tail = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        tail[_key8 - 1] = arguments[_key8];
      }

      var object = this.object.apply(this, [head].concat(toConsumableArray(tail)));
      object.exact = true;
      return object;
    }
  }, {
    key: 'callProperty',
    value: function callProperty(value) {
      var target = new ObjectTypeCallProperty(this);
      target.value = value;
      return target;
    }
  }, {
    key: 'property',
    value: function property(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new ObjectTypeProperty(this);
      target.key = key;
      if (value instanceof Type) {
        target.value = value;
      } else {
        target.value = this.object(value);
      }
      target.optional = optional;
      return target;
    }
  }, {
    key: 'indexer',
    value: function indexer(id, key, value) {
      var target = new ObjectTypeIndexer(this);
      target.id = id;
      target.key = key;
      target.value = value;
      return target;
    }
  }, {
    key: 'method',
    value: function method(name, head) {
      var target = new ObjectTypeProperty(this);
      target.key = name;

      for (var _len9 = arguments.length, tail = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
        tail[_key9 - 2] = arguments[_key9];
      }

      target.value = this.function.apply(this, [head].concat(tail));
      return target;
    }
  }, {
    key: 'staticCallProperty',
    value: function staticCallProperty(value) {
      var prop = this.callProperty(value);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticProperty',
    value: function staticProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var prop = this.property(key, value, optional);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticMethod',
    value: function staticMethod(name, head) {
      for (var _len10 = arguments.length, tail = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
        tail[_key10 - 2] = arguments[_key10];
      }

      var prop = this.method.apply(this, [name, head].concat(tail));
      prop.static = true;
      return prop;
    }
  }, {
    key: 'spread',
    value: function spread() {
      var target = new ObjectType(this);

      for (var _len11 = arguments.length, types = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        types[_key11] = arguments[_key11];
      }

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        if (Array.isArray(type.callProperties)) {
          var _target$callPropertie;

          (_target$callPropertie = target.callProperties).push.apply(_target$callPropertie, toConsumableArray(type.callProperties));
        }
        if (Array.isArray(type.indexers)) {
          var _target$indexers;

          (_target$indexers = target.indexers).push.apply(_target$indexers, toConsumableArray(type.indexers));
        }
        if (Array.isArray(type.properties)) {
          for (var j = 0; j < type.properties.length; j++) {
            var prop = type.properties[j];
            invariant(prop instanceof ObjectTypeProperty);
            target.setProperty(prop.key, prop.value, prop.optional);
          }
        }
      }
      return target;
    }
  }, {
    key: 'tuple',
    value: function tuple() {
      var target = new TupleType(this);

      for (var _len12 = arguments.length, types = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        types[_key12] = arguments[_key12];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'array',
    value: function array(elementType) {
      var target = new ArrayType(this);
      target.elementType = elementType || this.any();
      return target;
    }
  }, {
    key: 'union',
    value: function union() {
      for (var _len13 = arguments.length, types = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        types[_key13] = arguments[_key13];
      }

      return makeUnion(this, types);
    }
  }, {
    key: 'intersect',
    value: function intersect() {
      var target = new IntersectionType(this);

      for (var _len14 = arguments.length, types = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        types[_key14] = arguments[_key14];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'intersection',
    value: function intersection() {
      return this.intersect.apply(this, arguments);
    }
  }, {
    key: 'box',
    value: function box(reveal) {
      var box = new TypeBox(this);
      box.reveal = reveal;
      return box;
    }
  }, {
    key: 'tdz',
    value: function tdz(reveal, name) {
      var tdz = new TypeTDZ(this);
      tdz.reveal = reveal;
      tdz.name = name;
      return tdz;
    }
  }, {
    key: 'ref',
    value: function ref(subject) {
      var target = void 0;
      if (typeof subject === 'string') {
        // try and eagerly resolve the reference
        target = this.get(subject);
        if (!target) {
          // defer dereferencing for now
          target = new TypeReference(this);
          target.name = subject;
        }
      } else if (typeof subject === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        // see if we have a dedicated TypeConstructor for this.
        target = handlerRegistry.get(subject);

        if (!target) {
          // just use a generic type handler.
          target = new GenericType(this);
          target.impl = subject;
          target.name = subject.name;
        }
      } else if (subject instanceof Type) {
        target = subject;
      } else {
        if (subject == null || (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) !== 'object') {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead. (got ' + String(subject) + ')');
        } else if (!warnedInvalidReferences.has(subject)) {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead.');
          warnedInvalidReferences.add(subject);
        }
        return this.any();
      }

      for (var _len15 = arguments.length, typeInstances = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
        typeInstances[_key15 - 1] = arguments[_key15];
      }

      if (typeInstances.length) {
        var _target5;

        invariant(typeof target.apply === 'function', 'Cannot apply non-applicable type: ' + target.typeName + '.');
        return (_target5 = target).apply.apply(_target5, toConsumableArray(typeInstances));
      } else {
        return target;
      }
    }
  }, {
    key: 'validate',
    value: function validate(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = new Validation(this, input);
      if (path) {
        var _validation$path;

        (_validation$path = validation.path).push.apply(_validation$path, toConsumableArray(path));
      } else if (typeof type.name === 'string') {
        validation.path.push(type.name);
      }
      validation.prefix = prefix;
      validation.errors = Array.from(type.errors(validation, [], input));
      return validation;
    }
  }, {
    key: 'check',
    value: function check(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      if (this.mode === 'assert') {
        return this.assert(type, input, prefix, path);
      } else {
        return this.warn(type, input, prefix, path);
      }
    }
  }, {
    key: 'assert',
    value: function assert(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var error = this.makeTypeError(validation);
      if (error) {
        throw error;
      }
      return input;
    }
  }, {
    key: 'warn',
    value: function warn(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var message = makeWarningMessage(validation);
      if (typeof message === 'string') {
        this.emitWarningMessage(message);
      }
      return input;
    }

    /**
     * Emits a warning message, using `console.warn()` by default.
     */

  }, {
    key: 'emitWarningMessage',
    value: function emitWarningMessage(message) {
      console.warn('flow-runtime:', message);
    }
  }, {
    key: 'propTypes',
    value: function propTypes(type) {
      return makeReactPropTypes(type.unwrap());
    }
  }, {
    key: 'match',
    value: function match() {
      for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      var clauses = args.pop();
      if (!Array.isArray(clauses)) {
        throw new Error('Invalid pattern, last argument must be an array.');
      }
      var pattern = this.pattern.apply(this, toConsumableArray(clauses));
      return pattern.apply(undefined, args);
    }
  }, {
    key: 'pattern',
    value: function pattern() {
      for (var _len17 = arguments.length, clauses = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        clauses[_key17] = arguments[_key17];
      }

      var length = clauses.length;

      var tests = new Array(length);
      for (var i = 0; i < length; i++) {
        var clause = clauses[i];
        var annotation = this.getAnnotation(clause);
        if (!annotation) {
          if (i !== length - 1) {
            throw new Error('Invalid Pattern - found unannotated function in position ' + i + ', default clauses must be last.');
          }
          tests[i] = true;
        } else {
          invariant(annotation instanceof FunctionType || annotation instanceof ParameterizedFunctionType, 'Pattern clauses must be annotated functions.');
          tests[i] = annotation;
        }
      }
      return function () {
        for (var _i = 0; _i < tests.length; _i++) {
          var test = tests[_i];
          var _clause = clauses[_i];
          if (test === true) {
            return _clause.apply(undefined, arguments);
          } else if (test.acceptsParams.apply(test, arguments)) {
            return _clause.apply(undefined, arguments);
          }
        }
        var error = new TypeError('Value did not match any of the candidates.');
        error.name = 'RuntimeTypeError';
        throw error;
      };
    }
  }, {
    key: 'wrapIterator',
    value: function wrapIterator(type) {
      var t = this;
      return (/*#__PURE__*/_regeneratorRuntime.mark(function wrappedIterator(input) {
          var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

          return _regeneratorRuntime.wrap(function wrappedIterator$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context3.prev = 3;
                  _iterator = input[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    _context3.next = 12;
                    break;
                  }

                  item = _step.value;
                  _context3.next = 9;
                  return t.check(type, item);

                case 9:
                  _iteratorNormalCompletion = true;
                  _context3.next = 5;
                  break;

                case 12:
                  _context3.next = 18;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3['catch'](3);
                  _didIteratorError = true;
                  _iteratorError = _context3.t0;

                case 18:
                  _context3.prev = 18;
                  _context3.prev = 19;

                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }

                case 21:
                  _context3.prev = 21;

                  if (!_didIteratorError) {
                    _context3.next = 24;
                    break;
                  }

                  throw _iteratorError;

                case 24:
                  return _context3.finish(21);

                case 25:
                  return _context3.finish(18);

                case 26:
                case 'end':
                  return _context3.stop();
              }
            }
          }, wrappedIterator, this, [[3, 14, 18, 26], [19,, 21, 25]]);
        })
      );
    }
  }, {
    key: 'refinement',
    value: function refinement(type) {
      var target = new RefinementType(this);
      target.type = type;

      for (var _len18 = arguments.length, constraints = Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
        constraints[_key18 - 1] = arguments[_key18];
      }

      target.addConstraint.apply(target, toConsumableArray(constraints));
      return target;
    }
  }, {
    key: '$exact',
    value: function $exact(type) {
      var target = new ObjectType(this);
      type = type.unwrap();
      if (Array.isArray(type.callProperties)) {
        var _target$callPropertie2;

        (_target$callPropertie2 = target.callProperties).push.apply(_target$callPropertie2, toConsumableArray(type.callProperties));
      }
      if (Array.isArray(type.indexers)) {
        var _target$indexers2;

        (_target$indexers2 = target.indexers).push.apply(_target$indexers2, toConsumableArray(type.indexers));
      }
      if (Array.isArray(type.properties)) {
        var _target$properties;

        (_target$properties = target.properties).push.apply(_target$properties, toConsumableArray(type.properties));
      }
      target.exact = true;
      return target;
    }
  }, {
    key: '$diff',
    value: function $diff(aType, bType) {
      var target = new $DiffType(this);
      target.aType = aType;
      target.bType = bType;
      return target;
    }
  }, {
    key: '$flowFixMe',
    value: function $flowFixMe() {
      return new $FlowFixMeType(this);
    }
  }, {
    key: '$keys',
    value: function $keys(type) {
      var target = new $KeysType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$objMap',
    value: function $objMap(object, mapper) {
      var target = new $ObjMapType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$objMapi',
    value: function $objMapi(object, mapper) {
      var target = new $ObjMapiType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$propertyType',
    value: function $propertyType(object, property) {
      var target = new $PropertyType(this);
      target.object = object;
      if (property instanceof Type) {
        var unwrapped = property.unwrap();
        target.property = unwrapped.value;
      } else {
        target.property = property;
      }
      return target;
    }
  }, {
    key: '$shape',
    value: function $shape(type) {
      var target = new $ShapeType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$subtype',
    value: function $subtype(type) {
      var target = new $SubType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$supertype',
    value: function $supertype(type) {
      var target = new $SuperType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$tupleMap',
    value: function $tupleMap(tuple, mapper) {
      var target = new $TupleMapType(this);
      target.tuple = tuple;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$values',
    value: function $values(type) {
      var target = new $ValuesType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'Class',
    value: function Class(instanceType) {
      var target = new ClassType(this);
      target.instanceType = instanceType;
      return target;
    }
  }, {
    key: 'TypeParametersSymbol',


    // Issue 252
    get: function get$$1() {
      return TypeParametersSymbol;
    }
  }]);
  return TypeContext;
}();

var globalContext$1 = void 0;
if (typeof commonjsGlobal !== 'undefined' && typeof commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== 'undefined') {
  globalContext$1 = commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__;
} else {
  globalContext$1 = new TypeContext();
  registerPrimitiveTypes(globalContext$1);
  registerBuiltinTypeConstructors(globalContext$1);
  registerTypePredicates(globalContext$1);
  if (typeof commonjsGlobal !== 'undefined') {
    commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ = globalContext$1;
  }
}

var globalContext$2 = globalContext$1;

function v(thing) {
  return { value: thing };
}

if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== globalContext$2) {
  Object.defineProperties(globalContext$2, {
    TypeContext: v(TypeContext),
    Type: v(Type),
    TypeBox: v(TypeBox),
    TypeParameter: v(TypeParameter),
    TypeReference: v(TypeReference),
    TypeTDZ: v(TypeTDZ),
    ParameterizedTypeAlias: v(ParameterizedTypeAlias),
    TypeAlias: v(TypeAlias),
    TypeConstructor: v(TypeConstructor),
    GenericType: v(GenericType),
    NullLiteralType: v(NullLiteralType),
    NumberType: v(NumberType),
    NumericLiteralType: v(NumericLiteralType),
    BooleanType: v(BooleanType),
    BooleanLiteralType: v(BooleanLiteralType),
    SymbolType: v(SymbolType),
    SymbolLiteralType: v(SymbolLiteralType),
    StringType: v(StringType),
    StringLiteralType: v(StringLiteralType),
    ArrayType: v(ArrayType),
    ObjectType: v(ObjectType),
    ObjectTypeCallProperty: v(ObjectTypeCallProperty),
    ObjectTypeIndexer: v(ObjectTypeIndexer),
    ObjectTypeProperty: v(ObjectTypeProperty),
    FunctionType: v(FunctionType),
    FunctionTypeParam: v(FunctionTypeParam),
    FunctionTypeRestParam: v(FunctionTypeRestParam),
    FunctionTypeReturn: v(FunctionTypeReturn),
    ParameterizedFunctionType: v(ParameterizedFunctionType),
    PartialType: v(PartialType),
    RefinementType: v(RefinementType),
    TypeParameterApplication: v(TypeParameterApplication),
    GeneratorType: v(GeneratorType),
    ExistentialType: v(ExistentialType),
    FlowIntoType: v(FlowIntoType),
    AnyType: v(AnyType),
    MixedType: v(MixedType),
    EmptyType: v(EmptyType),
    NullableType: v(NullableType),
    ThisType: v(ThisType),
    TupleType: v(TupleType),
    UnionType: v(UnionType),
    IntersectionType: v(IntersectionType),
    VoidType: v(VoidType),
    Declaration: v(Declaration),
    VarDeclaration: v(VarDeclaration),
    TypeDeclaration: v(TypeDeclaration),
    ModuleDeclaration: v(ModuleDeclaration),
    ModuleExportsDeclaration: v(ModuleExports),
    ClassDeclaration: v(ClassDeclaration),
    ParameterizedClassDeclaration: v(ParameterizedClassDeclaration),
    ExtendsDeclaration: v(ExtendsDeclaration)
  });
}

return globalContext$2;

})));

});

// This file is part of LeanES.
var cpoMetaObject$g = Symbol["for"]('~metaObject');
function machine(first, last) {
  var _firstType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"]());

  var _lastType = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

  flowRuntime_umd.param("first", _firstType).assert(first);
  flowRuntime_umd.param("last", _lastType).assert(last);
  var key = _.isFunction(first) ? 'default' : first;
  var functor = last || first;
  return function (target) {
    assert(target[cpoMetaObject$g] != null, 'Target for `machine` decorator must be a Class');
    assert(target.isExtensible, "Class '".concat(target.name, "' has been frozen previously. StateMachine '").concat(key, "' can not be declared"));
    target.metaObject.addMetaData('stateMachines', key, functor);
    return target;
  };
}
flowRuntime_umd.annotate(machine, flowRuntime_umd["function"](flowRuntime_umd.param("first", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"]())), flowRuntime_umd.param("last", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))));

var cpoMetaObject$h = Symbol["for"]('~metaObject');
var cphPathMap = Symbol["for"]('~pathMap');
var cphUtilsMap = Symbol["for"]('~utilsMap');
var cphMigrationsMap = Symbol["for"]('~migrationsMap');
var cphTemplatesList = Symbol["for"]('~templatesList');
var cphFilesList = Symbol["for"]('~filesList');
function resolver(req, amReg) {
  return function (target) {
    assert(target[cpoMetaObject$h] != null, 'Target for `resolver` decorator must be a Module subclass');

    var vmFunctor = function vmFunctor(name) {
      var isRecursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var errors = [];
      var currentHasError = true;

      var _this$superclass$reso = this.superclass().resolve(name, true),
          _this$superclass$reso2 = _slicedToArray(_this$superclass$reso, 2),
          maybeErrors = _this$superclass$reso2[0],
          parentHasError = _this$superclass$reso2[1];

      maybeErrors.forEach(function (i) {
        errors.push(i);
      });

      try {
        var currentRes = amReg(name);

        if (currentRes && typeof currentRes["default"] === 'function') {
          currentRes["default"](this);
        } else {
          currentRes(this);
        }

        currentHasError = false;
      } catch (e2) {
        if (e2.name.indexOf(" IN ".concat(this.name)) === -1) {
          e2.name += " IN ".concat(this.name);
        }

        errors.push(e2);
      }

      if (!isRecursion) {
        if (parentHasError && currentHasError) {
          var _iterator = _createForOfIteratorHelper(errors),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var err = _step.value;
              console.error(err);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var newError = new Error("Resolver has undefined dependency. Class should be defined on ".concat(this.name, " directly or use `@loadFiles` decorator above ").concat(this.name, " declaration"));
          newError.name += " IN ".concat(this.name);
          throw newError;
        }
      }

      return [errors, parentHasError && currentHasError];
    };

    var _Object$keys$sort$red = Object.keys(req).sort(function (a, b) {
      return (a.match(/\//g) || []).length - (b.match(/\//g) || []).length;
    }).reduce(function (_ref, vsItem) {
      var _ref2 = _slicedToArray(_ref, 5),
          cp = _ref2[0],
          up = _ref2[1],
          mp = _ref2[2],
          tp = _ref2[3],
          fp = _ref2[4];

      if (/\.[.]+$/.test(vsItem)) {
        fp.push(vsItem);
      }

      if (/\.js$/.test(vsItem)) {
        var vsPathMatch = vsItem.match(/([\w\-\_]+)\.js$/);

        var _ref3 = vsPathMatch != null ? vsPathMatch : [],
            _ref4 = _slicedToArray(_ref3, 2),
            blackhole = _ref4[0],
            vsName = _ref4[1];

        if (vsItem && vsName) {
          switch (false) {
            case !/.*\/templates\/.*/.test(vsItem):
              tp.push(vsItem);
              break;

            case !(/.*\/migrations\/.*/.test(vsItem) && vsName !== 'BaseMigration'):
              if (mp[vsName] == null) mp[vsName] = vsItem;
              break;

            case !/.*\/utils\/.*/.test(vsItem):
              if (up[vsName] == null) up[vsName] = vsItem;
              break;

            default:
              if (cp[vsName] == null) cp[vsName] = vsItem;
          }
        }
      }

      return [cp, up, mp, tp, fp];
    }, [{}, {}, {}, [], []]),
        _Object$keys$sort$red2 = _slicedToArray(_Object$keys$sort$red, 5),
        pathMap = _Object$keys$sort$red2[0],
        utilsMap = _Object$keys$sort$red2[1],
        migrationsMap = _Object$keys$sort$red2[2],
        templatesList = _Object$keys$sort$red2[3],
        filesList = _Object$keys$sort$red2[4];

    if (target[cphPathMap] == null) {
      Reflect.defineProperty(target, cphPathMap, {
        enumerable: true,
        writable: true,
        value: pathMap
      });
    }

    if (target[cphUtilsMap] == null) {
      Reflect.defineProperty(target, cphUtilsMap, {
        enumerable: true,
        writable: true,
        value: utilsMap
      });
    }

    if (target[cphMigrationsMap] == null) {
      Reflect.defineProperty(target, cphMigrationsMap, {
        enumerable: true,
        writable: true,
        value: migrationsMap
      });
    }

    if (target[cphTemplatesList] == null) {
      Reflect.defineProperty(target, cphTemplatesList, {
        enumerable: true,
        writable: true,
        value: templatesList
      });
    }

    if (target[cphFilesList] == null) {
      Reflect.defineProperty(target, cphFilesList, {
        enumerable: true,
        writable: true,
        value: filesList
      });
    }

    Reflect.defineProperty(target, 'resolve', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: vmFunctor
    });
    Reflect.defineProperty(target, 'require', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: req
    });
    target.Module.metaObject.addMetaData('classMethods', 'resolve', vmFunctor);
    target.Module.metaObject.addMetaData('classMethods', 'require', req);
    return target;
  };
}

var cpoMetaObject$i = Symbol["for"]('~metaObject');
var indexOf = [].indexOf;
var cachedChainsMixin = null;
function chains(first, last) {
  var _firstType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()), flowRuntime_umd["function"]());

  var _lastType = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

  flowRuntime_umd.warn(flowRuntime_umd.param("first", _firstType), first);
  flowRuntime_umd.warn(flowRuntime_umd.param("last", _lastType), last);
  return function (target) {
    assert(target[cpoMetaObject$i] != null, 'Target for `chains` decorator must be a Class');
    var chainsNames = _.isFunction(first) ? [] : first;
    var functor = last || first;
    assert(_.isFunction(functor), 'Last argument in `chains` decorator must be a function');
    var _target$Module$NS = target.Module.NS,
        CoreObject = _target$Module$NS.CoreObject,
        initializeMixin = _target$Module$NS.initializeMixin,
        meta = _target$Module$NS.meta,
        method = _target$Module$NS.method;
    var callWithChainName = flowRuntime_umd.annotate(function callWithChainName(isArray, isAsync) {
      var _isArrayType = flowRuntime_umd["boolean"]();

      var _isAsyncType = flowRuntime_umd["boolean"]();

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.warn(flowRuntime_umd.param("isArray", _isArrayType), isArray);
      flowRuntime_umd.warn(flowRuntime_umd.param("isAsync", _isAsyncType), isAsync);

      if (isArray) {
        if (isAsync) {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnArrayAsync');
        } else {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnArray');
        }
      } else {
        if (isAsync) {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnSingleAsync');
        } else {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnSingle');
        }
      }
    }, flowRuntime_umd["function"](flowRuntime_umd.param("isArray", flowRuntime_umd["boolean"]()), flowRuntime_umd.param("isAsync", flowRuntime_umd["boolean"]()), flowRuntime_umd["return"](flowRuntime_umd.string())));

    var ChainsMixin = cachedChainsMixin || function (BaseClass) {
      var _dec, _class, _class2, _init, _class3, _temp;

      var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("_getChains", flowRuntime_umd.param("AbstractClass", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("callAsChain", flowRuntime_umd.param("isAsync", flowRuntime_umd.any()), flowRuntime_umd.param("methodName", flowRuntime_umd.any()), flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("_callWithChainNameOnSingle", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("singleData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("_callWithChainNameOnArray", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("arrayData", flowRuntime_umd.array()), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.method("_callWithChainNameOnSingleAsync", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("singleData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("_callWithChainNameOnArrayAsync", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("arrayData", flowRuntime_umd.array()), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("_defineHookMethods", flowRuntime_umd.param("_arg", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("defineChains"), flowRuntime_umd.staticMethod("onInitialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("onInitializeMixin", flowRuntime_umd.param("args", flowRuntime_umd.any())))), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
        _inherits(Mixin, _BaseClass);

        var _super = _createSuper(Mixin);

        function Mixin() {
          _classCallCheck(this, Mixin);

          return _super.apply(this, arguments);
        }

        _createClass(Mixin, [{
          key: "callAsChain",
          value: function callAsChain(isAsync, methodName) {
            var _this = this;

            for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }

            var name = Symbol["for"]("~chain_".concat(methodName));

            if (isAsync) {
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var asyncInitialData, asyncData, asyncResult, asyncAfterResult;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.t0 = _;
                        _context.next = 4;
                        return _this.initialAction.apply(_this, [isAsync, methodName].concat(args));

                      case 4:
                        _context.t1 = _context.sent;

                        if (_context.t1) {
                          _context.next = 7;
                          break;
                        }

                        _context.t1 = [];

                      case 7:
                        _context.t2 = _context.t1;
                        asyncInitialData = _context.t0.castArray.call(_context.t0, _context.t2);
                        _context.t3 = _;
                        _context.next = 12;
                        return _this.beforeAction.apply(_this, [isAsync, methodName].concat(_toConsumableArray(asyncInitialData)));

                      case 12:
                        _context.t4 = _context.sent;

                        if (_context.t4) {
                          _context.next = 15;
                          break;
                        }

                        _context.t4 = [];

                      case 15:
                        _context.t5 = _context.t4;
                        asyncData = _context.t3.castArray.call(_context.t3, _context.t5);
                        _context.next = 19;
                        return typeof _this[name] === "function" ? _this[name].apply(_this, _toConsumableArray(asyncData)) : undefined;

                      case 19:
                        asyncResult = _context.sent;
                        _context.next = 22;
                        return _this.afterAction(isAsync, methodName, asyncResult);

                      case 22:
                        asyncAfterResult = _context.sent;
                        _context.next = 25;
                        return _this.finallyAction(isAsync, methodName, asyncAfterResult);

                      case 25:
                        return _context.abrupt("return", _context.sent);

                      case 28:
                        _context.prev = 28;
                        _context.t6 = _context["catch"](0);
                        _context.next = 32;
                        return _this.errorAction(isAsync, methodName, _context.t6);

                      case 32:
                        throw _context.t6;

                      case 33:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 28]]);
              }))();
            } else {
              try {
                var initialData = _.castArray(this.initialAction.apply(this, [isAsync, methodName].concat(args)) || []);

                var data = _.castArray(this.beforeAction.apply(this, [isAsync, methodName].concat(_toConsumableArray(initialData))) || []);

                var result = typeof this[name] === "function" ? this[name].apply(this, _toConsumableArray(data)) : undefined;
                var afterResult = this.afterAction(isAsync, methodName, result);
                return this.finallyAction(isAsync, methodName, afterResult);
              } catch (error) {
                this.errorAction(isAsync, methodName, error);
                throw error;
              }
            }
          }
        }, {
          key: "_callWithChainNameOnSingle",
          value: function _callWithChainNameOnSingle(methodName, actionName, singleData) {
            var _methodNameType = flowRuntime_umd.string();

            var _actionNameType = flowRuntime_umd.string();

            var _singleDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

            var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

            flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType), methodName);
            flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType), actionName);
            flowRuntime_umd.warn(flowRuntime_umd.param("singleData", _singleDataType), singleData);

            if (_.isFunction(this[methodName])) {
              this[methodName].chainName = actionName;
              var res = this[methodName](singleData);
              delete this[methodName].chainName;
              return flowRuntime_umd.warn(_returnType5, res);
            } else {
              return flowRuntime_umd.warn(_returnType5, singleData);
            }
          }
        }, {
          key: "_callWithChainNameOnArray",
          value: function _callWithChainNameOnArray(methodName, actionName, arrayData) {
            var _methodNameType2 = flowRuntime_umd.string();

            var _actionNameType2 = flowRuntime_umd.string();

            var _arrayDataType = flowRuntime_umd.array();

            var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.array());

            flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType2), methodName);
            flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType2), actionName);
            flowRuntime_umd.warn(flowRuntime_umd.param("arrayData", _arrayDataType), arrayData);
            arrayData = flowRuntime_umd.warn(_arrayDataType, _.castArray(arrayData));

            if (_.isFunction(this[methodName])) {
              this[methodName].chainName = actionName;
              var res = this[methodName].apply(this, _toConsumableArray(arrayData));
              delete this[methodName].chainName;
              return flowRuntime_umd.warn(_returnType6, res);
            } else {
              return flowRuntime_umd.warn(_returnType6, arrayData);
            }
          }
        }, {
          key: "_callWithChainNameOnSingleAsync",
          value: function () {
            var _callWithChainNameOnSingleAsync2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(methodName, actionName, singleData) {
              var _methodNameType3, _actionNameType3, _singleDataType2, _returnType7, res;

              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _methodNameType3 = flowRuntime_umd.string();
                      _actionNameType3 = flowRuntime_umd.string();
                      _singleDataType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());
                      _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.any());
                      flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType3), methodName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType3), actionName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("singleData", _singleDataType2), singleData);

                      if (!_.isFunction(this[methodName])) {
                        _context2.next = 16;
                        break;
                      }

                      this[methodName].chainName = actionName;
                      _context2.next = 11;
                      return Promise.resolve(this[methodName](singleData));

                    case 11:
                      res = _context2.sent;
                      delete this[methodName].chainName;
                      return _context2.abrupt("return", flowRuntime_umd.warn(_returnType7, res));

                    case 16:
                      return _context2.abrupt("return", flowRuntime_umd.warn(_returnType7, singleData));

                    case 17:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function _callWithChainNameOnSingleAsync(_x, _x2, _x3) {
              return _callWithChainNameOnSingleAsync2.apply(this, arguments);
            }

            return _callWithChainNameOnSingleAsync;
          }()
        }, {
          key: "_callWithChainNameOnArrayAsync",
          value: function () {
            var _callWithChainNameOnArrayAsync2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(methodName, actionName, arrayData) {
              var _methodNameType4, _actionNameType4, _arrayDataType2, _returnType2, res;

              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _methodNameType4 = flowRuntime_umd.string();
                      _actionNameType4 = flowRuntime_umd.string();
                      _arrayDataType2 = flowRuntime_umd.array();
                      _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                      flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType4), methodName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType4), actionName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("arrayData", _arrayDataType2), arrayData);
                      arrayData = flowRuntime_umd.warn(_arrayDataType2, _.castArray(arrayData));

                      if (!_.isFunction(this[methodName])) {
                        _context3.next = 17;
                        break;
                      }

                      this[methodName].chainName = actionName;
                      _context3.next = 12;
                      return Promise.resolve(this[methodName].apply(this, _toConsumableArray(arrayData)));

                    case 12:
                      res = _context3.sent;
                      delete this[methodName].chainName;
                      return _context3.abrupt("return", flowRuntime_umd.warn(_returnType2, res));

                    case 17:
                      return _context3.abrupt("return", flowRuntime_umd.warn(_returnType2, arrayData));

                    case 18:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));

            function _callWithChainNameOnArrayAsync(_x4, _x5, _x6) {
              return _callWithChainNameOnArrayAsync2.apply(this, arguments);
            }

            return _callWithChainNameOnArrayAsync;
          }()
        }], [{
          key: "_getChains",
          value: function _getChains() {
            var AbstractClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

            AbstractClass = AbstractClass || this;

            var _AbstractClassType = flowRuntime_umd.Class(flowRuntime_umd.existential());

            flowRuntime_umd.warn(_AbstractClassType, AbstractClass);
            var ret = Object.keys(AbstractClass.metaObject.getOwnGroup('chains')) || [];
            return flowRuntime_umd.warn(_returnType4, ret);
          }
        }, {
          key: "_defineHookMethods",
          value: function _defineHookMethods(_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                asHookName = _ref3[0],
                isArray = _ref3[1];

            var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

            var vsHookNames = "".concat(asHookName, "s");
            var vsActionName = "".concat(asHookName.replace('Hook', ''), "Action");
            Reflect.defineProperty(this, asHookName, method(this, asHookName, {
              value: flowRuntime_umd.annotate(function (method) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var _methodType = flowRuntime_umd.string();

                var _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("only", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true), flowRuntime_umd.property("except", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true)));

                flowRuntime_umd.warn(flowRuntime_umd.param("method", _methodType), method);
                flowRuntime_umd.warn(flowRuntime_umd.param("options", _optionsType), options);

                switch (false) {
                  case options.only == null:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'only',
                      actions: options.only
                    });
                    break;

                  case options.except == null:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'except',
                      actions: options.except
                    });
                    break;

                  default:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'all'
                    });
                }
              }, flowRuntime_umd["function"](flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("only", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true), flowRuntime_umd.property("except", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))))))
            }));
            Reflect.defineProperty(this, vsHookNames, method(this, vsHookNames, {
              value: flowRuntime_umd.annotate(function () {
                var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("only"), flowRuntime_umd.string("except"), flowRuntime_umd.string("all"))), flowRuntime_umd.property("actions", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))));

                return flowRuntime_umd.warn(_returnType9, _.uniqWith(this.metaObject.getGroup('hooks')[vsHookNames] || [], function (first, second) {
                  var fstActions = first.actions;
                  var secActions = second.actions;
                  return first.method === second.method && first.type === second.type && (fstActions != null ? fstActions.join(',') : undefined) === (secActions != null ? secActions.join(',') : undefined);
                }));
              }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("only"), flowRuntime_umd.string("except"), flowRuntime_umd.string("all"))), flowRuntime_umd.property("actions", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))))))
            }));
            Reflect.defineProperty(this.prototype, vsActionName, method(this.prototype, vsActionName, {
              value: function value(isAsync, action) {
                var _this2 = this;

                for (var _len2 = arguments.length, data = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                  data[_key2 - 2] = arguments[_key2];
                }

                if (!isArray) {
                  data = data[0];
                }

                var vlHooks = this.constructor[vsHookNames]();

                if (isAsync) {
                  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                    var _iterator, _step, _loop;

                    return regeneratorRuntime.wrap(function _callee5$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _iterator = _createForOfIteratorHelper(vlHooks);
                            _context6.prev = 1;
                            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                              var _step$value, method, type, actions;

                              return regeneratorRuntime.wrap(function _loop$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      _step$value = _step.value, method = _step$value.method, type = _step$value.type, actions = _step$value.actions;
                                      _context5.next = 3;
                                      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                          while (1) {
                                            switch (_context4.prev = _context4.next) {
                                              case 0:
                                                _context4.t0 = false;
                                                _context4.next = _context4.t0 === (type !== 'all') ? 3 : _context4.t0 === !(type === 'only' && indexOf.call(actions, action) >= 0) ? 3 : _context4.t0 === !(type === 'except' && indexOf.call(actions, action) < 0) ? 3 : 6;
                                                break;

                                              case 3:
                                                _context4.next = 5;
                                                return _this2[callWithChainName(isArray, isAsync)](method, action, data);

                                              case 5:
                                                return _context4.abrupt("return", _context4.sent);

                                              case 6:
                                                return _context4.abrupt("return", data);

                                              case 7:
                                              case "end":
                                                return _context4.stop();
                                            }
                                          }
                                        }, _callee4);
                                      }))();

                                    case 3:
                                      data = _context5.sent;

                                    case 4:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _loop);
                            });

                            _iterator.s();

                          case 4:
                            if ((_step = _iterator.n()).done) {
                              _context6.next = 8;
                              break;
                            }

                            return _context6.delegateYield(_loop(), "t0", 6);

                          case 6:
                            _context6.next = 4;
                            break;

                          case 8:
                            _context6.next = 13;
                            break;

                          case 10:
                            _context6.prev = 10;
                            _context6.t1 = _context6["catch"](1);

                            _iterator.e(_context6.t1);

                          case 13:
                            _context6.prev = 13;

                            _iterator.f();

                            return _context6.finish(13);

                          case 16:
                            return _context6.abrupt("return", data);

                          case 17:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee5, null, [[1, 10, 13, 16]]);
                  }))();
                } else {
                  var _iterator2 = _createForOfIteratorHelper(vlHooks),
                      _step2;

                  try {
                    var _loop2 = function _loop2() {
                      var _step2$value = _step2.value,
                          method = _step2$value.method,
                          type = _step2$value.type,
                          actions = _step2$value.actions;

                      data = function () {
                        switch (false) {
                          case type !== 'all':
                          case !(type === 'only' && indexOf.call(actions, action) >= 0):
                          case !(type === 'except' && indexOf.call(actions, action) < 0):
                            return _this2[callWithChainName(isArray, isAsync)](method, action, data);

                          default:
                            return data;
                        }
                      }();
                    };

                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      _loop2();
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }

                  return data;
                }
              }
            }));
          }
        }, {
          key: "defineChains",
          value: function defineChains() {
            var _this3 = this;

            // console.log('>>??? chains.defineChains before _getChains');
            var vlChains = this._getChains(); // console.log('>>??? chains.defineChains vlChains', vlChains);


            if (!_.isEmpty(vlChains)) {
              var instanceMethods = this.instanceMethods;

              var _iterator3 = _createForOfIteratorHelper(vlChains),
                  _step3;

              try {
                var _loop3 = function _loop3() {
                  var methodName = _step3.value;
                  var name = "chain_".concat(methodName);
                  var pointer = Symbol["for"]("~".concat(name));
                  var vmFunctor = instanceMethods[methodName];

                  if (vmFunctor != null && !vmFunctor.isChain) {
                    var descriptor = {
                      configurable: true,
                      enumerable: true,
                      value: vmFunctor
                    };
                    Reflect.defineProperty(descriptor.value, 'name', {
                      value: name,
                      configurable: true
                    });
                    Reflect.defineProperty(_this3.prototype, pointer, descriptor);

                    if (vmFunctor.isAsync) {
                      Reflect.defineProperty(_this3.prototype, methodName, method(_this3.prototype, methodName, {
                        value: function () {
                          var _value = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                            var _len3,
                                args,
                                _key3,
                                _args7 = arguments;

                            return regeneratorRuntime.wrap(function _callee6$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    for (_len3 = _args7.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                                      args[_key3] = _args7[_key3];
                                    }

                                    _context7.next = 3;
                                    return this.callAsChain.apply(this, [true, methodName].concat(args));

                                  case 3:
                                    return _context7.abrupt("return", _context7.sent);

                                  case 4:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee6, this);
                          }));

                          function value() {
                            return _value.apply(this, arguments);
                          }

                          return value;
                        }()
                      }));
                    } else {
                      Reflect.defineProperty(_this3.prototype, methodName, method(_this3.prototype, methodName, {
                        value: function value() {
                          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                          }

                          return this.callAsChain.apply(this, [false, methodName].concat(args));
                        }
                      }));
                    }

                    _this3.prototype[methodName].isChain = true;
                  }
                };

                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  _loop3();
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          }
        }, {
          key: "onInitialize",
          value: function onInitialize() {
            var _get2;

            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            (_get2 = _get(_getPrototypeOf(Mixin), "onInitialize", this)).call.apply(_get2, [this].concat(args));

            this.defineChains();
          }
        }, {
          key: "onInitializeMixin",
          value: function onInitializeMixin() {
            var _get3;

            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }

            (_get3 = _get(_getPrototypeOf(Mixin), "onInitializeMixin", this)).call.apply(_get3, [this].concat(args));

            this.defineChains();
          }
        }]);

        return Mixin;
      }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init;
        }
      }), _class2), _applyDecoratedDescriptor(_class2, "_getChains", [method], Object.getOwnPropertyDescriptor(_class2, "_getChains"), _class2), _applyDecoratedDescriptor(_class2.prototype, "callAsChain", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "callAsChain"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnSingle", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnSingle"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnArray", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnArray"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnSingleAsync", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnSingleAsync"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnArrayAsync", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnArrayAsync"), _class2.prototype), _applyDecoratedDescriptor(_class2, "_defineHookMethods", [method], Object.getOwnPropertyDescriptor(_class2, "_defineHookMethods"), _class2), _applyDecoratedDescriptor(_class2, "defineChains", [method], Object.getOwnPropertyDescriptor(_class2, "defineChains"), _class2), _applyDecoratedDescriptor(_class2, "onInitialize", [method], Object.getOwnPropertyDescriptor(_class2, "onInitialize"), _class2), _applyDecoratedDescriptor(_class2, "onInitializeMixin", [method], Object.getOwnPropertyDescriptor(_class2, "onInitializeMixin"), _class2)), _class2)) || _class);

      for (var _i = 0, _arr = [['initialHook', true], ['beforeHook', true], ['afterHook', false], ['finallyHook', false], ['errorHook', false]]; _i < _arr.length; _i++) {
        var methodName = _arr[_i];

        if (typeof Mixin[methodName[0]] == 'undefined') {
          Mixin._defineHookMethods(methodName);
        }
      }

      return initializeMixin(Mixin);
    };

    if (cachedChainsMixin == null) {
      Reflect.defineProperty(ChainsMixin, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: 'ChainsMixin'
      });
      cachedChainsMixin = ChainsMixin;
    }

    var targetMixinsNames = Object.keys(target.metaObject.getGroup('applyedMixins'));

    if (!_.includes(targetMixinsNames, 'ChainsMixin')) {
      var SuperClass = Reflect.getPrototypeOf(target);
      var MixinClass = ChainsMixin(SuperClass);
      Reflect.defineProperty(MixinClass, 'name', {
        value: ChainsMixin.name
      });
      Reflect.setPrototypeOf(target, MixinClass);
      Reflect.setPrototypeOf(target.prototype, MixinClass.prototype);
      target.metaObject.parent = MixinClass.metaObject;
      target.metaObject.addMetaData('applyedMixins', MixinClass.name, MixinClass);
    }

    var alChains = _.castArray(chainsNames);

    var _iterator4 = _createForOfIteratorHelper(alChains),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var vsChainName = _step4.value;
        target.metaObject.addMetaData('chains', vsChainName, '');
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    functor.call(target);
    return target;
  };
}
flowRuntime_umd.annotate(chains, flowRuntime_umd["function"](flowRuntime_umd.param("first", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()), flowRuntime_umd["function"]())), flowRuntime_umd.param("last", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))));

var cpoMetaObject$j = Symbol["for"]('~metaObject');
var cphPathMap$1 = Symbol["for"]('~pathMap');
var cphFilesList$1 = Symbol["for"]('~filesList');
function loadFiles(Module) {
  assert(Module[cpoMetaObject$j] != null, 'Target for `loadFiles` decorator must be a Class');
  var FsUtils = Module.NS.FsUtils;
  assert(FsUtils != null, 'Target for `loadFiles` decorator should has FsUtilsAddon');
  var filesTreeSync = FsUtils.NS.Utils.filesTreeSync;

  var _filesTreeSyncType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string())));

  _filesTreeSyncType.assert(filesTreeSync);

  var vsRoot = Module.prototype.ROOT != null ? Module.prototype.ROOT : '.';
  var files = filesTreeSync(vsRoot, {
    filesOnly: true,
    nosort: true
  });

  var _reduce = (files != null ? files : []).reduce(function (_ref, i) {
    var _ref2 = _slicedToArray(_ref, 2),
        cp = _ref2[0],
        fp = _ref2[1];

    if (/.+[.]{1}.+$/.test(i) && !/^\./.test(i)) {
      fp.push(i);
    }

    var vsPathMatch = i.match(/([\w\-\_]+)\.js$/);

    var _ref3 = vsPathMatch != null ? vsPathMatch : [],
        _ref4 = _slicedToArray(_ref3, 2),
        blackhole = _ref4[0],
        fileName = _ref4[1];

    if (fileName != null && !/^\./.test(i)) {
      if (cp[fileName] == null) cp[fileName] = "".concat(vsRoot, "/").concat(i.replace(/\.js/, ''));
    }

    return [cp, fp];
  }, [{}, []]),
      _reduce2 = _slicedToArray(_reduce, 2),
      pathMap = _reduce2[0],
      filesList = _reduce2[1];

  Reflect.defineProperty(Module, cphPathMap$1, {
    enumerable: true,
    writable: true,
    value: pathMap
  });
  Reflect.defineProperty(Module, cphFilesList$1, {
    enumerable: true,
    writable: true,
    value: filesList
  });
  return Module;
}

var cpoMetaObject$k = Symbol["for"]('~metaObject');
var cphUtilsMap$1 = Symbol["for"]('~utilsMap');
function loadUtils(Module) {
  assert(Module[cpoMetaObject$k] != null, 'Target for `loadUtils` decorator must be a Class');
  var FsUtils = Module.NS.FsUtils;
  assert(FsUtils != null, 'Target for `loadUtils` decorator should has FsUtilsAddon');
  var filesTreeSync = FsUtils.NS.Utils.filesTreeSync;

  var _filesTreeSyncType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string())));

  _filesTreeSyncType.assert(filesTreeSync);

  var vsRoot = Module.prototype.ROOT != null ? Module.prototype.ROOT : '.';
  var vsUtilsDir = "".concat(vsRoot, "/utils");
  var files = filesTreeSync(vsUtilsDir, {
    filesOnly: true,
    nosort: true
  });
  var utilsMap = (files != null ? files : []).reduce(function (up, i) {
    var vsPathMatch = i.match(/([\w\-\_]+)\.js$/);

    var _ref = vsPathMatch != null ? vsPathMatch : [],
        _ref2 = _slicedToArray(_ref, 2),
        blackhole = _ref2[0],
        utilName = _ref2[1];

    if (utilName != null && !/^\./.test(i)) {
      if (up[utilName] == null) up[utilName] = "".concat(vsUtilsDir, "/").concat(i.replace(/\.js/, ''));
    }

    return up;
  }, {});
  Reflect.defineProperty(Module, cphUtilsMap$1, {
    enumerable: true,
    writable: true,
    value: utilsMap
  });
  return Module;
}

var hasProp$1 = {}.hasOwnProperty;
var _class = null;
var MetaObject = (function (NS) {
  if (_class !== null) {
    return _class;
  }

  var iphData = Symbol["for"]('~data');
  var ipoParent = Symbol["for"]('~parent');
  var ipoTarget = Symbol["for"]('~target');

  var MetaObject = /*#__PURE__*/function () {
    _createClass(MetaObject, [{
      key: "addMetaData",
      value: function addMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        Reflect.defineProperty(base[asGroup], asKey, {
          configurable: true,
          enumerable: true,
          value: ahMetaData
        });
      }
    }, {
      key: "mergeMetaData",
      value: function mergeMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        var hash = base[asGroup][asKey];

        if (hash != null) {
          var newHash = assign({}, hash, ahMetaData);

          for (var key in newHash) {
            if (!hasProp$1.call(newHash, key)) continue;
            hash[key] = newHash[key];
          }
        } else {
          Reflect.defineProperty(base[asGroup], asKey, {
            configurable: true,
            enumerable: true,
            value: assign({}, ahMetaData)
          });
        }
      }
    }, {
      key: "appendMetaData",
      value: function appendMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        var list = base[asGroup][asKey];

        if (list != null) {
          list.push(ahMetaData);
        } else {
          Reflect.defineProperty(base[asGroup], asKey, {
            configurable: true,
            enumerable: true,
            value: [ahMetaData]
          });
        }
      }
    }, {
      key: "removeMetaData",
      value: function removeMetaData(asGroup, asKey) {
        if (this[iphData][asGroup] != null) {
          Reflect.deleteProperty(this[iphData][asGroup], asKey);
        }
      }
    }, {
      key: "collectGroup",
      value: function collectGroup(asGroup) {
        var collector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var parent = this[ipoParent];
        var parentCollector = parent && typeof parent.collectGroup === "function" && parent.collectGroup(asGroup, collector);
        collector = collector.concat(parentCollector ? parentCollector : []);
        var group = this[iphData][asGroup];
        collector.push(group != null ? group : {});
        return collector;
      }
    }, {
      key: "getGroup",
      value: function getGroup(asGroup) {
        var abDeep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var assign = abDeep ? NS.prototype.assign : Object.assign;
        var vhGroup = assign.apply(void 0, [{}].concat(_toConsumableArray(this.collectGroup(asGroup))));
        return vhGroup;
      }
    }, {
      key: "getOwnGroup",
      value: function getOwnGroup(asGroup) {
        var group = this[iphData][asGroup]; // return group != null ? group : {};

        return group || {};
      }
    }, {
      key: "data",
      get: function get() {
        return this[iphData];
      }
    }, {
      key: "parent",
      get: function get() {
        return this[ipoParent];
      },
      set: function set(newParent) {
        this[ipoParent] = newParent;
        return newParent;
      }
    }, {
      key: "target",
      get: function get() {
        return this[ipoTarget];
      }
    }], [{
      key: "new",
      value: function _new() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Reflect.construct(this, args);
      }
    }]);

    function MetaObject(target, parent) {
      _classCallCheck(this, MetaObject);

      this[ipoTarget] = target;
      this[ipoParent] = parent;
      this[iphData] = {};
      var data = parent != null ? parent.data : undefined;

      if (data !== undefined) {
        for (var key in data) {
          if (!hasProp$1.call(data, key)) continue;
          this[iphData][key] = {};
        }
      }
    }

    return MetaObject;
  }();

  Reflect.defineProperty(MetaObject, 'name', {
    get: function get() {
      return 'MetaObject';
    }
  });
  _class = MetaObject;
  return MetaObject;
});

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var CoreObjectInterface = flowRuntime_umd.type("CoreObjectInterface", flowRuntime_umd.object(flowRuntime_umd.property("_rootConstructor", flowRuntime_umd.string("CoreObject"))));

var CoreObjectInterface$1 = flowRuntime_umd.tdz(function () {
  return CoreObjectInterface;
});
var _class$1 = null;
var CoreObject = (function (NS) {
  var _dec, _class2, _class3, _temp;

  if (_class$1 !== null) {
    return _class$1;
  }

  var _NS$prototype = NS.prototype,
      PRODUCTION = _NS$prototype.PRODUCTION,
      DEVELOPMENT = _NS$prototype.DEVELOPMENT,
      CORE_OBJECT = _NS$prototype.CORE_OBJECT,
      CLASS_KEYS = _NS$prototype.CLASS_KEYS,
      INSTANCE_KEYS = _NS$prototype.INSTANCE_KEYS,
      _ = _NS$prototype._,
      inflect = _NS$prototype.inflect,
      assert = _NS$prototype.assert;
  var MetaObject$1 = MetaObject(NS);
  var cpoMetaObject = Symbol["for"]('~metaObject');
  var cplExtensibles = Symbol["for"]('~isExtensible');
  var cpsExtensibleSymbol = Symbol["for"]('~extensibleSymbol');
  var CoreObject = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("CoreObject", flowRuntime_umd.staticProperty("Module", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("CORE_OBJECT", flowRuntime_umd.any()), flowRuntime_umd.property("_rootConstructor", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("wrap", flowRuntime_umd.param("lambda", flowRuntime_umd.any())), flowRuntime_umd.method("wrap", flowRuntime_umd.param("lambda", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("metaObject"), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref(CoreObjectInterface$1))), flowRuntime_umd.staticMethod("onMetalize"), flowRuntime_umd.staticMethod("onInitialize"), flowRuntime_umd.staticMethod("onInitializeMixin"), flowRuntime_umd.staticMethod("onInitializePatch"), flowRuntime_umd.method("Module", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("moduleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("moduleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("superclass"), flowRuntime_umd.staticMethod("class"), flowRuntime_umd.method("class"), flowRuntime_umd.staticMethod("patches"), flowRuntime_umd.staticMethod("mixins"), flowRuntime_umd.staticMethod("classMethods"), flowRuntime_umd.staticMethod("instanceMethods"), flowRuntime_umd.staticMethod("isExtensible"), flowRuntime_umd.staticMethod("restoreObject", function (_fn) {
    var C = _fn.typeParameter("C", undefined, flowRuntime_umd.ref(CoreObjectInterface$1));

    var R = _fn.typeParameter("R", undefined, flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())));

    var M = _fn.typeParameter("M", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));

    return [flowRuntime_umd.param("acModule", flowRuntime_umd.flowInto(M)), flowRuntime_umd.param("replica", flowRuntime_umd.flowInto(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", C))];
  }), flowRuntime_umd.staticMethod("replicateObject", function (_fn2) {
    var C = _fn2.typeParameter("C", undefined, flowRuntime_umd.ref(CoreObjectInterface$1));

    var R = _fn2.typeParameter("R", undefined, flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())));

    return [flowRuntime_umd.param("aoInstance", flowRuntime_umd.flowInto(C)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
  }))), _dec(_class2 = (_temp = _class3 = /*#__PURE__*/function () {
    _createClass(CoreObject, [{
      key: "wrap",
      value: function wrap(lambda) {
        // const { caller } = arguments.callee;
        // const vcClass = caller.class || this.constructor;
        // const vsName = caller.name;
        var wrapper = function wrapper() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return lambda.apply(this, args);
        }; // Reflect.defineProperty(wrapper, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(lambda, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(wrapper, 'name', {
        //   value: vsName,
        //   configurable: true
        // });
        // Reflect.defineProperty(lambda, 'name', {
        //   value: vsName,
        //   configurable: true
        // });


        Reflect.defineProperty(lambda, 'wrapper', {
          value: wrapper,
          enumerable: true
        });
        Reflect.defineProperty(wrapper, 'body', {
          value: lambda,
          enumerable: true
        });
        return wrapper;
      }
    }, {
      key: "moduleName",
      value: function moduleName() {
        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType6.assert(this.Module.name);
      }
    }, {
      key: "class",
      value: function _class() {
        return this.constructor;
      }
    }, {
      key: "Module",
      // General class API
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType4.assert(this.constructor.Module);
      }
    }], [{
      key: "wrap",
      // Core class API
      // static get 'super'() {
      //   const SuperClass = Reflect.getPrototypeOf(this);
      //   const self = this;
      //   return new Proxy(SuperClass, {
      //     get: function(target, name, receiver) {
      //       // if (name === 'super') {
      //       //   throw new Error('Method `super` can not been called twice');
      //       // }
      //       const method = target[name];
      //       if (method == null) {
      //         return () => {};
      //       }
      //       if (typeof method !== "function") {
      //         throw new Error(`Descriptor \`${name}\` absent in class ${SuperClass.name} is not method`);
      //       }
      //       return method.bind(self);
      //     }
      //   });
      // }
      // get 'super'() {
      //   const SuperClass = Reflect.getPrototypeOf(this.constructor);
      //   const self = this;
      //   return new Proxy(SuperClass.prototype, {
      //     get: function(target, name, receiver) {
      //       // if (name === 'super') {
      //       //   throw new Error('Method `super` can not been called twice');
      //       // }
      //       const method = target[name];
      //       if (method == null) {
      //         return () => {};
      //       }
      //       if (typeof method !== "function") {
      //         throw new Error(`Descriptor \`${name}\` absent in class ${SuperClass.name}.prototype is not method`);
      //       }
      //       return method.bind(self);
      //     }
      //   });
      // }
      value: function wrap(lambda) {
        // const { caller } = arguments.callee;
        // const vcClass = caller.class || this;
        // const vsName = caller.name;
        var wrapper = function wrapper() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return lambda.apply(this, args);
        }; // Reflect.defineProperty(wrapper, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(lambda, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(wrapper, 'name', {
        //   value: vsName,
        //   configurable: true
        // });
        // Reflect.defineProperty(lambda, 'name', {
        //   value: vsName,
        //   configurable: true
        // });


        Reflect.defineProperty(lambda, 'wrapper', {
          value: wrapper,
          enumerable: true
        });
        Reflect.defineProperty(wrapper, 'body', {
          value: lambda,
          enumerable: true
        });
        return wrapper;
      }
    }, {
      key: "new",
      value: function _new() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.ref(CoreObjectInterface$1));

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _returnType3.assert(Reflect.construct(this, args));
      }
    }, {
      key: "onMetalize",
      value: function onMetalize() {
        return;
      }
    }, {
      key: "onInitialize",
      value: function onInitialize() {
        return;
      }
    }, {
      key: "onInitializeMixin",
      value: function onInitializeMixin() {
        return;
      }
    }, {
      key: "onInitializePatch",
      value: function onInitializePatch() {
        return;
      }
    }, {
      key: "moduleName",
      value: function moduleName() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType5.assert(this.Module.name);
      }
    }, {
      key: "superclass",
      value: function superclass() {
        return Reflect.getPrototypeOf(this);
      }
    }, {
      key: "class",
      value: function _class() {
        return this.constructor;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var C, R, M, _acModuleType, _replicaType, _returnType, instance, vcClass;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  C = flowRuntime_umd.typeParameter("C", undefined, flowRuntime_umd.ref(CoreObjectInterface$1));
                  R = flowRuntime_umd.typeParameter("R", undefined, flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())));
                  M = flowRuntime_umd.typeParameter("M", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
                  _acModuleType = flowRuntime_umd.flowInto(M);
                  _replicaType = flowRuntime_umd.flowInto(R);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(C, flowRuntime_umd.ref("Promise", C)));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);
                  assert(replica != null, "Replica cann`t be empty");
                  assert(replica["class"] != null, "Replica type is required");
                  assert((replica != null ? replica.type : void 0) === 'instance', "Replica type isn`t `instance`. It is `".concat(replica.type, "`"));

                  if (!(replica["class"] === this.name)) {
                    _context.next = 15;
                    break;
                  }

                  instance = this["new"]();
                  _context.next = 19;
                  break;

                case 15:
                  vcClass = acModule.prototype[replica["class"]];
                  _context.next = 18;
                  return vcClass.restoreObject(acModule, replica);

                case 18:
                  instance = _context.sent;

                case 19:
                  return _context.abrupt("return", _returnType.assert(instance));

                case 20:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoInstance) {
          var C, R, _aoInstanceType, _returnType2, replica;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  C = flowRuntime_umd.typeParameter("C", undefined, flowRuntime_umd.ref(CoreObjectInterface$1));
                  R = flowRuntime_umd.typeParameter("R", undefined, flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())));
                  _aoInstanceType = flowRuntime_umd.flowInto(C);
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(R, flowRuntime_umd.ref("Promise", R)));
                  flowRuntime_umd.param("aoInstance", _aoInstanceType).assert(aoInstance);
                  assert(aoInstance != null, "Argument cann`t be empty");
                  replica = {
                    type: 'instance',
                    "class": aoInstance.constructor.name
                  };
                  return _context2.abrupt("return", _returnType2.assert(replica));

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }() // init(...args) {
      //   return;
      // }

    }, {
      key: "metaObject",
      get: function get() {
        return this[cpoMetaObject];
      }
    }, {
      key: "patches",
      get: function get() {
        return this.metaObject.getGroup('applyedPatches', false);
      }
    }, {
      key: "mixins",
      get: function get() {
        return this.metaObject.getGroup('applyedMixins', false);
      }
    }, {
      key: "classMethods",
      get: function get() {
        return this.metaObject.getGroup('classMethods', false);
      }
    }, {
      key: "instanceMethods",
      get: function get() {
        return this.metaObject.getGroup('instanceMethods', false);
      }
    }, {
      key: "isExtensible",
      get: function get() {
        return this[cplExtensibles][this[cpsExtensibleSymbol]];
      }
    }]);

    function CoreObject() {// this.init(...args);

      _classCallCheck(this, CoreObject);

      this._rootConstructor = 'CoreObject';
      flowRuntime_umd.ref(CoreObjectInterface$1).assert(this);
    }

    return CoreObject;
  }(), _class3.Module = NS, _class3.CORE_OBJECT = CORE_OBJECT, _temp)) || _class2);
  Reflect.defineProperty(CoreObject, 'name', {
    get: function get() {
      return 'CoreObject';
    }
  });
  Reflect.defineProperty(CoreObject, cplExtensibles, {
    enumerable: false,
    configurable: false,
    value: {}
  });
  Reflect.defineProperty(CoreObject, cpoMetaObject, {
    enumerable: false,
    configurable: true,
    value: MetaObject$1["new"](CoreObject)
  });
  Reflect.defineProperty(CoreObject, cpsExtensibleSymbol, {
    enumerable: false,
    configurable: true,
    value: Symbol('extensibleSymbol')
  });
  CoreObject[cplExtensibles][CoreObject[cpsExtensibleSymbol]] = true;
  _class$1 = CoreObject;
  return CoreObject;
});

var __filename$1 = '/es/Proto.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var hasProp$2 = {}.hasOwnProperty;
var _class$2 = null;
var Proto = (function (NS) {
  var _dec, _class2, _class3, _init, _init2, _class4, _temp;

  if (_class$2 !== null) {
    return _class$2;
  }

  var _NS$prototype = NS.prototype,
      _ = _NS$prototype._,
      PROTO = _NS$prototype.PROTO,
      CLASS_KEYS = _NS$prototype.CLASS_KEYS,
      INSTANCE_KEYS = _NS$prototype.INSTANCE_KEYS,
      meta = _NS$prototype.meta,
      nameBy = _NS$prototype.nameBy,
      assert = _NS$prototype.assert;
  var CoreObject$1 = CoreObject(NS);
  var Proto = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Proto", flowRuntime_umd["extends"](CoreObject$1), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("PROTO", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("name", flowRuntime_umd.any()), flowRuntime_umd.param("object", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.Class(flowRuntime_umd.existential())))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("acClass", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string()))))), flowRuntime_umd.staticMethod("clone", flowRuntime_umd.param("klass", flowRuntime_umd.any()), flowRuntime_umd.param("options", flowRuntime_umd.any())))), _dec(_class2 = (_class3 = (_temp = _class4 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Proto, _CoreObject);

    var _super = _createSuper(Proto);

    function Proto() {
      _classCallCheck(this, Proto);

      return _super.apply(this, arguments);
    }

    _createClass(Proto, null, [{
      key: "new",
      value: function _new(name, object) {
        var vClass = this.clone(CoreObject$1, {
          name: name,
          parent: CoreObject$1
        });
        var reserved_words = Object.keys(CoreObject$1);
        var ClassMethods = object.ClassMethods;

        for (var c_key in ClassMethods) {
          if (!hasProp$2.call(ClassMethods, c_key)) continue;

          if (!_.includes(reserved_words, c_key)) {
            vClass[c_key] = ClassMethods[c_key];
          }
        }

        var InstanceMethods = object.InstanceMethods;

        for (var i_key in InstanceMethods) {
          if (!hasProp$2.call(InstanceMethods, i_key)) continue;

          if (!_.includes(INSTANCE_KEYS, i_key)) {
            vClass.prototype[i_key] = InstanceMethods[i_key];
          }
        }

        if (object.Module != null) {
          vClass.Module = object.Module;
        }

        Reflect.setPrototypeOf(vClass.prototype, new CoreObject$1());
        return vClass;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var _acModuleType, _replicaType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string()));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("Promise", flowRuntime_umd.Class(flowRuntime_umd.existential()))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);
                  assert(replica != null, "Replica cann`t be empty");
                  assert(replica["class"] != null, "Replica type is required");
                  assert((replica != null ? replica.type : void 0) === 'class', "Replica type isn`t `class`. It is `".concat(replica.type, "`"));
                  return _context.abrupt("return", _returnType.assert(acModule.prototype[replica["class"]]));

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(acClass) {
          var _acClassType, _returnType2, replica;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _acClassType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())), flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("class", flowRuntime_umd.string())))));
                  flowRuntime_umd.param("acClass", _acClassType).assert(acClass);
                  assert(acClass != null, "Argument cann`t be empty");
                  replica = {
                    type: 'class',
                    "class": acClass.name
                  };
                  return _context2.abrupt("return", _returnType2.assert(replica));

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "clone",
      value: function clone(klass) {
        var _dec2, _class5;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        assert(_.isFunction(klass), 'Not a constructor function');
        var SuperClass = Reflect.getPrototypeOf(klass);
        var definedParent = options.parent;
        var parent = definedParent || SuperClass || klass.prototype.constructor;
        var clone = (_dec2 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ClonedClass", flowRuntime_umd["extends"](klass))), _dec2(_class5 = /*#__PURE__*/function (_klass) {
          _inherits(ClonedClass, _klass);

          var _super2 = _createSuper(ClonedClass);

          function ClonedClass() {
            _classCallCheck(this, ClonedClass);

            return _super2.apply(this, arguments);
          }

          return ClonedClass;
        }(klass)) || _class5);
        Reflect.defineProperty(clone, 'name', {
          value: options.name || klass.name
        });

        if (options.initialize) {
          if (typeof clone.initialize === "function") {
            clone.initialize(); // TODO: под вопросом
          }
        }

        return clone;
      }
    }]);

    return Proto;
  }(CoreObject$1), _class4.__filename = __filename$1, _class4.object = {}, _class4.PROTO = PROTO, _temp), (_applyDecoratedDescriptor(_class3, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class3, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class3), _applyDecoratedDescriptor(_class3, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class3, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class3)), _class3)) || _class2);
  Proto.constructor = Proto; // Reflect.defineProperty(Proto, 'name', {get: ()=> 'Proto'});

  _class$2 = Proto;
  return Proto;
});

var __filename$2 = '/es/Module.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
// const indexOf = [].indexOf;
var slice$2 = [].slice;
var _class$3 = null;
var Module = (function (NS) {
  var _class2, _init, _init2, _class3, _temp;

  if (_class$3 !== null) {
    return _class$3;
  }

  var _NS$prototype = NS.prototype,
      PRODUCTION = _NS$prototype.PRODUCTION,
      DEVELOPMENT = _NS$prototype.DEVELOPMENT,
      MODULE = _NS$prototype.MODULE,
      MetaObject = _NS$prototype.MetaObject,
      _ = _NS$prototype._,
      inflect = _NS$prototype.inflect,
      assert = _NS$prototype.assert,
      meta = _NS$prototype.meta,
      nameBy = _NS$prototype.nameBy;
  var CoreObject$1 = CoreObject(NS);
  var cphFilesList = Symbol["for"]('~filesList');
  var cphTemplatesList = Symbol["for"]('~templatesList');
  var cphMigrationsMap = Symbol["for"]('~migrationsMap');
  var cphUtilsMap = Symbol["for"]('~utilsMap');
  var cpoUtils = Symbol["for"]('~utils'); // const cpoUtilsMeta = Symbol.for('~utilsMeta');

  var cpmUtilsHandler = Symbol["for"]('~utilsHandler');
  var cpmHandler = Symbol["for"]('~handler');
  var cphPathMap = Symbol["for"]('~pathMap');
  var cpoNamespace = Symbol["for"]('~namespace');
  var Module = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Module, _CoreObject);

    var _super = _createSuper(Module);

    _createClass(Module, [{
      key: "Utils",
      // static set Utils(ahConfig) {
      //   for (const vsKey in ahConfig) {
      //     if (!hasProp.call(ahConfig, vsKey)) continue;
      //     const vValue = ahConfig[vsKey];
      //     if (!this.Module[vsKey]) {
      //       this.metaObject.addMetaData('utilities', vsKey, vValue);
      //       Reflect.defineProperty(this, vsKey, {
      //         configurable: false,
      //         enumerable: true,
      //         writable: false,
      //         value: vValue
      //       });
      //     }
      //   }
      // }
      get: function get() {
        var MClass = this.constructor;
        return MClass[cpoUtils] != null ? MClass[cpoUtils] : MClass[cpoUtils] = new Proxy(MClass, MClass[cpmUtilsHandler]);
      }
    }], [{
      key: "new",
      value: function _new() {
        assert.fail('new method unsupported for Module');
      }
    }, {
      key: "resolve",
      value: function resolve(name) {
        return [[], true];
      }
    }, {
      key: "require",
      value: function require(path) {
        return null;
      }
    }, {
      key: "defineMixin",
      value: function defineMixin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        assert(args.length > 0, 'defineMixin() method required two arguments');
        var filename = args[0],
            vmFunction = args[1];

        var _slice$call$0$split = slice$2.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split2 = _slicedToArray(_slice$call$0$split, 1),
            mixinName = _slice$call$0$split2[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: mixinName
        });
        this.metaObject.addMetaData('constants', mixinName, vmFunction);
        Reflect.defineProperty(this.prototype, mixinName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('mixins', mixinName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "definePatch",
      value: function definePatch() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        assert(args.length > 0, 'definePatch() method required two arguments');
        var filename = args[0],
            vmFunction = args[1];

        var _slice$call$0$split3 = slice$2.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split4 = _slicedToArray(_slice$call$0$split3, 1),
            patchName = _slice$call$0$split4[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: patchName
        });
        this.metaObject.addMetaData('constants', patchName, vmFunction);
        Reflect.defineProperty(this.prototype, patchName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('patches', patchName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "defineUtil",
      value: function defineUtil(filename, vmFunction) {
        var _slice$call$0$split5 = slice$2.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split6 = _slicedToArray(_slice$call$0$split5, 1),
            utilName = _slice$call$0$split6[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: utilName
        });
        Reflect.defineProperty(this.prototype, utilName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('utilities', utilName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "constants",
      get: function get() {
        return this.metaObject.getGroup('constants', false);
      }
    }, {
      key: "utilities",
      get: function get() {
        return this.metaObject.getGroup('utilities', false); // return this[cpoUtilsMeta] != null ? this[cpoUtilsMeta] : this[cpoUtilsMeta] = this.metaObject.getGroup('utilities', false);
      }
    }, {
      key: "decorators",
      get: function get() {
        return this.metaObject.getGroup('decorators', false);
      }
    }, {
      key: "mixins",
      get: function get() {
        return this.metaObject.getGroup('mixins', false);
      }
    }, {
      key: "plugins",
      get: function get() {
        return this.metaObject.getGroup('plugins', false);
      }
    }, {
      key: "patches",
      get: function get() {
        return this.metaObject.getGroup('patches', false);
      }
    }, {
      key: "environment",
      get: function get() {
        return this.Module.prototype.ENV;
      }
    }, {
      key: "NS",
      get: function get() {
        var MClass = this;
        return MClass[cpoNamespace] != null ? MClass[cpoNamespace] : MClass[cpoNamespace] = new Proxy(MClass, MClass[cpmHandler]);
      }
    }]);

    function Module() {
      var _this;

      _classCallCheck(this, Module);

      _this = _super.call(this);

      if (_assertThisInitialized(_this) instanceof Module) {
        assert.fail('new operator unsupported');
      }

      return _this;
    }

    return Module;
  }(CoreObject$1), _class3.__filename = __filename$2, _class3.object = {}, _class3.MODULE = MODULE, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2)), _class2);
  Reflect.defineProperty(Module, cphFilesList, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphTemplatesList, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphMigrationsMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphUtilsMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpoUtils, {
    enumerable: true,
    writable: true,
    value: null
  }); // Reflect.defineProperty(Module, cpoUtilsMeta, {
  //   enumerable: true,
  //   writable: true,
  //   value: null
  // });

  Reflect.defineProperty(Module, cphPathMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpoNamespace, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpmUtilsHandler, {
    enumerable: true,
    value: {
      // ownKeys: (aoTarget) =>
      //   Reflect.ownKeys(aoTarget.utilities),
      // has: (aoTarget, asName) =>
      //   indexOf.call(aoTarget.utilities, asName) >= 0,
      // set: (aoTarget, asName, aValue, aoReceiver) => {
      //   if (!Reflect.get(aoTarget, asName)) {
      //     aoTarget.metaObject.addMetaData('utilities', asName, aValue);
      //     Reflect.defineProperty(aoTarget, asName, {
      //       configurable: false,
      //       enumerable: true,
      //       writable: false,
      //       value: aValue
      //     });
      //     return aValue
      //   }
      // },
      get: function get(aoTarget, asName) {
        if (!Reflect.get(aoTarget.prototype, asName)) {
          // if (aoTarget[cphUtilsMap] == null) {
          //   const utilsMap = {};
          //   for (const vsName in aoTarget[cphPathMap]) {
          //     const vsPath = aoTarget[cphPathMap][vsName];
          //     // console.log('<><><><> Utils.get', vsName, vsPath);
          //     if (_.includes(vsPath, '/utils/')) {
          //       utilsMap[vsName] = vsPath;
          //     }
          //   }
          //   aoTarget[cphUtilsMap] = utilsMap;
          // }
          var vsPath = aoTarget[cphUtilsMap][asName];

          if (vsPath) {
            aoTarget.resolve(vsPath);
          }
        }

        return Reflect.get(aoTarget.prototype, asName);
      }
    }
  });
  Reflect.defineProperty(Module, cpmHandler, {
    enumerable: true,
    value: {
      get: function get(aoTarget, asName) {
        if (!Reflect.get(aoTarget.prototype, asName)) {
          assert(aoTarget[cphPathMap] != null, "The decorator `@resolver(require, name => require(name))` should be added above ".concat(aoTarget.name, " declaration"));
          var vsPath = aoTarget[cphPathMap][asName];
          assert(vsPath != null, "Class/util ".concat(asName, " should be defined on ").concat(aoTarget.name, " directly or use `@loadFiles` decorator above ").concat(aoTarget.name, " declaration")); // console.log('>?>?>?> Module.NS.get before aoTarget.resolve', vsPath);

          if (vsPath) {
            aoTarget.resolve(vsPath);
          }
        } // console.log('>?>?>?> Module.NS.get', aoTarget.name, asName, [Reflect.get(aoTarget.prototype, asName)]);


        return Reflect.get(aoTarget.prototype, asName);
      }
    }
  });
  Reflect.defineProperty(Module.prototype, 'MetaObject', {
    configurable: false,
    enumerable: true,
    writable: false,
    value: MetaObject
  });
  _class$3 = Module;
  return Module;
});

var __filename$3 = '/es/statemachine/HookedObject.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var HookedObjectInterface = flowRuntime_umd.type("HookedObjectInterface", flowRuntime_umd.object(flowRuntime_umd.property("name", flowRuntime_umd.string())));

var HookedObjectInterface$1 = flowRuntime_umd.tdz(function () {
  return HookedObjectInterface;
});
var HookedObject = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var HookedObject = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("HookedObject", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("_anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.method("_doHook", flowRuntime_umd.param("asHook", flowRuntime_umd.any()), flowRuntime_umd.param("alArguments", flowRuntime_umd.any()), flowRuntime_umd.param("asErrorMessage", flowRuntime_umd.any()), flowRuntime_umd.param("aDefaultValue", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.ref("object")), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(HookedObject, _CoreObject);

    var _super = _createSuper(HookedObject);

    _createClass(HookedObject, [{
      key: "_doHook",
      value: function () {
        var _doHook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asHook, alArguments, asErrorMessage, aDefaultValue) {
          var _returnType, anchor;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                  anchor = this._anchor || this;

                  if (!(asHook != null)) {
                    _context.next = 27;
                    break;
                  }

                  if (!_.isFunction(anchor[asHook])) {
                    _context.next = 11;
                    break;
                  }

                  _context.t0 = _returnType;
                  _context.next = 7;
                  return anchor[asHook].apply(anchor, _toConsumableArray(alArguments));

                case 7:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 11:
                  if (!_.isString(anchor[asHook])) {
                    _context.next = 24;
                    break;
                  }

                  _context.t2 = _returnType;

                  if (!(typeof anchor.emit === "function")) {
                    _context.next = 19;
                    break;
                  }

                  _context.next = 16;
                  return anchor.emit.apply(anchor, [anchor[asHook]].concat(_toConsumableArray(alArguments)));

                case 16:
                  _context.t3 = _context.sent;
                  _context.next = 20;
                  break;

                case 19:
                  _context.t3 = undefined;

                case 20:
                  _context.t4 = _context.t3;
                  return _context.abrupt("return", _context.t2.assert.call(_context.t2, _context.t4));

                case 24:
                  throw new Error(asErrorMessage);

                case 25:
                  _context.next = 32;
                  break;

                case 27:
                  _context.t5 = _returnType;
                  _context.next = 30;
                  return aDefaultValue;

                case 30:
                  _context.t6 = _context.sent;
                  return _context.abrupt("return", _context.t5.assert.call(_context.t5, _context.t6));

                case 32:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _doHook(_x, _x2, _x3, _x4) {
          return _doHook2.apply(this, arguments);
        }

        return _doHook;
      }()
    }]);

    function HookedObject(name, anchor) {
      var _this;

      _classCallCheck(this, HookedObject);

      var _nameType = flowRuntime_umd.string();

      var _anchorType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

      flowRuntime_umd.param("name", _nameType).assert(name);
      flowRuntime_umd.param("anchor", _anchorType).assert(anchor);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_anchor", _descriptor2, _assertThisInitialized(_this));

      _this.name = name;

      if (anchor != null) {
        _this._anchor = anchor;
      }

      flowRuntime_umd.ref(HookedObjectInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return HookedObject;
  }(CoreObject), _class3.__filename = __filename$3, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_anchor", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_doHook", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_doHook"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$4 = '/es/statemachine/State.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var TransitionInterface = flowRuntime_umd.type("TransitionInterface", flowRuntime_umd.object(flowRuntime_umd.property("testGuard", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testIf", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testUnless", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doSuccess", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

// This file is part of LeanES.
var TransitionInterface$1 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var EventInterface = flowRuntime_umd.tdz(function () {
  return EventInterface$1;
});
var StateInterface = flowRuntime_umd.type("StateInterface", function (StateInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("initial", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("getEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(EventInterface))))))), flowRuntime_umd.property("getEvent", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(EventInterface))))), flowRuntime_umd.property("defineTransition", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("aoTarget", StateInterface), flowRuntime_umd.param("aoTransition", flowRuntime_umd.ref(TransitionInterface$1)), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(EventInterface)))), flowRuntime_umd.property("removeTransition", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("doBeforeEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBeforeExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("send", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

// This file is part of LeanES.
var StateInterface$1 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var TransitionInterface$2 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var EventInterface$1 = flowRuntime_umd.type("EventInterface", flowRuntime_umd.object(flowRuntime_umd.property("transition", flowRuntime_umd.ref(TransitionInterface$2)), flowRuntime_umd.property("target", flowRuntime_umd.ref(StateInterface$1)), flowRuntime_umd.property("testGuard", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testIf", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testUnless", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBefore", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doSuccess", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doError", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

// This file is part of LeanES.
var TransitionInterface$3 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var StateInterface$2 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var StateMachineInterface = flowRuntime_umd.type("StateMachineInterface", flowRuntime_umd.object(flowRuntime_umd.property("currentState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$2))), flowRuntime_umd.property("initialState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$2))), flowRuntime_umd.property("states", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(StateInterface$2)))), flowRuntime_umd.property("doBeforeReset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterReset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBeforeAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterAllTransitions", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doErrorOnAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorUpdateState", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorRestoreState", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorSave", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("registerState", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(StateInterface$2)))), flowRuntime_umd.property("removeState", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerEvent", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("alDepartures", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.param("asTarget", flowRuntime_umd.string()), flowRuntime_umd.param("ahEventConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("ahTransitionConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("reset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("send", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("transitionTo", flowRuntime_umd["function"](flowRuntime_umd.param("nextState", flowRuntime_umd.ref(StateInterface$2)), flowRuntime_umd.param("transition", flowRuntime_umd.ref(TransitionInterface$3)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("beforeAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("afterAllTransitions", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("afterAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("errorOnAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorUpdateState", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorSave", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorRestoreState", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("state", flowRuntime_umd["function"](flowRuntime_umd.param("asState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("event", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd["function"]())), flowRuntime_umd.param("amTransitionInitializer", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("transition", flowRuntime_umd["function"](flowRuntime_umd.param("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("nextState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var splice = [].splice;
var State = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var State = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("State", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_stateMachine", flowRuntime_umd.nullable(flowRuntime_umd.ref("StateMachineInterface"))), flowRuntime_umd.property("_events", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface"))))), flowRuntime_umd.property("_beforeEnter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_enter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterEnter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_beforeExit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_exit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterExit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("initial", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("getEvents", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")))))), flowRuntime_umd.method("getEvent", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")))), flowRuntime_umd.method("defineTransition", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("aoTarget", flowRuntime_umd.ref("StateInterface")), flowRuntime_umd.param("aoTransition", flowRuntime_umd.ref("TransitionInterface")), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("EventInterface"))), flowRuntime_umd.method("removeTransition", flowRuntime_umd.param("asEvent", flowRuntime_umd.string())), flowRuntime_umd.method("doBeforeEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBeforeExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("send", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoStateMachine", flowRuntime_umd.ref("StateMachineInterface")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref("StateMachineInterface"))), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface"))))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec10 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec11 = flowRuntime_umd.decorate(flowRuntime_umd["boolean"]()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(State, _HookedObject);

    var _super = _createSuper(State);

    _createClass(State, [{
      key: "getEvents",
      value: function getEvents() {
        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")))));

        return _returnType8.assert(this._events);
      }
    }, {
      key: "getEvent",
      value: function getEvent(asEvent) {
        var _asEventType = flowRuntime_umd.string();

        var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")));

        flowRuntime_umd.param("asEvent", _asEventType).assert(asEvent);
        return _returnType9.assert(this._events[asEvent]);
      }
    }, {
      key: "defineTransition",
      value: function defineTransition(asEvent, aoTarget, aoTransition) {
        var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        var _asEventType2 = flowRuntime_umd.string();

        var _aoTargetType = flowRuntime_umd.ref("StateInterface");

        var _aoTransitionType = flowRuntime_umd.ref("TransitionInterface");

        var _configType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.ref("EventInterface"));

        flowRuntime_umd.param("asEvent", _asEventType2).assert(asEvent);
        flowRuntime_umd.param("aoTarget", _aoTargetType).assert(aoTarget);
        flowRuntime_umd.param("aoTransition", _aoTransitionType).assert(aoTransition);
        flowRuntime_umd.param("config", _configType).assert(config);

        if (this._events[asEvent] == null) {
          var vpoAnchor = this._anchor;

          var vhEventConfig = _.assign({}, config, {
            target: aoTarget,
            transition: aoTransition
          });

          var vsEventName = "".concat(this.name, "_").concat(asEvent);
          this._events[asEvent] = this.Module.NS.Event["new"](vsEventName, vpoAnchor, vhEventConfig);
        }

        return _returnType10.assert(this._events[asEvent]);
      }
    }, {
      key: "removeTransition",
      value: function removeTransition(asEvent) {
        var _asEventType3 = flowRuntime_umd.string();

        flowRuntime_umd.param("asEvent", _asEventType3).assert(asEvent);

        if (this._events[asEvent] != null) {
          delete this._events[asEvent];
        }
      }
    }, {
      key: "doBeforeEnter",
      value: function () {
        var _doBeforeEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType,
              _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.t0 = _returnType;
                  _context.next = 5;
                  return this._doHook(this._beforeEnter, args, 'Specified "beforeEnter" not found', args);

                case 5:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function doBeforeEnter() {
          return _doBeforeEnter.apply(this, arguments);
        }

        return doBeforeEnter;
      }()
    }, {
      key: "doEnter",
      value: function () {
        var _doEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _returnType2,
              _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.t0 = _returnType2;
                  _context2.next = 5;
                  return this._doHook(this._enter, args, 'Specified "enter" not found', args);

                case 5:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function doEnter() {
          return _doEnter.apply(this, arguments);
        }

        return doEnter;
      }()
    }, {
      key: "doAfterEnter",
      value: function () {
        var _doAfterEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _returnType3,
              _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.t0 = _returnType3;
                  _context3.next = 5;
                  return this._doHook(this._afterEnter, args, 'Specified "afterEnter" not found', args);

                case 5:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function doAfterEnter() {
          return _doAfterEnter.apply(this, arguments);
        }

        return doAfterEnter;
      }()
    }, {
      key: "doBeforeExit",
      value: function () {
        var _doBeforeExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _returnType4,
              _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.t0 = _returnType4;
                  _context4.next = 5;
                  return this._doHook(this._beforeExit, args, 'Specified "beforeExit" not found', args);

                case 5:
                  _context4.t1 = _context4.sent;
                  return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doBeforeExit() {
          return _doBeforeExit.apply(this, arguments);
        }

        return doBeforeExit;
      }()
    }, {
      key: "doExit",
      value: function () {
        var _doExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _returnType5,
              _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.t0 = _returnType5;
                  _context5.next = 5;
                  return this._doHook(this._exit, args, 'Specified "exit" not found', args);

                case 5:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doExit() {
          return _doExit.apply(this, arguments);
        }

        return doExit;
      }()
    }, {
      key: "doAfterExit",
      value: function () {
        var _doAfterExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _returnType6,
              _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.t0 = _returnType6;
                  _context6.next = 5;
                  return this._doHook(this._afterExit, args, 'Specified "afterExit" not found', args);

                case 5:
                  _context6.t1 = _context6.sent;
                  return _context6.abrupt("return", _context6.t0.assert.call(_context6.t0, _context6.t1));

                case 7:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doAfterExit() {
          return _doAfterExit.apply(this, arguments);
        }

        return doAfterExit;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(asEvent) {
          var _asEventType4,
              _returnType7,
              oldState,
              event,
              _len7,
              args,
              _key7,
              eventGuard,
              eventIf,
              eventUnless,
              transition,
              transitionGuard,
              transitionIf,
              transitionUnless,
              stateMachine,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _asEventType4 = flowRuntime_umd.string();
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asEvent", _asEventType4).assert(asEvent);
                  oldState = this;
                  event = oldState._events[asEvent];

                  if (!(event != null)) {
                    _context7.next = 49;
                    break;
                  }

                  _context7.prev = 6;

                  for (_len7 = _args7.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                    args[_key7 - 1] = _args7[_key7];
                  }

                  _context7.next = 10;
                  return event.doBefore.apply(event, args);

                case 10:
                  _context7.next = 12;
                  return event.testGuard.apply(event, args);

                case 12:
                  eventGuard = _context7.sent;
                  _context7.next = 15;
                  return event.testIf.apply(event, args);

                case 15:
                  eventIf = _context7.sent;
                  _context7.next = 18;
                  return event.testUnless.apply(event, args);

                case 18:
                  eventUnless = _context7.sent;

                  if (!(eventGuard && eventIf && !eventUnless)) {
                    _context7.next = 40;
                    break;
                  }

                  transition = event.transition;
                  _context7.next = 23;
                  return transition.testGuard.apply(transition, args);

                case 23:
                  transitionGuard = _context7.sent;
                  _context7.next = 26;
                  return transition.testIf.apply(transition, args);

                case 26:
                  transitionIf = _context7.sent;
                  _context7.next = 29;
                  return transition.testUnless.apply(transition, args);

                case 29:
                  transitionUnless = _context7.sent;

                  if (!(transitionGuard && transitionIf && !transitionUnless)) {
                    _context7.next = 38;
                    break;
                  }

                  _context7.next = 33;
                  return oldState.doBeforeExit.apply(oldState, args);

                case 33:
                  _context7.next = 35;
                  return oldState.doExit.apply(oldState, args);

                case 35:
                  stateMachine = oldState._stateMachine;
                  _context7.next = 38;
                  return stateMachine.transitionTo.apply(stateMachine, [event.target, transition].concat(args));

                case 38:
                  _context7.next = 40;
                  return event.doSuccess.apply(event, args);

                case 40:
                  _context7.next = 42;
                  return event.doAfter.apply(event, args);

                case 42:
                  _context7.next = 49;
                  break;

                case 44:
                  _context7.prev = 44;
                  _context7.t0 = _context7["catch"](6);
                  _context7.next = 48;
                  return event.doError(_context7.t0);

                case 48:
                  throw _context7.t0;

                case 49:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this, [[6, 44]]);
        }));

        function send(_x) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }]);

    function State(name, anchor, aoStateMachine) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len8 = arguments.length, args1 = new Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
        args1[_key8 - 3] = arguments[_key8];
      }

      _classCallCheck(this, State);

      var _nameType = flowRuntime_umd.string();

      var _anchorType = flowRuntime_umd.ref("object");

      var _aoStateMachineType = flowRuntime_umd.ref("StateMachineInterface");

      flowRuntime_umd.param("name", _nameType).assert(name);
      flowRuntime_umd.param("anchor", _anchorType).assert(anchor);
      flowRuntime_umd.param("aoStateMachine", _aoStateMachineType).assert(aoStateMachine);
      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === undefined) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_stateMachine", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_events", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeEnter", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_enter", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterEnter", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeExit", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_exit", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterExit", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "initial", _descriptor9, _assertThisInitialized(_this));

      _this._events = {};
      _this._stateMachine = aoStateMachine;
      var _config = config;
      _this._beforeEnter = _config.beforeEnter;
      _this._enter = _config.enter;
      _this._afterEnter = _config.afterEnter;
      _this._beforeExit = _config.beforeExit;
      _this._exit = _config.exit;
      _this._afterExit = _config.afterExit;
      _this.initial = config.initial === true;
      flowRuntime_umd.ref("StateInterface").assert(_assertThisInitialized(_this));
      return _this;
    }

    return State;
  }(HookedObject), _class3.__filename = __filename$4, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_stateMachine", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_events", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_beforeEnter", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_enter", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_afterEnter", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_beforeExit", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_exit", [_dec9, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_afterExit", [_dec10, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "initial", [_dec11, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getEvent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineTransition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineTransition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeTransition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTransition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$5 = '/es/statemachine/Transition.js';

var TransitionInterface$4 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$1 = [].splice;
var Transition = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Transition = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Transition", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_guard", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_if", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_unless", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_after", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_success", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("testGuard", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testIf", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testUnless", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doSuccess", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(Transition, _HookedObject);

    var _super = _createSuper(Transition);

    _createClass(Transition, [{
      key: "testGuard",
      value: function () {
        var _testGuard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType,
              _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.t0 = _returnType;
                  _context.next = 5;
                  return this._doHook(this._guard, args, 'Specified "guard" not found', true);

                case 5:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function testGuard() {
          return _testGuard.apply(this, arguments);
        }

        return testGuard;
      }()
    }, {
      key: "testIf",
      value: function () {
        var _testIf = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _returnType2,
              _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.t0 = _returnType2;
                  _context2.next = 5;
                  return this._doHook(this._if, args, 'Specified "if" not found', true);

                case 5:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function testIf() {
          return _testIf.apply(this, arguments);
        }

        return testIf;
      }()
    }, {
      key: "testUnless",
      value: function () {
        var _testUnless = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _returnType3,
              _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.t0 = _returnType3;
                  _context3.next = 5;
                  return this._doHook(this._unless, args, 'Specified "unless" not found', false);

                case 5:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function testUnless() {
          return _testUnless.apply(this, arguments);
        }

        return testUnless;
      }()
    }, {
      key: "doAfter",
      value: function () {
        var _doAfter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _returnType4,
              _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.t0 = _returnType4;
                  _context4.next = 5;
                  return this._doHook(this._after, args, 'Specified "after" not found', args);

                case 5:
                  _context4.t1 = _context4.sent;
                  return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doAfter() {
          return _doAfter.apply(this, arguments);
        }

        return doAfter;
      }()
    }, {
      key: "doSuccess",
      value: function () {
        var _doSuccess = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _returnType5,
              _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.t0 = _returnType5;
                  _context5.next = 5;
                  return this._doHook(this._success, args, 'Specified "success" not found', args);

                case 5:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doSuccess() {
          return _doSuccess.apply(this, arguments);
        }

        return doSuccess;
      }()
    }]);

    function Transition(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len6 = arguments.length, args1 = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
        args1[_key6 - 2] = arguments[_key6];
      }

      _classCallCheck(this, Transition);

      var _nameType = flowRuntime_umd.string();

      var _anchorType = flowRuntime_umd.ref("object");

      flowRuntime_umd.param("name", _nameType).assert(name);
      flowRuntime_umd.param("anchor", _anchorType).assert(anchor);
      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$1.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === void 0) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_guard", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_if", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_unless", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_after", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_success", _descriptor5, _assertThisInitialized(_this));

      var _config = config;
      _this._guard = _config.guard;
      _this._if = _config["if"];
      _this._unless = _config.unless;
      _this._after = _config.after;
      _this._success = _config.success;
      flowRuntime_umd.ref(TransitionInterface$4).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Transition;
  }(HookedObject), _class3.__filename = __filename$5, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_guard", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_if", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_unless", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_after", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_success", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "testGuard", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testGuard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testIf", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testIf"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testUnless", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testUnless"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSuccess", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doSuccess"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$6 = '/es/statemachine/Event.js';

var StateInterface$3 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var EventInterface$2 = flowRuntime_umd.tdz(function () {
  return EventInterface$1;
});
var TransitionInterface$5 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$2 = [].splice;
var Event = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Event = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Event", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("transition", flowRuntime_umd.ref(TransitionInterface$5)), flowRuntime_umd.property("target", flowRuntime_umd.ref(StateInterface$3)), flowRuntime_umd.property("_guard", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_if", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_unless", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_before", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_after", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_success", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_error", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("testGuard", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testIf", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testUnless", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBefore", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doSuccess", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doError", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.ref(TransitionInterface$5)), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.ref(StateInterface$3)), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec10 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec11 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(Event, _HookedObject);

    var _super = _createSuper(Event);

    _createClass(Event, [{
      key: "testGuard",
      value: function () {
        var _testGuard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType,
              _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.t0 = _returnType;
                  _context.next = 5;
                  return this._doHook(this._guard, args, 'Specified "guard" not found', true);

                case 5:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function testGuard() {
          return _testGuard.apply(this, arguments);
        }

        return testGuard;
      }()
    }, {
      key: "testIf",
      value: function () {
        var _testIf = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _returnType2,
              _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.t0 = _returnType2;
                  _context2.next = 5;
                  return this._doHook(this._if, args, 'Specified "if" not found', true);

                case 5:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function testIf() {
          return _testIf.apply(this, arguments);
        }

        return testIf;
      }()
    }, {
      key: "testUnless",
      value: function () {
        var _testUnless = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _returnType3,
              _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.t0 = _returnType3;
                  _context3.next = 5;
                  return this._doHook(this._unless, args, 'Specified "unless" not found', false);

                case 5:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function testUnless() {
          return _testUnless.apply(this, arguments);
        }

        return testUnless;
      }()
    }, {
      key: "doBefore",
      value: function () {
        var _doBefore = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _returnType4,
              _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.t0 = _returnType4;
                  _context4.next = 5;
                  return this._doHook(this._before, args, 'Specified "before" not found', args);

                case 5:
                  _context4.t1 = _context4.sent;
                  return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doBefore() {
          return _doBefore.apply(this, arguments);
        }

        return doBefore;
      }()
    }, {
      key: "doAfter",
      value: function () {
        var _doAfter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _returnType5,
              _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.t0 = _returnType5;
                  _context5.next = 5;
                  return this._doHook(this._after, args, 'Specified "after" not found', args);

                case 5:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doAfter() {
          return _doAfter.apply(this, arguments);
        }

        return doAfter;
      }()
    }, {
      key: "doSuccess",
      value: function () {
        var _doSuccess = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _returnType6,
              _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.t0 = _returnType6;
                  _context6.next = 5;
                  return this._doHook(this._success, args, 'Specified "success" not found', args);

                case 5:
                  _context6.t1 = _context6.sent;
                  return _context6.abrupt("return", _context6.t0.assert.call(_context6.t0, _context6.t1));

                case 7:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doSuccess() {
          return _doSuccess.apply(this, arguments);
        }

        return doSuccess;
      }()
    }, {
      key: "doError",
      value: function () {
        var _doError = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _returnType7,
              _len7,
              args,
              _key7,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len7 = _args7.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = _args7[_key7];
                  }

                  _context7.t0 = _returnType7;
                  _context7.next = 5;
                  return this._doHook(this._error, args, 'Specified "error" not found', args);

                case 5:
                  _context7.t1 = _context7.sent;
                  return _context7.abrupt("return", _context7.t0.assert.call(_context7.t0, _context7.t1));

                case 7:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function doError() {
          return _doError.apply(this, arguments);
        }

        return doError;
      }()
    }]);

    function Event(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len8 = arguments.length, args1 = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
        args1[_key8 - 2] = arguments[_key8];
      }

      _classCallCheck(this, Event);

      var _nameType = flowRuntime_umd.string();

      var _anchorType = flowRuntime_umd.ref("object");

      flowRuntime_umd.param("name", _nameType).assert(name);
      flowRuntime_umd.param("anchor", _anchorType).assert(anchor);
      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$2.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === undefined) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "transition", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "target", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_guard", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_if", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_unless", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_before", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_after", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_success", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_error", _descriptor9, _assertThisInitialized(_this));

      var _config = config;
      _this.transition = _config.transition;
      _this.target = _config.target;
      _this._guard = _config.guard;
      _this._if = _config["if"];
      _this._unless = _config.unless;
      _this._before = _config.before;
      _this._success = _config.success;
      _this._after = _config.after;
      _this._error = _config.error;
      flowRuntime_umd.ref(EventInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Event;
  }(HookedObject), _class3.__filename = __filename$6, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "transition", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_guard", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_if", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_unless", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_before", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_after", [_dec9, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_success", [_dec10, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_error", [_dec11, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "testGuard", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testGuard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testIf", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testIf"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testUnless", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testUnless"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBefore", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBefore"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSuccess", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doSuccess"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doError", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doError"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$7 = '/es/statemachine/StateMachine.js';

var StateMachineInterface$1 = flowRuntime_umd.tdz(function () {
  return StateMachineInterface;
});
var StateInterface$4 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var TransitionInterface$6 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$3 = [].splice;
var StateMachine = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var StateMachine = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("StateMachine", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("currentState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.property("initialState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.property("states", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))))), flowRuntime_umd.property("_transitionConfigs", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("nextState", flowRuntime_umd.string()), flowRuntime_umd.property("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))))), flowRuntime_umd.property("_beforeReset", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterReset", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_beforeAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterAllTransitions", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_errorOnAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorUpdateState", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorRestoreState", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorSave", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("doBeforeReset", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterReset", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBeforeAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterAllTransitions", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doErrorOnAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorUpdateState", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorRestoreState", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorSave", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("registerState", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.method("removeState", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("registerEvent", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("alDepartures", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.param("asTarget", flowRuntime_umd.string()), flowRuntime_umd.param("ahEventConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("ahTransitionConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("reset", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("send", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("transitionTo", flowRuntime_umd.param("nextState", flowRuntime_umd.ref(StateInterface$4)), flowRuntime_umd.param("transition", flowRuntime_umd.ref(TransitionInterface$6)), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("beforeAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("afterAllTransitions", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("afterAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("errorOnAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorUpdateState", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorSave", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorRestoreState", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("state", flowRuntime_umd.param("asState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("event", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd["function"]())), flowRuntime_umd.param("amTransitionInitializer", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("transition", flowRuntime_umd.param("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("nextState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))))), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("nextState", flowRuntime_umd.string()), flowRuntime_umd.property("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))))), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec10 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec11 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec12 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec13 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec14 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec15 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(StateMachine, _HookedObject);

    var _super = _createSuper(StateMachine);

    _createClass(StateMachine, [{
      key: "doBeforeReset",
      value: function () {
        var _doBeforeReset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType,
              _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.t0 = _returnType;
                  _context.next = 5;
                  return this._doHook(this._beforeReset, args, 'Specified "beforeReset" not found', args);

                case 5:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function doBeforeReset() {
          return _doBeforeReset.apply(this, arguments);
        }

        return doBeforeReset;
      }()
    }, {
      key: "doAfterReset",
      value: function () {
        var _doAfterReset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _returnType2,
              _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.t0 = _returnType2;
                  _context2.next = 5;
                  return this._doHook(this._afterReset, args, 'Specified "afterReset" not found', args);

                case 5:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function doAfterReset() {
          return _doAfterReset.apply(this, arguments);
        }

        return doAfterReset;
      }()
    }, {
      key: "doBeforeAllEvents",
      value: function () {
        var _doBeforeAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _returnType3,
              _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.t0 = _returnType3;
                  _context3.next = 5;
                  return this._doHook(this._beforeAllEvents, args, 'Specified "beforeAllEvents" not found', args);

                case 5:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function doBeforeAllEvents() {
          return _doBeforeAllEvents.apply(this, arguments);
        }

        return doBeforeAllEvents;
      }()
    }, {
      key: "doAfterAllEvents",
      value: function () {
        var _doAfterAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _returnType4,
              _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.t0 = _returnType4;
                  _context4.next = 5;
                  return this._doHook(this._afterAllEvents, args, 'Specified "afterAllEvents" not found', args);

                case 5:
                  _context4.t1 = _context4.sent;
                  return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doAfterAllEvents() {
          return _doAfterAllEvents.apply(this, arguments);
        }

        return doAfterAllEvents;
      }()
    }, {
      key: "doAfterAllTransitions",
      value: function () {
        var _doAfterAllTransitions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _returnType5,
              _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.t0 = _returnType5;
                  _context5.next = 5;
                  return this._doHook(this._afterAllTransitions, args, 'Specified "afterAllTransitions" not found', args);

                case 5:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doAfterAllTransitions() {
          return _doAfterAllTransitions.apply(this, arguments);
        }

        return doAfterAllTransitions;
      }()
    }, {
      key: "doErrorOnAllEvents",
      value: function () {
        var _doErrorOnAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _returnType6,
              _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.t0 = _returnType6;
                  _context6.next = 5;
                  return this._doHook(this._errorOnAllEvents, args, 'Specified "errorOnAllEvents" not found', args);

                case 5:
                  _context6.t1 = _context6.sent;
                  return _context6.abrupt("return", _context6.t0.assert.call(_context6.t0, _context6.t1));

                case 7:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doErrorOnAllEvents() {
          return _doErrorOnAllEvents.apply(this, arguments);
        }

        return doErrorOnAllEvents;
      }()
    }, {
      key: "doWithAnchorUpdateState",
      value: function () {
        var _doWithAnchorUpdateState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _returnType7,
              _len7,
              args,
              _key7,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len7 = _args7.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = _args7[_key7];
                  }

                  _context7.t0 = _returnType7;
                  _context7.next = 5;
                  return this._doHook(this._withAnchorUpdateState, args, 'Specified "withAnchorUpdateState" not found', args);

                case 5:
                  _context7.t1 = _context7.sent;
                  return _context7.abrupt("return", _context7.t0.assert.call(_context7.t0, _context7.t1));

                case 7:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function doWithAnchorUpdateState() {
          return _doWithAnchorUpdateState.apply(this, arguments);
        }

        return doWithAnchorUpdateState;
      }()
    }, {
      key: "doWithAnchorRestoreState",
      value: function () {
        var _doWithAnchorRestoreState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
          var _returnType8,
              _len8,
              args,
              _key8,
              _args8 = arguments;

          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len8 = _args8.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                    args[_key8] = _args8[_key8];
                  }

                  _context8.t0 = _returnType8;
                  _context8.next = 5;
                  return this._doHook(this._withAnchorRestoreState, args, 'Specified "withAnchorRestoreState" not found', args);

                case 5:
                  _context8.t1 = _context8.sent;
                  return _context8.abrupt("return", _context8.t0.assert.call(_context8.t0, _context8.t1));

                case 7:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function doWithAnchorRestoreState() {
          return _doWithAnchorRestoreState.apply(this, arguments);
        }

        return doWithAnchorRestoreState;
      }()
    }, {
      key: "doWithAnchorSave",
      value: function () {
        var _doWithAnchorSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
          var _returnType9,
              _len9,
              args,
              _key9,
              _args9 = arguments;

          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

                  for (_len9 = _args9.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                    args[_key9] = _args9[_key9];
                  }

                  _context9.t0 = _returnType9;
                  _context9.next = 5;
                  return this._doHook(this._withAnchorSave, args, 'Specified "withAnchorSave" not found', args);

                case 5:
                  _context9.t1 = _context9.sent;
                  return _context9.abrupt("return", _context9.t0.assert.call(_context9.t0, _context9.t1));

                case 7:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function doWithAnchorSave() {
          return _doWithAnchorSave.apply(this, arguments);
        }

        return doWithAnchorSave;
      }()
    }, {
      key: "registerState",
      value: function registerState(name) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _nameType = flowRuntime_umd.string();

        var _configType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.ref(StateInterface$4));

        flowRuntime_umd.param("name", _nameType).assert(name);
        flowRuntime_umd.param("config", _configType).assert(config);

        if (this.states[name] != null) {
          throw new Error("State with specified name ".concat(name, " is already registered"));
        }

        var vpoAnchor = this._anchor;
        var State = this.Module.NS.State;
        var state = State["new"](name, vpoAnchor, this, config);
        this.states[name] = state;

        if (state.initial) {
          this.initialState = state;
        }

        return _returnType13.assert(state);
      }
    }, {
      key: "removeState",
      value: function removeState(name) {
        var _nameType2 = flowRuntime_umd.string();

        var _returnType14 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("name", _nameType2).assert(name);
        var removedState = this.states[name];

        if (removedState != null) {
          delete this.states[name];

          if (this.initialState === removedState) {
            this.initialState = null;
          }

          if (this.currentState === removedState) {
            this.currentState = null;
          }

          return _returnType14.assert(true);
        }

        return _returnType14.assert(false);
      }
    }, {
      key: "registerEvent",
      value: function registerEvent(asEvent, alDepartures, asTarget) {
        var ahEventConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var ahTransitionConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        var _asEventType = flowRuntime_umd.string();

        var _alDeparturesType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()));

        var _asTargetType = flowRuntime_umd.string();

        var _ahEventConfigType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _ahTransitionConfigType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("asEvent", _asEventType).assert(asEvent);
        flowRuntime_umd.param("alDepartures", _alDeparturesType).assert(alDepartures);
        flowRuntime_umd.param("asTarget", _asTargetType).assert(asTarget);
        flowRuntime_umd.param("ahEventConfig", _ahEventConfigType).assert(ahEventConfig);
        flowRuntime_umd.param("ahTransitionConfig", _ahTransitionConfigType).assert(ahTransitionConfig);

        var vlDepartues = _.castArray(alDepartures);

        var voNextState = this.states[asTarget];
        var voAnchor = this._anchor;
        var Transition = this.Module.NS.Transition;

        var _iterator = _createForOfIteratorHelper(vlDepartues),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var vsState = _step.value;
            var voState = this.states[vsState];

            if (voState != null) {
              var vsTransitionName = "".concat(voState.name, "_").concat(asEvent);
              var voTransition = Transition["new"](vsTransitionName, voAnchor, ahTransitionConfig);
              voState.defineTransition(asEvent, voNextState, voTransition, ahEventConfig);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "reset",
      value: function () {
        var _reset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
          var _returnType10, restoredState;

          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context10.next = 3;
                  return this.doBeforeReset();

                case 3:
                  _context10.next = 5;
                  return this.doWithAnchorRestoreState();

                case 5:
                  _context10.t0 = _context10.sent;
                  restoredState = this.states[_context10.t0];
                  this.currentState = restoredState != null ? restoredState : this.initialState;

                  if (!(this.currentState != null)) {
                    _context10.next = 11;
                    break;
                  }

                  _context10.next = 11;
                  return this.doWithAnchorUpdateState(this.currentState.name);

                case 11:
                  _context10.next = 13;
                  return this.doAfterReset();

                case 13:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function reset() {
          return _reset.apply(this, arguments);
        }

        return reset;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(asEvent) {
          var _asEventType2,
              _returnType11,
              stateMachine,
              _stateMachine$current,
              _len10,
              args,
              _key10,
              _args11 = arguments;

          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _asEventType2 = flowRuntime_umd.string();
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asEvent", _asEventType2).assert(asEvent);
                  stateMachine = this;
                  _context11.prev = 4;

                  for (_len10 = _args11.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
                    args[_key10 - 1] = _args11[_key10];
                  }

                  _context11.next = 8;
                  return stateMachine.doBeforeAllEvents.apply(stateMachine, args);

                case 8:
                  _context11.next = 10;
                  return (_stateMachine$current = stateMachine.currentState).send.apply(_stateMachine$current, [asEvent].concat(args));

                case 10:
                  _context11.next = 12;
                  return stateMachine.doAfterAllEvents.apply(stateMachine, args);

                case 12:
                  _context11.next = 18;
                  break;

                case 14:
                  _context11.prev = 14;
                  _context11.t0 = _context11["catch"](4);
                  _context11.next = 18;
                  return stateMachine.doErrorOnAllEvents(_context11.t0);

                case 18:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this, [[4, 14]]);
        }));

        function send(_x) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "transitionTo",
      value: function () {
        var _transitionTo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(nextState, transition) {
          var _nextStateType,
              _transitionType,
              _returnType12,
              stateMachine,
              oldState,
              _len11,
              args,
              _key11,
              _args12 = arguments;

          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _nextStateType = flowRuntime_umd.ref(StateInterface$4);
                  _transitionType = flowRuntime_umd.ref(TransitionInterface$6);
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("nextState", _nextStateType).assert(nextState);
                  flowRuntime_umd.param("transition", _transitionType).assert(transition);
                  stateMachine = this;
                  oldState = stateMachine.currentState;
                  stateMachine.currentState = nextState;
                  _context12.next = 10;
                  return stateMachine.doWithAnchorUpdateState(nextState.name);

                case 10:
                  for (_len11 = _args12.length, args = new Array(_len11 > 2 ? _len11 - 2 : 0), _key11 = 2; _key11 < _len11; _key11++) {
                    args[_key11 - 2] = _args12[_key11];
                  }

                  _context12.next = 13;
                  return stateMachine.doAfterAllTransitions.apply(stateMachine, args);

                case 13:
                  _context12.next = 15;
                  return transition.doAfter.apply(transition, args);

                case 15:
                  _context12.next = 17;
                  return nextState.doBeforeEnter.apply(nextState, args);

                case 17:
                  _context12.next = 19;
                  return nextState.doEnter.apply(nextState, args);

                case 19:
                  _context12.next = 21;
                  return stateMachine.doWithAnchorSave();

                case 21:
                  _context12.next = 23;
                  return transition.doSuccess.apply(transition, args);

                case 23:
                  _context12.next = 25;
                  return oldState.doAfterExit.apply(oldState, args);

                case 25:
                  _context12.next = 27;
                  return nextState.doAfterEnter.apply(nextState, args);

                case 27:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function transitionTo(_x2, _x3) {
          return _transitionTo.apply(this, arguments);
        }

        return transitionTo;
      }() // Mixin intializer methods

    }, {
      key: "beforeAllEvents",
      value: function beforeAllEvents(asMethod) {
        var _asMethodType = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType).assert(asMethod);
        this._beforeAllEvents = asMethod;
      }
    }, {
      key: "afterAllTransitions",
      value: function afterAllTransitions(asMethod) {
        var _asMethodType2 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType2).assert(asMethod);
        this._afterAllTransitions = asMethod;
      }
    }, {
      key: "afterAllEvents",
      value: function afterAllEvents(asMethod) {
        var _asMethodType3 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType3).assert(asMethod);
        this._afterAllEvents = asMethod;
      }
    }, {
      key: "errorOnAllEvents",
      value: function errorOnAllEvents(asMethod) {
        var _asMethodType4 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType4).assert(asMethod);
        this._errorOnAllEvents = asMethod;
      }
    }, {
      key: "withAnchorUpdateState",
      value: function withAnchorUpdateState(asMethod) {
        var _asMethodType5 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType5).assert(asMethod);
        this._withAnchorUpdateState = asMethod;
      }
    }, {
      key: "withAnchorSave",
      value: function withAnchorSave(asMethod) {
        var _asMethodType6 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType6).assert(asMethod);
        this._withAnchorSave = asMethod;
      }
    }, {
      key: "withAnchorRestoreState",
      value: function withAnchorRestoreState(asMethod) {
        var _asMethodType7 = flowRuntime_umd.string();

        flowRuntime_umd.param("asMethod", _asMethodType7).assert(asMethod);
        this._withAnchorRestoreState = asMethod;
      }
    }, {
      key: "state",
      value: function state(asState, ahConfig) {
        var _asStateType = flowRuntime_umd.string();

        var _ahConfigType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("asState", _asStateType).assert(asState);
        flowRuntime_umd.param("ahConfig", _ahConfigType).assert(ahConfig);
        this.registerState(asState, ahConfig);
      }
    }, {
      key: "event",
      value: function event(asEvent, ahConfig, amTransitionInitializer) {
        var _asEventType3 = flowRuntime_umd.string();

        var _ahConfigType2 = flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd["function"]());

        var _amTransitionInitializerType = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

        flowRuntime_umd.param("asEvent", _asEventType3).assert(asEvent);
        flowRuntime_umd.param("ahConfig", _ahConfigType2).assert(ahConfig);
        flowRuntime_umd.param("amTransitionInitializer", _amTransitionInitializerType).assert(amTransitionInitializer);

        if (_.isFunction(ahConfig)) {
          amTransitionInitializer = _amTransitionInitializerType.assert(ahConfig);
          ahConfig = _ahConfigType2.assert({});
        }

        if (!_.isFunction(amTransitionInitializer)) {
          amTransitionInitializer = _amTransitionInitializerType.assert(function () {});
        }

        this.constructor._transitionConfigs = null;
        amTransitionInitializer.call(this);
        var transitionConfigs = this.constructor._transitionConfigs;
        this.constructor._transitionConfigs = null;

        var _iterator2 = _createForOfIteratorHelper(transitionConfigs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var transitionConf = _step2.value;
            var previousStates = transitionConf.previousStates,
                nextState = transitionConf.nextState,
                transitionConfig = transitionConf.config;
            this.registerEvent(asEvent, previousStates, nextState, ahConfig, transitionConfig);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var voAnchor = this._anchor;

        if (voAnchor != null) {
          var base = voAnchor.constructor;

          if (typeof base.defineSpecialMethods === "function") {
            base.defineSpecialMethods(asEvent, this);
          }
        }
      }
    }, {
      key: "transition",
      value: function transition(previousStates, nextState, ahConfig) {
        var _previousStatesType = flowRuntime_umd.array(flowRuntime_umd.string());

        var _nextStateType2 = flowRuntime_umd.string();

        var _ahConfigType3 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("previousStates", _previousStatesType).assert(previousStates);
        flowRuntime_umd.param("nextState", _nextStateType2).assert(nextState);
        flowRuntime_umd.param("ahConfig", _ahConfigType3).assert(ahConfig);
        var base = this.constructor;

        if (base._transitionConfigs == null) {
          base._transitionConfigs = [];
        }

        base._transitionConfigs.push({
          previousStates: previousStates,
          nextState: nextState,
          config: ahConfig
        });
      }
    }]);

    function StateMachine(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len12 = arguments.length, args1 = new Array(_len12 > 2 ? _len12 - 2 : 0), _key12 = 2; _key12 < _len12; _key12++) {
        args1[_key12 - 2] = arguments[_key12];
      }

      _classCallCheck(this, StateMachine);

      var _nameType3 = flowRuntime_umd.string();

      var _anchorType = flowRuntime_umd.ref("object");

      flowRuntime_umd.param("name", _nameType3).assert(name);
      flowRuntime_umd.param("anchor", _anchorType).assert(anchor);
      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$3.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === void 0) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "currentState", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "initialState", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "states", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_transitionConfigs", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeReset", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterReset", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeAllEvents", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterAllEvents", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterAllTransitions", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_errorOnAllEvents", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorUpdateState", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorRestoreState", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorSave", _descriptor13, _assertThisInitialized(_this));

      _this.states = {};
      var _config = config;
      _this._beforeReset = _config.beforeReset;
      _this._afterReset = _config.afterReset;
      _this._beforeAllEvents = _config.beforeAllEvents;
      _this._afterAllEvents = _config.afterAllEvents;
      _this._afterAllTransitions = _config.afterAllTransitions;
      _this._errorOnAllEvents = _config.errorOnAllEvents;
      _this._withAnchorUpdateState = _config.withAnchorUpdateState;
      _this._withAnchorSave = _config.withAnchorSave;
      _this._withAnchorRestoreState = _config.withAnchorRestoreState;
      flowRuntime_umd.ref(StateMachineInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return StateMachine;
  }(HookedObject), _class3.__filename = __filename$7, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentState", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "initialState", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "states", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_transitionConfigs", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_beforeReset", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_afterReset", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_beforeAllEvents", [_dec9, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_afterAllEvents", [_dec10, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_afterAllTransitions", [_dec11, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_errorOnAllEvents", [_dec12, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorUpdateState", [_dec13, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorRestoreState", [_dec14, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorSave", [_dec15, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "doBeforeReset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeReset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterReset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterReset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterAllTransitions", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterAllTransitions"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doErrorOnAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doErrorOnAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorUpdateState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorUpdateState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorRestoreState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorRestoreState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorSave", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorSave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerEvent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "transitionTo", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "transitionTo"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterAllTransitions", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterAllTransitions"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "errorOnAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "errorOnAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorUpdateState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorUpdateState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorSave", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorSave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorRestoreState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorRestoreState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "state", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "state"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "event", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "event"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "transition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "transition"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$8 = '/es/mixins/StateMachineMixin.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.

/*
  # Технология машины состояний проектировалась с оглядкой на
  https://github.com/aasm/aasm

class Tomato extends CoreObject
  @StateMachine 'default', ->
    @beforeAllEvents 'beforeAllEvents'
    @afterAllTransitions 'afterAllTransitions'
    @afterAllEvents 'afterAllEvents'
    @errorOnAllEvents 'errorOnAllEvents'
    @state 'first',
      initial: yes
      beforeExit: 'beforeExitFromFirst'
      afterExit: 'afterExitFromFirst'
    @state 'sleeping',
      beforeExit: 'beforeExitFromSleeping'
      afterExit: 'afterExitFromSleeping'
    @state 'running',
      beforeEnter: 'beforeEnterToRunning'
      afterEnter: 'afterEnterFromRunning'
    @event 'run',
      before: 'beforeRun'
      after: 'afterRun'
      error: 'errorOnRun'
     , =>
        @transition ['first', 'second'], 'third',
          guard: 'checkSomethingCondition'
          after: 'afterFirstSecondToThird'
        @transition 'third', 'running',
          if: 'checkThirdCondition'
          after: 'afterThirdToRunning'
        @transition ['first', 'third', 'sleeping', 'running'], 'superRunning',
          unless: 'checkThirdCondition'
          after: 'afterSleepingToRunning'

  checkSomethingCondition: ->
    console.log '!!!???? checkSomethingCondition'
    yes
  checkThirdCondition: ->
    console.log '!!!???? checkThirdCondition'
    yes
  beforeExitFromSleeping: ->
    console.log 'DFSDFSD beforeExitFromSleeping'
  beforeExitFromFirst: ->
    console.log 'DFSDFSD beforeExitFromFirst'
  afterExitFromSleeping: ->
    console.log 'DFSDFSD afterExitFromSleeping'
  afterExitFromFirst: ->
    console.log 'DFSDFSD afterExitFromFirst'
  beforeEnterToRunning: ->
    console.log 'DFSDFSD beforeEnterToRunning'
  beforeRun: ->
    console.log 'DFSDFSD beforeRun'
  afterRun: ->
    console.log 'DFSDFSD afterRun'
  afterFirstSecondToThird: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterFirstSecondToThird'
  afterThirdToRunning: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterThirdToRunning'
  afterSleepingToRunning: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterSleepingToRunning'
  afterRunningToSleeping: ->
    console.log 'DFSDFSD afterRunningToSleeping'

  beforeAllEvents: ->
    console.log 'DFSDFSD beforeAllEvents'
  afterAllTransitions: ->
    console.log 'DFSDFSD afterAllTransitions'
  afterAllEvents: ->
    console.log 'DFSDFSD afterAllEvents'
  errorOnAllEvents: (err)->
    console.log 'DFSDFSD errorOnAllEvents', err, err.stack
  errorOnRun: ->
    console.log 'DFSDFSD errorOnRun'

tomato = new Tomato()
tomato.run({key: 'value'}, 125) # можно передать как аргументы какие нибудь данные, они будут переданы внутырь коллбеков указанных на транзишенах в ключах :after
console.log 'tomato.state', tomato.state
*/

/*
StateMachine flow

try
  event           beforeAllEvents
  event           before
  event           guard
    transition      guard
    old_state       beforeExit
    old_state       exit
    ...update state...
                    afterAllTransitions
    transition      after
    new_state       beforeEnter
    new_state       enter
    ...save state...
    transition      success             # if persist successful
    old_state       afterExit
    new_state       afterEnter
  event           success             # if persist successful
  event           after
  event           afterAllEvents
catch
  event           error
  event           errorOnAllEvents
*/
var hasProp$3 = {}.hasOwnProperty;
var iplStateMachines = Symbol["for"]('~stateMachines');
var StateMachineMixin = (function (Module) {
  var _Module$NS = Module.NS,
      StateMachine = _Module$NS.StateMachine,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      property = _Module$NS.property,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$8, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("initializeStateMachines"), flowRuntime_umd.staticMethod("defineSpecialMethods", flowRuntime_umd.param("asEvent", flowRuntime_umd.any()), flowRuntime_umd.param("aoStateMachine", flowRuntime_umd.any())), flowRuntime_umd.method("getStateMachine", flowRuntime_umd.param("asName", flowRuntime_umd.string())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      _createClass(Mixin, [{
        key: "initializeStateMachines",
        value: function initializeStateMachines() {
          var configs = this.constructor.metaObject.getGroup('stateMachines', false);

          if (_.isObject(configs)) {
            for (var vsName in configs) {
              if (!hasProp$3.call(configs, vsName)) continue;
              var vmConfig = configs[vsName];

              if (this[iplStateMachines][vsName] == null) {
                this[iplStateMachines][vsName] = StateMachine["new"](vsName, this, {});
                vmConfig.call(this[iplStateMachines][vsName]);
                this[iplStateMachines][vsName].reset();
              }
            }
          }
        }
      }, {
        key: "getStateMachine",
        value: function getStateMachine(asName) {
          var _asNameType = flowRuntime_umd.string();

          flowRuntime_umd.param("asName", _asNameType).assert(asName);
          var stateMachines = this[iplStateMachines];
          return stateMachines != null ? stateMachines[asName] : undefined;
        }
      }], [{
        key: "defineSpecialMethods",
        value: function defineSpecialMethods(asEvent, aoStateMachine) {
          Reflect.defineProperty(this.prototype, asEvent, method(this.prototype, asEvent, {
            value: function () {
              var _value = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var _len,
                    args,
                    _key,
                    _args = arguments;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = _args[_key];
                        }

                        _context.next = 3;
                        return aoStateMachine.send.apply(aoStateMachine, [asEvent].concat(args));

                      case 3:
                        return _context.abrupt("return", _context.sent);

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              function value() {
                return _value.apply(this, arguments);
              }

              return value;
            }()
          }));
          var vsResetName = "reset".concat(_.upperFirst(aoStateMachine.name));
          if (this.prototype[vsResetName] == null) Reflect.defineProperty(this.prototype, vsResetName, method(this.prototype, vsResetName, {
            value: function () {
              var _value2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return aoStateMachine.reset();

                      case 2:
                        return _context2.abrupt("return", _context2.sent);

                      case 3:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              function value() {
                return _value2.apply(this, arguments);
              }

              return value;
            }()
          }));
        }
      }]);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        _this = _super.apply(this, arguments);
        _this[iplStateMachines] = {};

        _this.initializeStateMachines();

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "initializeStateMachines", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeStateMachines"), _class2.prototype), _applyDecoratedDescriptor(_class2, "defineSpecialMethods", [method], Object.getOwnPropertyDescriptor(_class2, "defineSpecialMethods"), _class2), _applyDecoratedDescriptor(_class2.prototype, "getStateMachine", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getStateMachine"), _class2.prototype)), _class2)) || _class) || _class);
    property(Mixin.prototype, iplStateMachines, {
      value: null
    });
    return Mixin;
  });
});

var _dec, _dec2, _class$4, _dec3, _dec4, _dec5, _class2, _class3, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _class4, _temp;

var inflect = require('i')();

var cpoMetaObject$l = Symbol["for"]('~metaObject');
var cphUtilsMap$2 = Symbol["for"]('~utilsMap');
var cpoUtils = Symbol["for"]('~utils');
var cphPathMap$2 = Symbol["for"]('~pathMap');
var cphMigrationsMap$1 = Symbol["for"]('~migrationsMap');
var cphTemplatesList$1 = Symbol["for"]('~templatesList');
var cphFilesList$2 = Symbol["for"]('~filesList');
var cpoNamespace = Symbol["for"]('~namespace');
var MODULE = Symbol["for"]('Module');
var CORE_OBJECT = Symbol["for"]('CoreObject');
var PROTO = Symbol["for"]('Proto');
var PRODUCTION = 'production';
var DEVELOPMENT = 'development';
var CLASS_KEYS = ['arguments', 'name', 'displayName', 'caller', 'length', 'prototype', 'constructor', '__super__', 'including'];
var INSTANCE_KEYS = ['constructor', '__proto__', 'arguments', 'caller'];

var _ES = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("_ES", flowRuntime_umd.staticMethod("isExtensible"))), _dec2 = function _dec2(target) {
  Reflect.defineProperty(target, 'name', {
    get: function get() {
      return '_ES';
    }
  });
  Reflect.defineProperty(target.prototype, 'ROOT', {
    value: __dirname$3
  });
  Reflect.defineProperty(target.prototype, 'ENV', {
    value: DEVELOPMENT
  });
  Reflect.defineProperty(target.prototype, 'assert', {
    value: assert
  });
  Reflect.defineProperty(target.prototype, 'assign', {
    value: assign
  });
  Reflect.defineProperty(target.prototype, 'lodash', {
    value: _
  });
  Reflect.defineProperty(target.prototype, '_', {
    value: _
  });
  Reflect.defineProperty(target.prototype, 'inflect', {
    value: inflect
  });
  Reflect.defineProperty(target.prototype, 'MODULE', {
    value: MODULE
  });
  Reflect.defineProperty(target.prototype, 'CORE_OBJECT', {
    value: CORE_OBJECT
  });
  Reflect.defineProperty(target.prototype, 'PROTO', {
    value: PROTO
  });
  Reflect.defineProperty(target.prototype, 'PRODUCTION', {
    value: PRODUCTION
  });
  Reflect.defineProperty(target.prototype, 'DEVELOPMENT', {
    value: DEVELOPMENT
  });
  Reflect.defineProperty(target.prototype, 'CLASS_KEYS', {
    value: CLASS_KEYS
  });
  Reflect.defineProperty(target.prototype, 'INSTANCE_KEYS', {
    value: INSTANCE_KEYS
  });
  Reflect.defineProperty(target.prototype, 'initialize', {
    value: initialize
  });
  Reflect.defineProperty(target.prototype, 'meta', {
    value: meta
  });
  Reflect.defineProperty(target.prototype, 'constant', {
    value: constant
  });
  Reflect.defineProperty(target.prototype, 'util', {
    value: util
  });
  Reflect.defineProperty(target.prototype, 'nameBy', {
    value: nameBy
  });
  target.prototype.MetaObject = MetaObject(target);
  target.prototype.CoreObject = CoreObject(target);
  Reflect.defineProperty(target, cpoMetaObject$l, {
    enumerable: false,
    configurable: true,
    value: target.prototype.MetaObject["new"](target, undefined)
  });
  target.prototype.Proto = Proto(target);
  target.prototype.Module = Module(target);
}, _dec(_class$4 = _dec2(_class$4 = /*#__PURE__*/function () {
  function _ES() {
    _classCallCheck(this, _ES);
  }

  _createClass(_ES, null, [{
    key: "isExtensible",
    get: function get() {
      return true;
    }
  }]);

  return _ES;
}()) || _class$4) || _class$4);

var ES = (_dec3 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ES", flowRuntime_umd["extends"](_ES.prototype.Module), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("ENV", flowRuntime_umd.any()), flowRuntime_umd.property("MODULE", flowRuntime_umd.any()), flowRuntime_umd.property("CORE_OBJECT", flowRuntime_umd.any()), flowRuntime_umd.property("PROTO", flowRuntime_umd.any()), flowRuntime_umd.property("PRODUCTION", flowRuntime_umd.any()), flowRuntime_umd.property("DEVELOPMENT", flowRuntime_umd.any()), flowRuntime_umd.property("CLASS_KEYS", flowRuntime_umd.any()), flowRuntime_umd.property("INSTANCE_KEYS", flowRuntime_umd.any()), flowRuntime_umd.property("assert", flowRuntime_umd.any()), flowRuntime_umd.property("assign", flowRuntime_umd.any()), flowRuntime_umd.property("copy", flowRuntime_umd.any()), flowRuntime_umd.property("filter", flowRuntime_umd.any()), flowRuntime_umd.property("forEach", flowRuntime_umd.any()), flowRuntime_umd.property("instanceOf", flowRuntime_umd.any()), flowRuntime_umd.property("isThenable", flowRuntime_umd.any()), flowRuntime_umd.property("jsonStringify", flowRuntime_umd.any()), flowRuntime_umd.property("map", flowRuntime_umd.any()), flowRuntime_umd.property("uuid", flowRuntime_umd.any()), flowRuntime_umd.property("isAsync", flowRuntime_umd.any()), flowRuntime_umd.property("lodash", flowRuntime_umd.any()), flowRuntime_umd.property("_", flowRuntime_umd.any()), flowRuntime_umd.property("inflect", flowRuntime_umd.any()), flowRuntime_umd.property("decorator", flowRuntime_umd.any()), flowRuntime_umd.property("freeze", flowRuntime_umd.any()), flowRuntime_umd.property("initialize", flowRuntime_umd.any()), flowRuntime_umd.property("initializeMixin", flowRuntime_umd.any()), flowRuntime_umd.property("initializePatch", flowRuntime_umd.any()), flowRuntime_umd.property("mixin", flowRuntime_umd.any()), flowRuntime_umd.property("patch", flowRuntime_umd.any()), flowRuntime_umd.property("extend", flowRuntime_umd.any()), flowRuntime_umd.property("plugin", flowRuntime_umd.any()), flowRuntime_umd.property("meta", flowRuntime_umd.any()), flowRuntime_umd.property("partOf", flowRuntime_umd.any()), flowRuntime_umd.property("nameBy", flowRuntime_umd.any()), flowRuntime_umd.property("constant", flowRuntime_umd.any()), flowRuntime_umd.property("util", flowRuntime_umd.any()), flowRuntime_umd.property("method", flowRuntime_umd.any()), flowRuntime_umd.property("prop", flowRuntime_umd.any()), flowRuntime_umd.property("property", flowRuntime_umd.any()), flowRuntime_umd.property("machine", flowRuntime_umd.any()), flowRuntime_umd.property("statemachine", flowRuntime_umd.any()), flowRuntime_umd.property("resolver", flowRuntime_umd.any()), flowRuntime_umd.property("chains", flowRuntime_umd.any()), flowRuntime_umd.property("loadFiles", flowRuntime_umd.any()), flowRuntime_umd.property("loadUtils", flowRuntime_umd.any()), flowRuntime_umd.property("MetaObject", flowRuntime_umd.any()), flowRuntime_umd.property("CoreObject", flowRuntime_umd.any()), flowRuntime_umd.property("Proto", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("Module"))), _dec4 = function _dec4(target) {
  target.prototype.CoreObject.constructor = target.prototype.Proto;
  target.prototype.MetaObject.constructor = target.prototype.Proto;
  target.prototype.Proto.Module = target;
  target.prototype.CoreObject.Module = target;
  target.prototype.MetaObject.Module = target;
}, _dec5 = resolver(require, function (name) {
  return require(name);
}), _dec3(_class2 = StateMachineMixin(_class2 = StateMachine(_class2 = Event(_class2 = Transition(_class2 = State(_class2 = HookedObject(_class2 = _dec4(_class2 = initialize(_class2 = _dec5(_class2 = (_class3 = (_temp = _class4 = /*#__PURE__*/function (_ES$prototype$Module) {
  _inherits(ES, _ES$prototype$Module);

  var _super = _createSuper(ES);

  function ES() {
    var _this;

    _classCallCheck(this, ES);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "ENV", _descriptor2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "MODULE", _descriptor3, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CORE_OBJECT", _descriptor4, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "PROTO", _descriptor5, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "PRODUCTION", _descriptor6, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DEVELOPMENT", _descriptor7, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CLASS_KEYS", _descriptor8, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "INSTANCE_KEYS", _descriptor9, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "assert", _descriptor10, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "assign", _descriptor11, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "copy", _descriptor12, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "filter", _descriptor13, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "forEach", _descriptor14, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "instanceOf", _descriptor15, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "isThenable", _descriptor16, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "jsonStringify", _descriptor17, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "map", _descriptor18, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "uuid", _descriptor19, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "isAsync", _descriptor20, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "lodash", _descriptor21, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "_", _descriptor22, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "inflect", _descriptor23, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "decorator", _descriptor24, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "freeze", _descriptor25, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initialize", _descriptor26, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initializeMixin", _descriptor27, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initializePatch", _descriptor28, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "mixin", _descriptor29, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "patch", _descriptor30, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "extend", _descriptor31, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "plugin", _descriptor32, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "meta", _descriptor33, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "partOf", _descriptor34, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "nameBy", _descriptor35, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "constant", _descriptor36, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "util", _descriptor37, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "method", _descriptor38, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "prop", _descriptor39, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "property", _descriptor40, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "machine", _descriptor41, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "statemachine", _descriptor42, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "resolver", _descriptor43, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "chains", _descriptor44, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "loadFiles", _descriptor45, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "loadUtils", _descriptor46, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "MetaObject", _descriptor47, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CoreObject", _descriptor48, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "Proto", _descriptor49, _assertThisInitialized(_this));

    return _this;
  }

  _createClass(ES, null, [{
    key: "Module",
    get: function get() {
      return this;
    }
  }]);

  return ES;
}(_ES.prototype.Module), _class4.__filename = 'ES', _class4.object = {}, _temp), (_applyDecoratedDescriptor(_class3, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class3, "__filename"), _init = _init ? _init.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init;
  }
}), _class3), _applyDecoratedDescriptor(_class3, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class3, "object"), _init2 = _init2 ? _init2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2;
  }
}), _class3), _descriptor = _applyDecoratedDescriptor(_class3.prototype, "ROOT", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$3;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "ENV", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEVELOPMENT;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "MODULE", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return MODULE;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "CORE_OBJECT", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return CORE_OBJECT;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, "PROTO", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return PROTO;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, "PRODUCTION", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return PRODUCTION;
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class3.prototype, "DEVELOPMENT", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEVELOPMENT;
  }
}), _descriptor8 = _applyDecoratedDescriptor(_class3.prototype, "CLASS_KEYS", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return CLASS_KEYS;
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class3.prototype, "INSTANCE_KEYS", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return INSTANCE_KEYS;
  }
}), _descriptor10 = _applyDecoratedDescriptor(_class3.prototype, "assert", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return assert;
  }
}), _descriptor11 = _applyDecoratedDescriptor(_class3.prototype, "assign", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return assign;
  }
}), _descriptor12 = _applyDecoratedDescriptor(_class3.prototype, "copy", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return copy;
  }
}), _descriptor13 = _applyDecoratedDescriptor(_class3.prototype, "filter", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return filter;
  }
}), _descriptor14 = _applyDecoratedDescriptor(_class3.prototype, "forEach", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return forEach;
  }
}), _descriptor15 = _applyDecoratedDescriptor(_class3.prototype, "instanceOf", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return instanceOf;
  }
}), _descriptor16 = _applyDecoratedDescriptor(_class3.prototype, "isThenable", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return isThenable;
  }
}), _descriptor17 = _applyDecoratedDescriptor(_class3.prototype, "jsonStringify", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return jsonStringify;
  }
}), _descriptor18 = _applyDecoratedDescriptor(_class3.prototype, "map", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return map;
  }
}), _descriptor19 = _applyDecoratedDescriptor(_class3.prototype, "uuid", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return uuid;
  }
}), _descriptor20 = _applyDecoratedDescriptor(_class3.prototype, "isAsync", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return isAsync;
  }
}), _descriptor21 = _applyDecoratedDescriptor(_class3.prototype, "lodash", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _;
  }
}), _descriptor22 = _applyDecoratedDescriptor(_class3.prototype, "_", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _;
  }
}), _descriptor23 = _applyDecoratedDescriptor(_class3.prototype, "inflect", [util], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inflect;
  }
}), _descriptor24 = _applyDecoratedDescriptor(_class3.prototype, "decorator", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return decorator;
  }
}), _descriptor25 = _applyDecoratedDescriptor(_class3.prototype, "freeze", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return freeze;
  }
}), _descriptor26 = _applyDecoratedDescriptor(_class3.prototype, "initialize", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initialize;
  }
}), _descriptor27 = _applyDecoratedDescriptor(_class3.prototype, "initializeMixin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initializeMixin;
  }
}), _descriptor28 = _applyDecoratedDescriptor(_class3.prototype, "initializePatch", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initializePatch;
  }
}), _descriptor29 = _applyDecoratedDescriptor(_class3.prototype, "mixin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return mixin;
  }
}), _descriptor30 = _applyDecoratedDescriptor(_class3.prototype, "patch", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return patch;
  }
}), _descriptor31 = _applyDecoratedDescriptor(_class3.prototype, "extend", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return extend;
  }
}), _descriptor32 = _applyDecoratedDescriptor(_class3.prototype, "plugin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return plugin;
  }
}), _descriptor33 = _applyDecoratedDescriptor(_class3.prototype, "meta", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return meta;
  }
}), _descriptor34 = _applyDecoratedDescriptor(_class3.prototype, "partOf", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return partOf;
  }
}), _descriptor35 = _applyDecoratedDescriptor(_class3.prototype, "nameBy", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return nameBy;
  }
}), _descriptor36 = _applyDecoratedDescriptor(_class3.prototype, "constant", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return constant;
  }
}), _descriptor37 = _applyDecoratedDescriptor(_class3.prototype, "util", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return util;
  }
}), _descriptor38 = _applyDecoratedDescriptor(_class3.prototype, "method", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return method;
  }
}), _descriptor39 = _applyDecoratedDescriptor(_class3.prototype, "prop", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return property;
  }
}), _descriptor40 = _applyDecoratedDescriptor(_class3.prototype, "property", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return property;
  }
}), _descriptor41 = _applyDecoratedDescriptor(_class3.prototype, "machine", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return machine;
  }
}), _descriptor42 = _applyDecoratedDescriptor(_class3.prototype, "statemachine", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return machine;
  }
}), _descriptor43 = _applyDecoratedDescriptor(_class3.prototype, "resolver", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return resolver;
  }
}), _descriptor44 = _applyDecoratedDescriptor(_class3.prototype, "chains", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return chains;
  }
}), _descriptor45 = _applyDecoratedDescriptor(_class3.prototype, "loadFiles", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return loadFiles;
  }
}), _descriptor46 = _applyDecoratedDescriptor(_class3.prototype, "loadUtils", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return loadUtils;
  }
}), _descriptor47 = _applyDecoratedDescriptor(_class3.prototype, "MetaObject", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.MetaObject;
  }
}), _descriptor48 = _applyDecoratedDescriptor(_class3.prototype, "CoreObject", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.CoreObject;
  }
}), _descriptor49 = _applyDecoratedDescriptor(_class3.prototype, "Proto", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.Proto;
  }
})), _class3)) || _class2) || _class2) || _class2) || _class2) || _class2) || _class2) || _class2) || _class2) || _class2) || _class2);
Reflect.defineProperty(ES, 'onMetalize', {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function value() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    Reflect.getPrototypeOf(ES).onMetalize.apply(this, args);
    this[cphPathMap$2] = undefined;
    this[cpoNamespace] = undefined;
    this[cphUtilsMap$2] = undefined;
    this[cpoUtils] = undefined;
    this[cphMigrationsMap$1] = undefined;
    this[cphTemplatesList$1] = undefined;
    this[cphFilesList$2] = undefined;
    return;
  }
});
freeze(ES);

var __filename$9 = '/puremvc/clean/Adapter.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var AdapterInterface = flowRuntime_umd.type("AdapterInterface", flowRuntime_umd.object(flowRuntime_umd.property("_cleanType", flowRuntime_umd.string("adapter")), flowRuntime_umd.property("getName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var AdapterInterface$1 = flowRuntime_umd.tdz(function () {
  return AdapterInterface;
});
var Adapter = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      property = _Module$NS.property,
      nameBy = _Module$NS.nameBy;
  var Adapter = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Adapter", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_cleanType", flowRuntime_umd.any()), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRegister", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRemove", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Adapter, _Notifier);

    var _super = _createSuper(Adapter);

    function Adapter() {
      var _this;

      _classCallCheck(this, Adapter);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_cleanType", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_name", _descriptor2, _assertThisInitialized(_this));

      flowRuntime_umd.ref(AdapterInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(Adapter, [{
      key: "getName",
      value: function getName() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType2.assert(this._name);
      }
    }, {
      key: "setName",
      value: function setName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        this._name = asName;
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType4.assert();
      }
    }, {
      key: "onRemove",
      value: function () {
        var _onRemove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  return _context.abrupt("return", _returnType.assert());

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onRemove() {
          return _onRemove.apply(this, arguments);
        }

        return onRemove;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Adapter;
  }(Notifier), _class3.__filename = __filename$9, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_cleanType", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 'adapter';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$a = '/puremvc/clean/Case.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var CaseInterface = flowRuntime_umd.type("CaseInterface", flowRuntime_umd.object(flowRuntime_umd.property("_cleanType", flowRuntime_umd.string("case")), flowRuntime_umd.property("execute", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd.any())))))));

var CaseInterface$1 = flowRuntime_umd.tdz(function () {
  return CaseInterface;
});
var Case = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      property = _Module$NS.property,
      nameBy = _Module$NS.nameBy;
  var Case = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Case", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_cleanType", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("execute", flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Case, _Notifier);

    var _super = _createSuper(Case);

    function Case() {
      var _this;

      _classCallCheck(this, Case);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_cleanType", _descriptor, _assertThisInitialized(_this));

      flowRuntime_umd.ref(CaseInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(Case, [{
      key: "execute",
      value: function execute() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.any());
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Case;
  }(Notifier), _class3.__filename = __filename$a, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_cleanType", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 'case';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$b = '/puremvc/clean/Suite.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var SuiteInterface = flowRuntime_umd.type("SuiteInterface", flowRuntime_umd.object(flowRuntime_umd.property("_cleanType", flowRuntime_umd.string("suite"))));

var SuiteInterface$1 = flowRuntime_umd.tdz(function () {
  return SuiteInterface;
});
var Suite = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      property = _Module$NS.property,
      nameBy = _Module$NS.nameBy;
  var Suite = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Suite", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_cleanType", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Suite, _Notifier);

    var _super = _createSuper(Suite);

    function Suite() {
      var _this;

      _classCallCheck(this, Suite);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_cleanType", _descriptor, _assertThisInitialized(_this));

      flowRuntime_umd.ref(SuiteInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(Suite, null, [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Suite;
  }(Notifier), _class3.__filename = __filename$b, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_cleanType", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 'suite';
    }
  }), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$c = '/puremvc/observer/Notification.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var NotificationInterface = flowRuntime_umd.type("NotificationInterface", function (NotificationInterface) {
  var T = NotificationInterface.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
  return flowRuntime_umd.object(flowRuntime_umd.property("getName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setBody", flowRuntime_umd["function"](flowRuntime_umd.param("aoBody", T), flowRuntime_umd["return"](T))), flowRuntime_umd.property("getBody", flowRuntime_umd["function"](flowRuntime_umd["return"](T))), flowRuntime_umd.property("setType", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("getType", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string())))));
});

var NotificationInterface$1 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var Notification = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;

  var _NotificationTypeParametersSymbol = Symbol("NotificationTypeParameters");

  var Notification = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Notification", function (Notification) {
    var T = Notification.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.property("_body", flowRuntime_umd.flowInto(T)), flowRuntime_umd.property("_type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setBody", flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](T)), flowRuntime_umd.method("getBody", flowRuntime_umd["return"](T)), flowRuntime_umd.method("setType", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getType", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("toString", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref(NotificationInterface$1, T))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(NotificationInterface$1, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())))];
  })), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.flowInto(this[_NotificationTypeParametersSymbol].T);
  }), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Notification, _CoreObject);

    var _super = _createSuper(Notification);

    _createClass(Notification, [{
      key: "getName",
      value: function getName() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType3.assert(this._name);
      }
    }, {
      key: "setBody",
      value: function setBody(aoBody) {
        var _aoBodyType = flowRuntime_umd.flowInto(this[_NotificationTypeParametersSymbol].T);

        var _returnType4 = flowRuntime_umd["return"](this[_NotificationTypeParametersSymbol].T);

        flowRuntime_umd.param("aoBody", _aoBodyType).assert(aoBody);
        this._body = aoBody;
        return _returnType4.assert(aoBody);
      }
    }, {
      key: "getBody",
      value: function getBody() {
        var _returnType5 = flowRuntime_umd["return"](this[_NotificationTypeParametersSymbol].T);

        return _returnType5.assert(this._body);
      }
    }, {
      key: "setType",
      value: function setType(asType) {
        var _asTypeType = flowRuntime_umd.string();

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.string());

        flowRuntime_umd.param("asType", _asTypeType).assert(asType);
        this._type = asType;
        return _returnType6.assert(asType);
      }
    }, {
      key: "getType",
      value: function getType() {
        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()));

        return _returnType7.assert(this._type);
      }
    }, {
      key: "toString",
      value: function toString() {
        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType8.assert("Notification Name: ".concat(this.getName(), "\nBody: ").concat(this.getBody() != null ? this.getBody().toString() : 'null', "\nType: ").concat(this.getType() != null ? this.getType() : 'null'));
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var _typeParameters, _acModuleType, _replicaType, _returnType, _replica$notification, name, body, type, instance;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _typeParameters = {
                    T: flowRuntime_umd.typeParameter("T")
                  };
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(_typeParameters.T, flowRuntime_umd.ref(NotificationInterface$1, _typeParameters.T)));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context.next = 12;
                    break;
                  }

                  _replica$notification = replica.notification, name = _replica$notification.name, body = _replica$notification.body, type = _replica$notification.type;
                  instance = this["new"](name, body, type);
                  return _context.abrupt("return", _returnType.assert(instance));

                case 12:
                  _context.t0 = _returnType;
                  _context.next = 15;
                  return _get(_getPrototypeOf(Notification), "restoreObject", this).call(this, acModule, replica);

                case 15:
                  _context.t1 = _context.sent;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(instance) {
          var _typeParameters, _instanceType, _returnType2, replica;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _typeParameters = {
                    T: flowRuntime_umd.typeParameter("T")
                  };
                  _instanceType = flowRuntime_umd.ref(NotificationInterface$1, flowRuntime_umd.flowInto(_typeParameters.T));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context2.next = 6;
                  return _get(_getPrototypeOf(Notification), "replicateObject", this).call(this, instance);

                case 6:
                  replica = _context2.sent;
                  replica.notification = {
                    name: instance.getName(),
                    body: instance.getBody(),
                    type: instance.getType()
                  };
                  return _context2.abrupt("return", _returnType2.assert(replica));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Notification(asName, aoBody, asType) {
      var _this;

      _classCallCheck(this, Notification);

      var _typeParameters = {
        T: flowRuntime_umd.typeParameter("T")
      };

      var _asNameType = flowRuntime_umd.string();

      var _aoBodyType2 = flowRuntime_umd.flowInto(_typeParameters.T);

      var _asTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

      flowRuntime_umd.param("asName", _asNameType).assert(asName);
      flowRuntime_umd.param("aoBody", _aoBodyType2).assert(aoBody);
      flowRuntime_umd.param("asType", _asTypeType2).assert(asType);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_body", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_type", _descriptor3, _assertThisInitialized(_this));

      _this[_NotificationTypeParametersSymbol] = _typeParameters;
      _this._name = asName;
      _this._body = aoBody;

      if (asType != null) {
        _this._type = asType;
      }

      flowRuntime_umd.ref(NotificationInterface$1, _this[_NotificationTypeParametersSymbol].T).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Notification;
  }(CoreObject)), _class3[_t$TypeParametersSymb] = _NotificationTypeParametersSymbol, _class3.__filename = __filename$c, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_body", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_type", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toString", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toString"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$d = '/puremvc/observer/Notifier.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var ProxyInterface = flowRuntime_umd.type("ProxyInterface", flowRuntime_umd.object(flowRuntime_umd.property("getProxyName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setData", flowRuntime_umd["function"](flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getData", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("onRegister", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onRemove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))));

// This file is part of LeanES.
var NotificationInterface$2 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface = flowRuntime_umd.type("MediatorInterface", flowRuntime_umd.object(flowRuntime_umd.property("getMediatorName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("getViewComponent", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("setViewComponent", flowRuntime_umd["function"](flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("listNotificationInterests", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array()))), flowRuntime_umd.property("handleNotification", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$2, T)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
})), flowRuntime_umd.property("onRegister", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onRemove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))));

// This file is part of LeanES.
var NotificationInterface$3 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$1 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ProxyInterface$1 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var FacadeInterface = flowRuntime_umd.type("FacadeInterface", flowRuntime_umd.object(flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("registerCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("hasCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerProxy", flowRuntime_umd["function"](flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$1))))), flowRuntime_umd.property("removeProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$1)))))), flowRuntime_umd.property("hasProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerMediator", flowRuntime_umd["function"](flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$1))))), flowRuntime_umd.property("removeMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$1)))))), flowRuntime_umd.property("hasMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("notifyObservers", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$3, T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
})), flowRuntime_umd.property("sendNotification", flowRuntime_umd["function"](function (_fn2) {
  var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", T), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
}))));

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var NotifierInterface = flowRuntime_umd.type("NotifierInterface", flowRuntime_umd.object(flowRuntime_umd.property("sendNotification", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", T), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
})), flowRuntime_umd.property("initializeNotifier", flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotifierInterface$1 = flowRuntime_umd.tdz(function () {
  return NotifierInterface;
});
var FacadeInterface$1 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var Notifier = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      injectable = _Module$NS.injectable,
      inject = _Module$NS.inject;

  var _NotifierTypeParametersSymbol = Symbol("NotifierTypeParameters");

  var Notifier = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Notifier", function (Notifier) {
    var T = Notifier.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_ApplicationModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.method("facade", flowRuntime_umd["return"](flowRuntime_umd.ref(FacadeInterface$1))), flowRuntime_umd.method("sendNotification", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
    }), flowRuntime_umd.method("send", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("run", function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))];
    }), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))];
  })), _dec2 = injectable(), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.Class(flowRuntime_umd.existential())), _dec7 = inject('ApplicationModule'), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Notifier, _CoreObject);

    var _super = _createSuper(Notifier);

    _createClass(Notifier, [{
      key: "sendNotification",
      value: function () {
        var _sendNotification = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asName, aoBody, asType) {
          var T, _asNameType, _aoBodyType, _asTypeType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _asNameType = flowRuntime_umd.string();
                  _aoBodyType = flowRuntime_umd.flowInto(T);
                  _asTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asName", _asNameType).assert(asName);
                  flowRuntime_umd.param("aoBody", _aoBodyType).assert(aoBody);
                  flowRuntime_umd.param("asType", _asTypeType).assert(asType);

                  if (!(this.facade != null)) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 11;
                  return this.facade.sendNotification(asName, aoBody, asType);

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function sendNotification(_x, _x2, _x3) {
          return _sendNotification.apply(this, arguments);
        }

        return sendNotification;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _returnType2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context2.next = 3;
                  return this.sendNotification.apply(this, _args2);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function send() {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(scriptName, data) {
          var T, _scriptNameType, _dataType, _returnType3;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _scriptNameType = flowRuntime_umd.string();
                  _dataType = flowRuntime_umd.flowInto(T);
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                  flowRuntime_umd.param("scriptName", _scriptNameType).assert(scriptName);
                  flowRuntime_umd.param("data", _dataType).assert(data);
                  _context3.t0 = _returnType3;
                  _context3.next = 9;
                  return this.facade.run(scriptName, data);

                case 9:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function run(_x4, _x5) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "initializeNotifier",
      value: function initializeNotifier(asKey) {
        var _asKeyType = flowRuntime_umd.string();

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
        this._multitonKey = asKey;
      }
    }, {
      key: "ApplicationModule",
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType4.assert(this._ApplicationModule); // if (this._ApplicationModule != null) {
        //   return this._ApplicationModule;
        // } else {
        //   return this._ApplicationModule = (() => {if (this._multitonKey != null) {
        //     const voFacade = Module.NS.Facade.getInstance(this._multitonKey);
        //     const voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);
        //     if (voMediator != null) {
        //       const app = voMediator.getViewComponent();
        //       if (app != null && app.Module) {
        //         return app.Module;
        //       } else {
        //         return voFacade.Module;
        //       }
        //     } else {
        //       return voFacade.Module;
        //     }
        //   } else {
        //     return this.Module;
        //   }})()
        // }
      }
    }, {
      key: "facade",
      get: function get() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref(FacadeInterface$1));

        if (this._multitonKey == null) {
          throw new Error(Notifier.MULTITON_MSG);
        }

        return _returnType5.assert(Module.NS.Facade.getInstance(this._multitonKey));
      }
    }]);

    function Notifier() {
      var _this;

      _classCallCheck(this, Notifier);

      var _typeParameters = {
        T: flowRuntime_umd.typeParameter("T")
      };
      _this = _super.call(this);

      _initializerDefineProperty(_this, "_multitonKey", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_ApplicationModule", _descriptor2, _assertThisInitialized(_this));

      _this[_NotifierTypeParametersSymbol] = _typeParameters;
      flowRuntime_umd.ref(NotifierInterface$1, _this[_NotifierTypeParametersSymbol].T).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Notifier;
  }(CoreObject)), _class3[_t$TypeParametersSymb] = _NotifierTypeParametersSymbol, _class3.__filename = __filename$d, _class3.object = {}, _class3.MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [_dec4, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_ApplicationModule", [_dec6, _dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "facade", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "facade"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$e = '/puremvc/observer/Observer.js';

// This file is part of LeanES.
var NotificationInterface$4 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ObserverInterface = flowRuntime_umd.type("ObserverInterface", flowRuntime_umd.object(flowRuntime_umd.property("setNotifyMethod", flowRuntime_umd["function"](flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("setNotifyContext", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getNotifyMethod", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["function"]())))), flowRuntime_umd.property("getNotifyContext", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("compareNotifyContext", flowRuntime_umd["function"](flowRuntime_umd.param("object", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("notifyObserver", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("notification", flowRuntime_umd.ref(NotificationInterface$4, T)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
}))));

var NotificationInterface$5 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ObserverInterface$1 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var Observer = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Observer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Observer", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_notify", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.property("_context", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("setNotifyMethod", flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("setNotifyContext", flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("getNotifyMethod", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("getNotifyContext", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("compareNotifyContext", flowRuntime_umd.param("object", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("notifyObserver", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("notification", flowRuntime_umd.ref(NotificationInterface$5, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
  }), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd["function"]())), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.any())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Observer, _CoreObject);

    var _super = _createSuper(Observer);

    _createClass(Observer, [{
      key: "setNotifyMethod",
      value: function setNotifyMethod(amNotifyMethod) {
        var _amNotifyMethodType = flowRuntime_umd["function"]();

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("amNotifyMethod", _amNotifyMethodType).assert(amNotifyMethod);
        this._notify = amNotifyMethod;
      }
    }, {
      key: "setNotifyContext",
      value: function setNotifyContext(aoNotifyContext) {
        var _aoNotifyContextType = flowRuntime_umd.any();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoNotifyContext", _aoNotifyContextType).assert(aoNotifyContext);
        this._context = aoNotifyContext;
      }
    }, {
      key: "getNotifyMethod",
      value: function getNotifyMethod() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["function"]()));

        return _returnType4.assert(this._notify);
      }
    }, {
      key: "getNotifyContext",
      value: function getNotifyContext() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType5.assert(this._context);
      }
    }, {
      key: "compareNotifyContext",
      value: function compareNotifyContext(object) {
        var _objectType = flowRuntime_umd.any();

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("object", _objectType).assert(object);
        return _returnType6.assert(object === this._context);
      }
    }, {
      key: "notifyObserver",
      value: function () {
        var _notifyObserver = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(notification) {
          var T, _notificationType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _notificationType = flowRuntime_umd.ref(NotificationInterface$5, flowRuntime_umd.flowInto(T));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("notification", _notificationType).assert(notification);
                  _context.next = 6;
                  return this.getNotifyMethod().call(this.getNotifyContext(), notification);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function notifyObserver(_x) {
          return _notifyObserver.apply(this, arguments);
        }

        return notifyObserver;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Observer(amNotifyMethod, aoNotifyContext) {
      var _this;

      _classCallCheck(this, Observer);

      var _amNotifyMethodType2 = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

      var _aoNotifyContextType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());

      flowRuntime_umd.param("amNotifyMethod", _amNotifyMethodType2).assert(amNotifyMethod);
      flowRuntime_umd.param("aoNotifyContext", _aoNotifyContextType2).assert(aoNotifyContext);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_notify", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_context", _descriptor2, _assertThisInitialized(_this));

      if (amNotifyMethod) {
        _this.setNotifyMethod(amNotifyMethod);
      }

      if (aoNotifyContext) {
        _this.setNotifyContext(aoNotifyContext);
      }

      flowRuntime_umd.ref(ObserverInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Observer;
  }(CoreObject), _class3.__filename = __filename$e, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_notify", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_context", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "setNotifyMethod", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setNotifyMethod"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getNotifyMethod", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getNotifyMethod"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "compareNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "compareNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$f = '/puremvc/proxy/Proxy.js';

var ProxyInterface$2 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var Proxy$1 = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Proxy = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Proxy", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_proxyName", flowRuntime_umd.string()), flowRuntime_umd.property("_data", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getProxyName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("setData", flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("getData", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("onRegister", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRemove", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ProxyInterface$2)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(ProxyInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.any())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Proxy, _Notifier);

    var _super = _createSuper(Proxy);

    _createClass(Proxy, [{
      key: "getProxyName",
      value: function getProxyName() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType4.assert(this._proxyName);
      }
    }, {
      key: "getName",
      value: function getName() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType5.assert(this._proxyName);
      }
    }, {
      key: "setName",
      value: function setName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        this._proxyName = asName;
      }
    }, {
      key: "setData",
      value: function setData(ahData) {
        var _ahDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        flowRuntime_umd.param("ahData", _ahDataType).assert(ahData);
        this._data = ahData;
        return ahData;
      }
    }, {
      key: "getData",
      value: function getData() {
        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType7.assert(this._data);
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType8.assert();
      }
    }, {
      key: "onRemove",
      value: function () {
        var _onRemove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  return _context.abrupt("return", _returnType.assert());

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onRemove() {
          return _onRemove.apply(this, arguments);
        }

        return onRemove;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(acModule, replica) {
          var _acModuleType, _replicaType, _returnType2, facade, proxy;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(ProxyInterface$2), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ProxyInterface$2))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context2.next = 11;
                    break;
                  }

                  facade = acModule.NS.ApplicationFacade.getInstance(replica.multitonKey);
                  proxy = facade.retrieveProxy(replica.proxyName);
                  return _context2.abrupt("return", _returnType2.assert(proxy));

                case 11:
                  _context2.t0 = _returnType2;
                  _context2.next = 14;
                  return _get(_getPrototypeOf(Proxy), "restoreObject", this).call(this, acModule, replica);

                case 14:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(instance) {
          var _instanceType, _returnType3, replica;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _instanceType = flowRuntime_umd.ref(ProxyInterface$2);
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context3.next = 5;
                  return _get(_getPrototypeOf(Proxy), "replicateObject", this).call(this, instance);

                case 5:
                  replica = _context3.sent;
                  replica.multitonKey = instance._multitonKey;
                  replica.proxyName = instance.getName();
                  return _context3.abrupt("return", _returnType3.assert(replica));

                case 9:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Proxy() {
      var _this;

      _classCallCheck(this, Proxy);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_proxyName", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_data", _descriptor2, _assertThisInitialized(_this));

      _this._proxyName = _this.constructor.name;
      flowRuntime_umd.ref(ProxyInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Proxy;
  }(Notifier), _class3.__filename = __filename$f, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_proxyName", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_data", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getProxyName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxyName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setData", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getData", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$g = '/puremvc/mediator/Mediator.js';

var MediatorInterface$2 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var Mediator = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Mediator = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mediator", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mediatorName", flowRuntime_umd.string()), flowRuntime_umd.property("_viewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getMediatorName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getViewComponent", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("setViewComponent", flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("view", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("view", flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("ProxyInterface"))), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref("ProxyInterface")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.method("handleNotification", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref("NotificationInterface", flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
  }), flowRuntime_umd.method("onRegister", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRemove", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(MediatorInterface$2)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(MediatorInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.any())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Mediator, _Notifier);

    var _super = _createSuper(Mediator);

    _createClass(Mediator, [{
      key: "getMediatorName",
      value: function getMediatorName() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType4.assert(this._mediatorName);
      }
    }, {
      key: "setName",
      value: function setName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        this._mediatorName = asName;
      }
    }, {
      key: "getName",
      value: function getName() {
        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType6.assert(this._mediatorName);
      }
    }, {
      key: "getViewComponent",
      value: function getViewComponent() {
        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType7.assert(this._viewComponent);
      }
    }, {
      key: "setViewComponent",
      value: function setViewComponent(aoViewComponent) {
        var _aoViewComponentType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoViewComponent", _aoViewComponentType).assert(aoViewComponent);
        this._viewComponent = aoViewComponent;
      }
    }, {
      key: "getProxy",
      value: function getProxy(asProxyName) {
        var _asProxyNameType = flowRuntime_umd.string();

        var _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.ref("ProxyInterface"));

        flowRuntime_umd.param("asProxyName", _asProxyNameType).assert(asProxyName);
        return _returnType11.assert(this.facade.retrieveProxy(asProxyName));
      }
    }, {
      key: "addProxy",
      value: function addProxy(aoProxy) {
        var _aoProxyType = flowRuntime_umd.ref("ProxyInterface");

        var _returnType12 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoProxy", _aoProxyType).assert(aoProxy);
        this.facade.registerProxy(aoProxy);
      }
    }, {
      key: "listNotificationInterests",
      value: function listNotificationInterests() {
        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.array());

        return _returnType13.assert([]);
      }
    }, {
      key: "handleNotification",
      value: function handleNotification(aoNotification) {
        var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

        var _aoNotificationType = flowRuntime_umd.ref("NotificationInterface", flowRuntime_umd.flowInto(T));

        var _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

        flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
        return _returnType14.assert();
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var _returnType15 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType15.assert();
      }
    }, {
      key: "onRemove",
      value: function () {
        var _onRemove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  return _context.abrupt("return", _returnType.assert());

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onRemove() {
          return _onRemove.apply(this, arguments);
        }

        return onRemove;
      }()
    }, {
      key: "view",
      get: function get() {
        var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType9.assert(this.getViewComponent());
      },
      set: function set(aoViewComponent) {
        var _aoViewComponentType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        flowRuntime_umd.param("aoViewComponent", _aoViewComponentType2).assert(aoViewComponent);
        this.setViewComponent(aoViewComponent);
        return _returnType10.assert(aoViewComponent);
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(acModule, replica) {
          var _acModuleType, _replicaType, _returnType2, facade, mediator;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(MediatorInterface$2), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(MediatorInterface$2))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context2.next = 11;
                    break;
                  }

                  facade = acModule.NS.ApplicationFacade.getInstance(replica.multitonKey);
                  mediator = facade.retrieveMediator(replica.mediatorName);
                  return _context2.abrupt("return", _returnType2.assert(mediator));

                case 11:
                  _context2.t0 = _returnType2;
                  _context2.next = 14;
                  return _get(_getPrototypeOf(Mediator), "restoreObject", this).call(this, acModule, replica);

                case 14:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(instance) {
          var _instanceType, _returnType3, replica;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _instanceType = flowRuntime_umd.ref(MediatorInterface$2);
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context3.next = 5;
                  return _get(_getPrototypeOf(Mediator), "replicateObject", this).call(this, instance);

                case 5:
                  replica = _context3.sent;
                  replica.multitonKey = instance._multitonKey;
                  replica.mediatorName = instance.getName();
                  return _context3.abrupt("return", _returnType3.assert(replica));

                case 9:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Mediator() {
      var _this;

      _classCallCheck(this, Mediator);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_mediatorName", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_viewComponent", _descriptor2, _assertThisInitialized(_this));

      _this._mediatorName = _this.constructor.name;
      flowRuntime_umd.ref(MediatorInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Mediator;
  }(Notifier), _class3.__filename = __filename$g, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mediatorName", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_viewComponent", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getMediatorName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediatorName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getViewComponent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getViewComponent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setViewComponent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setViewComponent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "view", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "view"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "view", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "view"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$h = '/puremvc/command/Command.js';

// This file is part of LeanES.
var NotificationInterface$6 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface = flowRuntime_umd.type("CommandInterface", flowRuntime_umd.object(flowRuntime_umd.property("execute", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("note", flowRuntime_umd.ref(NotificationInterface$6, T)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
}))));

var NotificationInterface$7 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface$1 = flowRuntime_umd.tdz(function () {
  return CommandInterface;
});
var Command = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Command = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Command", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_subCommands", flowRuntime_umd.array(flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.method("execute", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$7, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd["void"]())];
  }), flowRuntime_umd.method("initializeSubCommands", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addSubCommand", flowRuntime_umd.param("aClass", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.array(flowRuntime_umd.Class(flowRuntime_umd.existential()))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Command, _Notifier);

    var _super = _createSuper(Command);

    _createClass(Command, [{
      key: "execute",
      value: function execute(aoNotification) {
        var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

        var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$7, flowRuntime_umd.flowInto(T));

        var _returnType = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);

        var vlSubCommands = _toConsumableArray(this._subCommands);

        var _iterator = _createForOfIteratorHelper(vlSubCommands),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var vCommand = _step.value;

            if (!this.facade.container.isBound(vCommand.name)) {
              this.facade.container.bind(vCommand.name).to(vCommand);
            }

            var voCommand = flowRuntime_umd.ref(CommandInterface$1).assert(this.facade.container.get(vCommand.name)); // const voCommand = vCommand.new();

            voCommand.initializeNotifier(this._multitonKey);
            voCommand.execute(aoNotification);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "initializeSubCommands",
      value: function initializeSubCommands() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType2.assert();
      }
    }, {
      key: "addSubCommand",
      value: function addSubCommand(aClass) {
        var _aClassType = flowRuntime_umd.Class(flowRuntime_umd.existential());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aClass", _aClassType).assert(aClass);

        this._subCommands.push(aClass);

        return _returnType3.assert();
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Command() {
      var _this;

      _classCallCheck(this, Command);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_subCommands", _descriptor, _assertThisInitialized(_this));

      _this._subCommands = [];

      _this.initializeSubCommands();

      flowRuntime_umd.ref(CommandInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Command;
  }(Notifier), _class3.__filename = __filename$h, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_subCommands", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeSubCommands", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeSubCommands"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addSubCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addSubCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$i = '/puremvc/facade/Facade.js';

// This file is part of LeanES.
var NotificationInterface$8 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ControllerInterface = flowRuntime_umd.type("ControllerInterface", flowRuntime_umd.object(flowRuntime_umd.property("executeCommand", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$8, T)), flowRuntime_umd["return"](flowRuntime_umd["void"]())];
})), flowRuntime_umd.property("registerCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("lazyRegisterCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("hasCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("removeCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))));

// This file is part of LeanES.
var ProxyInterface$3 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var ModelInterface = flowRuntime_umd.type("ModelInterface", flowRuntime_umd.object(flowRuntime_umd.property("registerProxy", flowRuntime_umd["function"](flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$3)))))), flowRuntime_umd.property("retrieveProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$3))))), flowRuntime_umd.property("hasProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())))));

// This file is part of LeanES.
var NotificationInterface$9 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$3 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$1 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var ObserverInterface$2 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var ViewInterface = flowRuntime_umd.type("ViewInterface", flowRuntime_umd.object(flowRuntime_umd.property("registerObserver", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoObserver", flowRuntime_umd.ref(ObserverInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeObserver", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.union(flowRuntime_umd.ref(ControllerInterface$1), flowRuntime_umd.ref(MediatorInterface$3))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("notifyObservers", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

  return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$9, T)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
})), flowRuntime_umd.property("registerMediator", flowRuntime_umd["function"](flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$3))))), flowRuntime_umd.property("removeMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$3)))))), flowRuntime_umd.property("hasMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())))));

var AdapterInterface$2 = flowRuntime_umd.tdz(function () {
  return AdapterInterface;
});
var SuiteInterface$2 = flowRuntime_umd.tdz(function () {
  return SuiteInterface;
});
var CaseInterface$2 = flowRuntime_umd.tdz(function () {
  return CaseInterface;
});
var ViewInterface$1 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ProxyInterface$4 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var NotificationInterface$a = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ModelInterface$1 = flowRuntime_umd.tdz(function () {
  return ModelInterface;
});
var MediatorInterface$4 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$2 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var FacadeInterface$2 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var Facade = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _init4, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Facade = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Facade", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_model", flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$1))), flowRuntime_umd.property("_view", flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$1))), flowRuntime_umd.property("_controller", flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$2))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$2))))), flowRuntime_umd.method("container", flowRuntime_umd["return"](flowRuntime_umd.ref(inversify.Container))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.method("_initializeModel", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeController", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeView", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("initializeFacade", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(FacadeInterface$2))), flowRuntime_umd.method("remove", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("registerCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addCommand", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("lazyRegisterCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("hasCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("retrieveCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("CommandInterface")))), flowRuntime_umd.method("getCommand", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("addCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("getCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CaseInterface$2)))), flowRuntime_umd.method("addSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("getSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(SuiteInterface$2)))), flowRuntime_umd.method("registerProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("lazyRegisterProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd.param("asProxyClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrieveProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))), flowRuntime_umd.method("removeProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4))))), flowRuntime_umd.method("hasProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("addAdapter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("getAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(AdapterInterface$2)))), flowRuntime_umd.method("removeAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("hasAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("registerMediator", flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addMediator", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrieveMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))), flowRuntime_umd.method("getMediator", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))), flowRuntime_umd.method("activateMediator", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4))))), flowRuntime_umd.method("hasMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("notifyObservers", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$a, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
  }), flowRuntime_umd.method("sendNotification", function (_fn2) {
    var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
  }), flowRuntime_umd.method("send", function (_fn3) {
    var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
  }), flowRuntime_umd.method("run", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("hasCore", flowRuntime_umd.param("key", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("removeCore", flowRuntime_umd.param("key", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(FacadeInterface$2)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(FacadeInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$1))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$1))), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$2))), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.ref(inversify.Container);
  }), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$2))))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Facade, _CoreObject);

    var _super = _createSuper(Facade);

    _createClass(Facade, [{
      key: "_initializeModel",
      value: function _initializeModel() {
        var _returnType17 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        if (this._model == null) {
          this._model = Module.NS.Model.getInstance(this._multitonKey, this._container);
        }
      }
    }, {
      key: "_initializeController",
      value: function _initializeController() {
        var _returnType18 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        if (this._controller == null) {
          this._controller = Module.NS.Controller.getInstance(this._multitonKey, this._container);
        }
      }
    }, {
      key: "_initializeView",
      value: function _initializeView() {
        var _returnType19 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        if (this._view == null) {
          this._view = Module.NS.View.getInstance(this._multitonKey, this._container);
        }
      }
    }, {
      key: "initializeFacade",
      value: function initializeFacade() {
        var _returnType20 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        // this._container.bind('ApplicationModule').toConstructor(this.Module);
        this.bind('ApplicationModule').toConstructor(this.Module);

        this._initializeModel();

        this._initializeController();

        this._initializeView();
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context.next = 3;
                  return Module.NS.Model.removeModel(this._multitonKey);

                case 3:
                  _context.next = 5;
                  return Module.NS.Controller.removeController(this._multitonKey);

                case 5:
                  _context.next = 7;
                  return Module.NS.View.removeView(this._multitonKey);

                case 7:
                  this._container.unbindAll();

                  delete this._model;
                  delete this._view;
                  delete this._controller;
                  delete Facade._instanceMap[this._multitonKey];

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function remove() {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "registerCommand",
      value: function registerCommand(asNotificationName, aCommand) {
        var _asNotificationNameType = flowRuntime_umd.string();

        var _aCommandType = flowRuntime_umd.Class(flowRuntime_umd.existential());

        var _returnType22 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType).assert(asNotificationName);
        flowRuntime_umd.param("aCommand", _aCommandType).assert(aCommand);

        this._controller.registerCommand(asNotificationName, aCommand);
      }
    }, {
      key: "addCommand",
      value: function addCommand() {
        var _this$_controller;

        var _returnType23 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType23.assert((_this$_controller = this._controller).addCommand.apply(_this$_controller, arguments));
      }
    }, {
      key: "lazyRegisterCommand",
      value: function lazyRegisterCommand(asNotificationName, asClassName) {
        var _asNotificationNameType2 = flowRuntime_umd.string();

        var _asClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType24 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType2).assert(asNotificationName);
        flowRuntime_umd.param("asClassName", _asClassNameType).assert(asClassName);

        this._controller.lazyRegisterCommand(asNotificationName, asClassName);
      }
    }, {
      key: "removeCommand",
      value: function () {
        var _removeCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(asNotificationName) {
          var _asNotificationNameType3, _returnType2;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _asNotificationNameType3 = flowRuntime_umd.string();
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asNotificationName", _asNotificationNameType3).assert(asNotificationName);
                  _context2.next = 5;
                  return this._controller.removeCommand(asNotificationName);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function removeCommand(_x) {
          return _removeCommand.apply(this, arguments);
        }

        return removeCommand;
      }()
    }, {
      key: "hasCommand",
      value: function hasCommand(asNotificationName) {
        var _asNotificationNameType4 = flowRuntime_umd.string();

        var _returnType25 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType4).assert(asNotificationName);
        return _returnType25.assert(this._controller.hasCommand(asNotificationName));
      }
    }, {
      key: "retrieveCommand",
      value: function retrieveCommand(asNotificationName) {
        var _asNotificationNameType5 = flowRuntime_umd.string();

        var _returnType26 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("CommandInterface")));

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType5).assert(asNotificationName);
        return _returnType26.assert(this._controller.retrieveCommand(asNotificationName));
      }
    }, {
      key: "getCommand",
      value: function getCommand() {
        var _this$_controller2;

        return (_this$_controller2 = this._controller).getCommand.apply(_this$_controller2, arguments);
      }
    }, {
      key: "addCase",
      value: function addCase(asKey, asClassName) {
        var _asKeyType2 = flowRuntime_umd.string();

        var _asClassNameType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType27 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType2).assert(asKey);
        flowRuntime_umd.param("asClassName", _asClassNameType2).assert(asClassName);

        this._controller.addCase(asKey, asClassName);
      }
    }, {
      key: "hasCase",
      value: function hasCase(asKey) {
        var _asKeyType3 = flowRuntime_umd.string();

        var _returnType28 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType3).assert(asKey);
        return _returnType28.assert(this._controller.hasCase(asKey));
      }
    }, {
      key: "removeCase",
      value: function () {
        var _removeCase = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(asKey) {
          var _asKeyType4, _returnType3;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _asKeyType4 = flowRuntime_umd.string();
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType4).assert(asKey);
                  _context3.next = 5;
                  return this._controller.removeCase(asKey);

                case 5:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function removeCase(_x2) {
          return _removeCase.apply(this, arguments);
        }

        return removeCase;
      }()
    }, {
      key: "getCase",
      value: function getCase(asKey) {
        var _asKeyType5 = flowRuntime_umd.string();

        var _returnType29 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CaseInterface$2)));

        flowRuntime_umd.param("asKey", _asKeyType5).assert(asKey);
        return _returnType29.assert(this._controller.getCase(asKey));
      }
    }, {
      key: "addSuite",
      value: function addSuite(asKey, asClassName) {
        var _asKeyType6 = flowRuntime_umd.string();

        var _asClassNameType3 = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType30 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType6).assert(asKey);
        flowRuntime_umd.param("asClassName", _asClassNameType3).assert(asClassName);

        this._controller.addSuite(asKey, asClassName);
      }
    }, {
      key: "hasSuite",
      value: function hasSuite(asKey) {
        var _asKeyType7 = flowRuntime_umd.string();

        var _returnType31 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType7).assert(asKey);
        return _returnType31.assert(this._controller.hasSuite(asKey));
      }
    }, {
      key: "removeSuite",
      value: function () {
        var _removeSuite = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(asKey) {
          var _asKeyType8, _returnType4;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _asKeyType8 = flowRuntime_umd.string();
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType8).assert(asKey);
                  _context4.next = 5;
                  return this._controller.removeSuite(asKey);

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function removeSuite(_x3) {
          return _removeSuite.apply(this, arguments);
        }

        return removeSuite;
      }()
    }, {
      key: "getSuite",
      value: function getSuite(asKey) {
        var _asKeyType9 = flowRuntime_umd.string();

        var _returnType32 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(SuiteInterface$2)));

        flowRuntime_umd.param("asKey", _asKeyType9).assert(asKey);
        return _returnType32.assert(this._controller.getSuite(asKey));
      }
    }, {
      key: "registerProxy",
      value: function registerProxy(aoProxy) {
        var _aoProxyType = flowRuntime_umd.ref(ProxyInterface$4);

        var _returnType33 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoProxy", _aoProxyType).assert(aoProxy);

        this._model.registerProxy(aoProxy);
      }
    }, {
      key: "addProxy",
      value: function addProxy() {
        var _this$_model;

        var _returnType34 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType34.assert((_this$_model = this._model).addProxy.apply(_this$_model, arguments));
      }
    }, {
      key: "lazyRegisterProxy",
      value: function lazyRegisterProxy(asProxyName, asProxyClassName, ahData) {
        var _asProxyNameType = flowRuntime_umd.string();

        var _asProxyClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _ahDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType35 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asProxyName", _asProxyNameType).assert(asProxyName);
        flowRuntime_umd.param("asProxyClassName", _asProxyClassNameType).assert(asProxyClassName);
        flowRuntime_umd.param("ahData", _ahDataType).assert(ahData);

        this._model.lazyRegisterProxy(asProxyName, asProxyClassName, ahData);
      }
    }, {
      key: "retrieveProxy",
      value: function retrieveProxy(asProxyName) {
        var _asProxyNameType2 = flowRuntime_umd.string();

        var _returnType36 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)));

        flowRuntime_umd.param("asProxyName", _asProxyNameType2).assert(asProxyName);
        return _returnType36.assert(this._model.retrieveProxy(asProxyName));
      }
    }, {
      key: "getProxy",
      value: function getProxy() {
        var _this$_model2;

        var _returnType37 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)));

        return _returnType37.assert((_this$_model2 = this._model).getProxy.apply(_this$_model2, arguments));
      }
    }, {
      key: "removeProxy",
      value: function () {
        var _removeProxy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(asProxyName) {
          var _asProxyNameType3, _returnType5;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _asProxyNameType3 = flowRuntime_umd.string();
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))));
                  flowRuntime_umd.param("asProxyName", _asProxyNameType3).assert(asProxyName);
                  _context5.t0 = _returnType5;
                  _context5.next = 6;
                  return this._model.removeProxy(asProxyName);

                case 6:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 8:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function removeProxy(_x4) {
          return _removeProxy.apply(this, arguments);
        }

        return removeProxy;
      }()
    }, {
      key: "hasProxy",
      value: function hasProxy(asProxyName) {
        var _asProxyNameType4 = flowRuntime_umd.string();

        var _returnType38 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asProxyName", _asProxyNameType4).assert(asProxyName);
        return _returnType38.assert(this._model.hasProxy(asProxyName));
      }
    }, {
      key: "addAdapter",
      value: function addAdapter() {
        var _this$_model3;

        var _returnType39 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType39.assert((_this$_model3 = this._model).addAdapter.apply(_this$_model3, arguments));
      }
    }, {
      key: "getAdapter",
      value: function getAdapter(asKey) {
        var _asKeyType10 = flowRuntime_umd.string();

        var _returnType40 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(AdapterInterface$2)));

        flowRuntime_umd.param("asKey", _asKeyType10).assert(asKey);
        return _returnType40.assert(this._model.getAdapter(asKey));
      }
    }, {
      key: "removeAdapter",
      value: function () {
        var _removeAdapter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(asKey) {
          var _asKeyType11, _returnType6;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _asKeyType11 = flowRuntime_umd.string();
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType11).assert(asKey);
                  _context6.next = 5;
                  return this._model.removeAdapter(asKey);

                case 5:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function removeAdapter(_x5) {
          return _removeAdapter.apply(this, arguments);
        }

        return removeAdapter;
      }()
    }, {
      key: "hasAdapter",
      value: function hasAdapter(asKey) {
        var _asKeyType12 = flowRuntime_umd.string();

        var _returnType41 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType12).assert(asKey);
        return _returnType41.assert(this._model.hasAdapter(asKey));
      }
    }, {
      key: "registerMediator",
      value: function registerMediator(aoMediator) {
        var _aoMediatorType = flowRuntime_umd.ref(MediatorInterface$4);

        var _returnType42 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoMediator", _aoMediatorType).assert(aoMediator);

        if (this._view) {
          this._view.registerMediator(aoMediator);
        }
      }
    }, {
      key: "addMediator",
      value: function addMediator() {
        var _this$_view;

        var _returnType43 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType43.assert((_this$_view = this._view).addMediator.apply(_this$_view, arguments));
      }
    }, {
      key: "retrieveMediator",
      value: function retrieveMediator(asMediatorName) {
        var _asMediatorNameType = flowRuntime_umd.string();

        var _returnType44 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)));

        flowRuntime_umd.param("asMediatorName", _asMediatorNameType).assert(asMediatorName);

        if (this._view) {
          return _returnType44.assert(this._view.retrieveMediator(asMediatorName));
        }
      }
    }, {
      key: "getMediator",
      value: function getMediator() {
        var _this$_view2;

        var _returnType45 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)));

        return _returnType45.assert((_this$_view2 = this._view).getMediator.apply(_this$_view2, arguments));
      }
    }, {
      key: "activateMediator",
      value: function activateMediator(name) {
        var _nameType = flowRuntime_umd.string();

        var _returnType46 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("name", _nameType).assert(name);
        return _returnType46.assert(this._view.activateMediator(name));
      }
    }, {
      key: "removeMediator",
      value: function () {
        var _removeMediator = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(asMediatorName) {
          var _asMediatorNameType2, _returnType7;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _asMediatorNameType2 = flowRuntime_umd.string();
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))));
                  flowRuntime_umd.param("asMediatorName", _asMediatorNameType2).assert(asMediatorName);

                  if (!this._view) {
                    _context7.next = 9;
                    break;
                  }

                  _context7.t0 = _returnType7;
                  _context7.next = 7;
                  return this._view.removeMediator(asMediatorName);

                case 7:
                  _context7.t1 = _context7.sent;
                  return _context7.abrupt("return", _context7.t0.assert.call(_context7.t0, _context7.t1));

                case 9:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function removeMediator(_x6) {
          return _removeMediator.apply(this, arguments);
        }

        return removeMediator;
      }()
    }, {
      key: "hasMediator",
      value: function hasMediator(asMediatorName) {
        var _asMediatorNameType3 = flowRuntime_umd.string();

        var _returnType47 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asMediatorName", _asMediatorNameType3).assert(asMediatorName);

        if (this._view) {
          return _returnType47.assert(this._view.hasMediator(asMediatorName));
        }
      }
    }, {
      key: "notifyObservers",
      value: function () {
        var _notifyObservers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(aoNotification) {
          var T, _aoNotificationType, _returnType8;

          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$a, flowRuntime_umd.flowInto(T));
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);

                  if (!this._view) {
                    _context8.next = 7;
                    break;
                  }

                  _context8.next = 7;
                  return this._view.notifyObservers(aoNotification);

                case 7:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function notifyObservers(_x7) {
          return _notifyObservers.apply(this, arguments);
        }

        return notifyObservers;
      }()
    }, {
      key: "sendNotification",
      value: function () {
        var _sendNotification = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(asName, aoBody, asType) {
          var T, _asNameType, _aoBodyType, _asTypeType, _returnType9;

          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _asNameType = flowRuntime_umd.string();
                  _aoBodyType = flowRuntime_umd.flowInto(T);
                  _asTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asName", _asNameType).assert(asName);
                  flowRuntime_umd.param("aoBody", _aoBodyType).assert(aoBody);
                  flowRuntime_umd.param("asType", _asTypeType).assert(asType);
                  _context9.next = 10;
                  return this.notifyObservers(Module.NS.Notification["new"](asName, aoBody, asType));

                case 10:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function sendNotification(_x8, _x9, _x10) {
          return _sendNotification.apply(this, arguments);
        }

        return sendNotification;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(asName, aoBody, asType) {
          var T, _asNameType2, _aoBodyType2, _asTypeType2, _returnType10;

          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _asNameType2 = flowRuntime_umd.string();
                  _aoBodyType2 = flowRuntime_umd.flowInto(T);
                  _asTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asName", _asNameType2).assert(asName);
                  flowRuntime_umd.param("aoBody", _aoBodyType2).assert(aoBody);
                  flowRuntime_umd.param("asType", _asTypeType2).assert(asType);
                  _context10.next = 10;
                  return this.sendNotification(asName, aoBody, asType);

                case 10:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function send(_x11, _x12, _x13) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(scriptName, data) {
          var _scriptNameType, _dataType, _returnType11, voFacade, voMediator;

          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _scriptNameType = flowRuntime_umd.string();
                  _dataType = flowRuntime_umd.any();
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                  flowRuntime_umd.param("scriptName", _scriptNameType).assert(scriptName);
                  flowRuntime_umd.param("data", _dataType, true).assert(data);

                  if (!(this._multitonKey != null)) {
                    _context11.next = 15;
                    break;
                  }

                  voFacade = Facade.getInstance(this._multitonKey);

                  if (!(typeof voFacade.retrieveMediator == 'function')) {
                    _context11.next = 15;
                    break;
                  }

                  voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

                  if (!(typeof voMediator.run == 'function')) {
                    _context11.next = 15;
                    break;
                  }

                  _context11.t0 = _returnType11;
                  _context11.next = 13;
                  return voMediator.run(scriptName, data);

                case 13:
                  _context11.t1 = _context11.sent;
                  return _context11.abrupt("return", _context11.t0.assert.call(_context11.t0, _context11.t1));

                case 15:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function run(_x14, _x15) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "initializeNotifier",
      value: function initializeNotifier(asKey) {
        var _asKeyType13 = flowRuntime_umd.string();

        var _returnType48 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType13).assert(asKey);
        this._multitonKey = asKey;
        this._container = new inversify.Container();
      }
    }, {
      key: "container",
      get: function get() {
        var _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.ref(inversify.Container));

        return _returnType15.assert(this._container);
      } // @property _ApplicationModule: ?Class<*> = null;

    }, {
      key: "ApplicationModule",
      get: function get() {
        var _returnType16 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType16.assert(this._container.get('ApplicationModule')); // if (this._ApplicationModule != null) {
        //   return this._ApplicationModule;
        // } else {
        //   return this._ApplicationModule = (() => {if (this._multitonKey != null) {
        //     const voMediator = this.retrieveMediator(APPLICATION_MEDIATOR);
        //     if (voMediator != null) {
        //       const app = voMediator.getViewComponent();
        //       if (app != null && app.Module) {
        //         return app.Module;
        //       } else {
        //         return this.Module;
        //       }
        //     } else {
        //       return this.Module;
        //     }
        //   } else {
        //     return this.Module;
        //   }})()
        // }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey) {
        var _asKeyType = flowRuntime_umd.string();

        var _returnType21 = flowRuntime_umd["return"](flowRuntime_umd.ref(FacadeInterface$2));

        flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);

        if (Facade._instanceMap[asKey] == null) {
          Facade._instanceMap[asKey] = new Proxy(this["new"](asKey), {
            get: function get(target, name, receiver) {
              if (name !== 'constructor' && name in target._container && typeof target._container[name] === "function") {
                return target._container[name].bind(target._container);
              } else {
                return target[name];
              }
            }
          });

          Facade._instanceMap[asKey].initializeFacade();
        }

        return _returnType21.assert(Facade._instanceMap[asKey]);
      }
    }, {
      key: "hasCore",
      value: function hasCore(key) {
        var _keyType = flowRuntime_umd.string();

        var _returnType49 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("key", _keyType).assert(key);
        return _returnType49.assert(!!Facade._instanceMap[key]);
      }
    }, {
      key: "removeCore",
      value: function () {
        var _removeCore = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(key) {
          var _keyType2, _returnType12;

          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _keyType2 = flowRuntime_umd.string();
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("key", _keyType2).assert(key);

                  if (Facade._instanceMap[key]) {
                    _context12.next = 5;
                    break;
                  }

                  return _context12.abrupt("return", _returnType12.assert());

                case 5:
                  _context12.next = 7;
                  return Facade._instanceMap[key].remove();

                case 7:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function removeCore(_x16) {
          return _removeCore.apply(this, arguments);
        }

        return removeCore;
      }()
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(acModule, replica) {
          var _acModuleType, _replicaType, _returnType13;

          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(FacadeInterface$2), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(FacadeInterface$2))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : undefined) === this.name && (replica != null ? replica.type : undefined) === 'instance')) {
                    _context13.next = 9;
                    break;
                  }

                  return _context13.abrupt("return", _returnType13.assert(acModule.NS.ApplicationFacade.getInstance(replica.multitonKey)));

                case 9:
                  _context13.t0 = _returnType13;
                  _context13.next = 12;
                  return _get(_getPrototypeOf(Facade), "restoreObject", this).call(this, acModule, replica);

                case 12:
                  _context13.t1 = _context13.sent;
                  return _context13.abrupt("return", _context13.t0.assert.call(_context13.t0, _context13.t1));

                case 14:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function restoreObject(_x17, _x18) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(instance) {
          var _instanceType, _returnType14, replica;

          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _instanceType = flowRuntime_umd.ref(FacadeInterface$2);
                  _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context14.next = 5;
                  return _get(_getPrototypeOf(Facade), "replicateObject", this).call(this, instance);

                case 5:
                  replica = _context14.sent;
                  replica.multitonKey = instance._multitonKey; // const applicationMediator = instance.retrieveMediator(APPLICATION_MEDIATOR);
                  // const application = applicationMediator.getViewComponent().constructor.name;
                  // replica.application = application;
                  // replica.application = instance.ApplicationModule.name;

                  return _context14.abrupt("return", _returnType14.assert(replica));

                case 8:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function replicateObject(_x19) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Facade(asKey) {
      var _this;

      _classCallCheck(this, Facade);

      var _asKeyType14 = flowRuntime_umd.string();

      flowRuntime_umd.param("asKey", _asKeyType14).assert(asKey);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_model", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_view", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_controller", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_container", _descriptor5, _assertThisInitialized(_this));

      assert(Facade._instanceMap[asKey] == null, Facade.MULTITON_MSG);

      _this.initializeNotifier(asKey); // this.initializeFacade();


      flowRuntime_umd.ref(FacadeInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Facade;
  }(CoreObject), _class3.__filename = __filename$i, _class3.object = {}, _class3.MULTITON_MSG = "Facade instance for this multiton key already constructed!", _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_model", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_view", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_controller", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_container", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [_dec9, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "container", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "container"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeModel", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeModel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeController", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeController"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeView", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeView"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeFacade", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeFacade"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "activateMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "activateMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObservers", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObservers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype), _applyDecoratedDescriptor(_class2, "hasCore", [method], Object.getOwnPropertyDescriptor(_class2, "hasCore"), _class2), _applyDecoratedDescriptor(_class2, "removeCore", [method], Object.getOwnPropertyDescriptor(_class2, "removeCore"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$j = '/puremvc/core/View.js';

var ViewInterface$2 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ObserverInterface$3 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var NotificationInterface$b = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$5 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$3 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var View = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _init4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var View = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("View", function (View) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_mediatorMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5))))), flowRuntime_umd.property("_metaMediatorMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("className", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.property("_observerMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(ObserverInterface$3)))))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$2))))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd["return"](flowRuntime_umd.ref(View))), flowRuntime_umd.staticMethod("removeView", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("registerObserver", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoObserver", flowRuntime_umd.ref(ObserverInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeObserver", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.union(flowRuntime_umd.ref(ControllerInterface$3), flowRuntime_umd.ref(MediatorInterface$5))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("notifyObservers", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$b, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
    }), flowRuntime_umd.method("registerMediator", flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addMediator", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("retrieveMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)))), flowRuntime_umd.method("getMediator", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("activateMediator", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5))))), flowRuntime_umd.method("hasMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("lazyRegisterMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd.param("asMediatorClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeView", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)))];
  })), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5))))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("className", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(ObserverInterface$3)))))), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.ref(inversify.Container);
  }), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$2))))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(View, _CoreObject);

    var _super = _createSuper(View);

    _createClass(View, [{
      key: "registerObserver",
      value: function registerObserver(asNotificationName, aoObserver) {
        var _asNotificationNameType = flowRuntime_umd.string();

        var _aoObserverType = flowRuntime_umd.ref(ObserverInterface$3);

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType).assert(asNotificationName);
        flowRuntime_umd.param("aoObserver", _aoObserverType).assert(aoObserver);
        var vlObservers = this._observerMap[asNotificationName];

        if (vlObservers != null) {
          vlObservers.push(aoObserver);
        } else {
          this._observerMap[asNotificationName] = [aoObserver];
        }
      }
    }, {
      key: "removeObserver",
      value: function removeObserver(asNotificationName, aoNotifyContext) {
        var _asNotificationNameType2 = flowRuntime_umd.string();

        var _aoNotifyContextType = flowRuntime_umd.union(flowRuntime_umd.ref(ControllerInterface$3), flowRuntime_umd.ref(MediatorInterface$5));

        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType2).assert(asNotificationName);
        flowRuntime_umd.param("aoNotifyContext", _aoNotifyContextType).assert(aoNotifyContext);
        var vlObservers = flowRuntime_umd.array(flowRuntime_umd.ref(ObserverInterface$3)).assert(this._observerMap[asNotificationName] || []);

        for (var _iType2 = flowRuntime_umd.number(), i = _iType2.assert(0); i < vlObservers.length; i++) {
          if (vlObservers[i].compareNotifyContext(aoNotifyContext) === true) {
            vlObservers.splice(i, 1);
            break;
          }
        }

        if (vlObservers.length === 0) {
          delete this._observerMap[asNotificationName];
        }
      }
    }, {
      key: "notifyObservers",
      value: function () {
        var _notifyObservers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoNotification) {
          var T, _aoNotificationType, _returnType2, vsNotificationName, vlObservers, vlNewObservers, promises, _iterator, _step, voObserver;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$b, flowRuntime_umd.flowInto(T));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
                  vsNotificationName = aoNotification.getName();
                  vlObservers = this._observerMap[vsNotificationName];

                  if (!(vlObservers != null)) {
                    _context.next = 13;
                    break;
                  }

                  vlNewObservers = _toConsumableArray(vlObservers);
                  promises = [];
                  _iterator = _createForOfIteratorHelper(vlNewObservers);

                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      voObserver = _step.value;
                      promises.push(voObserver.notifyObserver(aoNotification));
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }

                  _context.next = 13;
                  return Promise.all(promises);

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function notifyObservers(_x) {
          return _notifyObservers.apply(this, arguments);
        }

        return notifyObservers;
      }()
    }, {
      key: "registerMediator",
      value: function registerMediator(aoMediator) {
        var _aoMediatorType = flowRuntime_umd.ref(MediatorInterface$5);

        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoMediator", _aoMediatorType).assert(aoMediator);
        var vsName = aoMediator.getMediatorName(); // Do not allow re-registration (you must removeMediator first).

        if (this._mediatorMap[vsName] != null) {
          return _returnType8.assert();
        }

        aoMediator.initializeNotifier(this._multitonKey);
        this._mediatorMap[vsName] = aoMediator;
        var vlInterests = aoMediator.listNotificationInterests() || [];

        if (vlInterests.length > 0) {
          var voObserver = Module.NS.Observer["new"](aoMediator.handleNotification, aoMediator);

          var _iterator2 = _createForOfIteratorHelper(vlInterests),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var vsInterest = _step2.value;
              this.registerObserver(vsInterest, voObserver);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } // Alert the mediator that it has been registered.


        aoMediator.onRegister();

        if (!this._container.isBound(vsName)) {
          this._container.bind(vsName).toConstantValue(aoMediator);
        }

        if (!this._container.isBound("Factory<".concat(vsName, ">"))) {
          this._container.bind("Factory<".concat(vsName, ">")).toFactory(function (context) {
            return function () {
              return aoMediator;
            };
          });
        }
      }
    }, {
      key: "addMediator",
      value: function addMediator() {
        return this.lazyRegisterMediator.apply(this, arguments);
      }
    }, {
      key: "retrieveMediator",
      value: function retrieveMediator(asMediatorName) {
        var _asMediatorNameType = flowRuntime_umd.string();

        var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)));

        flowRuntime_umd.param("asMediatorName", _asMediatorNameType).assert(asMediatorName);

        if (this._mediatorMap[asMediatorName] == null) {
          var _ref = this._metaMediatorMap[asMediatorName] || {},
              className = _ref.className,
              data = _ref.data;

          if (!_.isEmpty(className)) {
            var voClass = this.ApplicationModule.NS[className];

            if (!this._container.isBound(asMediatorName)) {
              this._container.bind(asMediatorName).to(voClass).inSingletonScope();
            }

            var voMediator = flowRuntime_umd.ref(MediatorInterface$5).assert(this._container.get(asMediatorName));
            voMediator.setName(asMediatorName);
            if (data != null) voMediator.setViewComponent(data);
            this.registerMediator(voMediator);
          }
        }

        return _returnType9.assert(this._mediatorMap[asMediatorName] || null);
      }
    }, {
      key: "getMediator",
      value: function getMediator() {
        return this.retrieveMediator.apply(this, arguments);
      }
    }, {
      key: "activateMediator",
      value: function activateMediator(name) {
        var _nameType = flowRuntime_umd.string();

        var _returnType10 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("name", _nameType).assert(name);
        this.retrieveMediator(name);
      }
    }, {
      key: "removeMediator",
      value: function () {
        var _removeMediator = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(asMediatorName) {
          var _asMediatorNameType2, _returnType3, voMediator, vlInterests, _iterator3, _step3, vsInterest;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _asMediatorNameType2 = flowRuntime_umd.string();
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)))));
                  flowRuntime_umd.param("asMediatorName", _asMediatorNameType2).assert(asMediatorName);
                  voMediator = this._mediatorMap[asMediatorName];

                  if (!(voMediator == null)) {
                    _context2.next = 6;
                    break;
                  }

                  return _context2.abrupt("return", _returnType3.assert(null));

                case 6:
                  // Get Notification interests, if any.
                  vlInterests = voMediator.listNotificationInterests(); // For every notification this mediator is interested in...

                  _iterator3 = _createForOfIteratorHelper(vlInterests);

                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      vsInterest = _step3.value;
                      this.removeObserver(vsInterest, voMediator);
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }

                  this._mediatorMap[asMediatorName] = undefined;
                  this._metaMediatorMap[asMediatorName] = undefined;
                  delete this._mediatorMap[asMediatorName];
                  delete this._metaMediatorMap[asMediatorName]; // Alert the mediator that it has been removed

                  _context2.next = 15;
                  return voMediator.onRemove();

                case 15:
                  if (this._container.isBound(asMediatorName)) {
                    this._container.unbind(asMediatorName);
                  }

                  if (this._container.isBound("Factory<".concat(asMediatorName, ">"))) {
                    this._container.unbind("Factory<".concat(asMediatorName, ">"));
                  }

                  return _context2.abrupt("return", _returnType3.assert(voMediator));

                case 18:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function removeMediator(_x2) {
          return _removeMediator.apply(this, arguments);
        }

        return removeMediator;
      }()
    }, {
      key: "hasMediator",
      value: function hasMediator(asMediatorName) {
        var _asMediatorNameType3 = flowRuntime_umd.string();

        var _returnType11 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asMediatorName", _asMediatorNameType3).assert(asMediatorName);
        return _returnType11.assert(this._mediatorMap[asMediatorName] != null || this._metaMediatorMap[asMediatorName] != null);
      }
    }, {
      key: "lazyRegisterMediator",
      value: function lazyRegisterMediator(asMediatorName, asMediatorClassName, ahData) {
        var _this2 = this;

        var _asMediatorNameType4 = flowRuntime_umd.string();

        var _asMediatorClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _ahDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType12 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asMediatorName", _asMediatorNameType4).assert(asMediatorName);
        flowRuntime_umd.param("asMediatorClassName", _asMediatorClassNameType).assert(asMediatorClassName);
        flowRuntime_umd.param("ahData", _ahDataType).assert(ahData);
        this._metaMediatorMap[asMediatorName] = {
          className: asMediatorClassName != null ? asMediatorClassName : asMediatorName,
          data: ahData
        };
        var boundMethod = this._container.isBound("Factory<".concat(asMediatorName, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asMediatorName, ">")).toFactory(function (context) {
          return function () {
            return _this2.retrieveMediator(asMediatorName);
          };
        });
      }
    }, {
      key: "_initializeView",
      value: function _initializeView() {
        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType13.assert();
      }
    }, {
      key: "ApplicationModule",
      // @property _ApplicationModule: ?Class<*> = null;
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType4.assert(this._container.get('ApplicationModule')); // if (this._ApplicationModule != null) {
        //   return this._ApplicationModule;
        // } else {
        //   return this._ApplicationModule = (() => {if (this._multitonKey != null) {
        //     const voFacade = Module.NS.Facade.getInstance(this._multitonKey);
        //     const voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);
        //     if (voMediator != null) {
        //       const app = voMediator.getViewComponent();
        //       if (app != null && app.Module) {
        //         return app.Module;
        //       } else {
        //         return voFacade.Module;
        //       }
        //     } else {
        //       return voFacade.Module;
        //     }
        //   } else {
        //     return this.Module;
        //   }})()
        // }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey, container) {
        var _asKeyType = flowRuntime_umd.string();

        var _containerType = flowRuntime_umd.ref(inversify.Container);

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref(View));

        flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
        flowRuntime_umd.param("container", _containerType).assert(container);

        if (!asKey) {
          return _returnType5.assert(null);
        }

        if (View._instanceMap[asKey] == null) {
          View._instanceMap[asKey] = this["new"](asKey, container);
        }

        return _returnType5.assert(View._instanceMap[asKey]);
      }
    }, {
      key: "removeView",
      value: function () {
        var _removeView = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(asKey) {
          var _asKeyType2, _returnType, voView, _iterator4, _step4, asMediatorName;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _asKeyType2 = flowRuntime_umd.string();
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType2).assert(asKey);
                  voView = View._instanceMap[asKey];

                  if (!(voView != null)) {
                    _context3.next = 23;
                    break;
                  }

                  _iterator4 = _createForOfIteratorHelper(Reflect.ownKeys(voView._mediatorMap));
                  _context3.prev = 6;

                  _iterator4.s();

                case 8:
                  if ((_step4 = _iterator4.n()).done) {
                    _context3.next = 14;
                    break;
                  }

                  asMediatorName = _step4.value;
                  _context3.next = 12;
                  return voView.removeMediator(asMediatorName);

                case 12:
                  _context3.next = 8;
                  break;

                case 14:
                  _context3.next = 19;
                  break;

                case 16:
                  _context3.prev = 16;
                  _context3.t0 = _context3["catch"](6);

                  _iterator4.e(_context3.t0);

                case 19:
                  _context3.prev = 19;

                  _iterator4.f();

                  return _context3.finish(19);

                case 22:
                  delete View._instanceMap[asKey];

                case 23:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, null, [[6, 16, 19, 22]]);
        }));

        function removeView(_x3) {
          return _removeView.apply(this, arguments);
        }

        return removeView;
      }()
    }]);

    function View(asKey, container) {
      var _this;

      _classCallCheck(this, View);

      var _asKeyType3 = flowRuntime_umd.string();

      var _containerType2 = flowRuntime_umd.ref(inversify.Container);

      flowRuntime_umd.param("asKey", _asKeyType3).assert(asKey);
      flowRuntime_umd.param("container", _containerType2).assert(container);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_mediatorMap", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_metaMediatorMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_observerMap", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_container", _descriptor5, _assertThisInitialized(_this));

      assert(View._instanceMap[asKey] == null, View.MULTITON_MSG);
      _this._multitonKey = asKey;
      _this._container = container;
      _this._mediatorMap = {};
      _this._metaMediatorMap = {};
      _this._observerMap = {};

      _this._initializeView();

      flowRuntime_umd.ref(ViewInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return View;
  }(CoreObject), _class3.__filename = __filename$j, _class3.object = {}, _class3.MULTITON_MSG = "View instance for this multiton key already constructed!", _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mediatorMap", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_metaMediatorMap", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_observerMap", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_container", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [_dec9, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeView", [method], Object.getOwnPropertyDescriptor(_class2, "removeView"), _class2), _applyDecoratedDescriptor(_class2.prototype, "registerObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObservers", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObservers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "activateMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "activateMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeView", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeView"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$k = '/puremvc/core/Model.js';

var AdapterInterface$3 = flowRuntime_umd.tdz(function () {
  return AdapterInterface;
});
var ProxyInterface$5 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var ModelInterface$2 = flowRuntime_umd.tdz(function () {
  return ModelInterface;
});
var Model = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _init4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Model = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Model", function (Model) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_proxyMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5))))), flowRuntime_umd.property("_metaProxyMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("className", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.property("_classNames", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$2))))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd["return"](flowRuntime_umd.ref(Model))), flowRuntime_umd.staticMethod("removeModel", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("registerProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("removeProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5))))), flowRuntime_umd.method("retrieveProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("hasProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("lazyRegisterProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd.param("asProxyClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("getAdapter", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(AdapterInterface$3)))), flowRuntime_umd.method("_initializeModel", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)))];
  })), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5))))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("className", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.string())))), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.ref(inversify.Container);
  }), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$2))))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Model, _CoreObject);

    var _super = _createSuper(Model);

    _createClass(Model, [{
      key: "registerProxy",
      value: function registerProxy(aoProxy) {
        var _aoProxyType = flowRuntime_umd.ref(ProxyInterface$5);

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoProxy", _aoProxyType).assert(aoProxy);
        var vsName = aoProxy.getName(); // Do not allow re-registration (you must removeProxy first).

        if (this._proxyMap[vsName] != null) {
          return _returnType6.assert();
        }

        aoProxy.initializeNotifier(this._multitonKey);
        this._proxyMap[vsName] = aoProxy;
        aoProxy.onRegister();

        if (!this._container.isBound(vsName)) {
          this._container.bind(vsName).toConstantValue(aoProxy);
        }

        if (!this._container.isBound("Factory<".concat(vsName, ">"))) {
          this._container.bind("Factory<".concat(vsName, ">")).toFactory(function (context) {
            return function () {
              return aoProxy;
            };
          });
        }
      }
    }, {
      key: "addProxy",
      value: function addProxy() {
        return this.lazyRegisterProxy.apply(this, arguments);
      }
    }, {
      key: "removeProxy",
      value: function () {
        var _removeProxy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asProxyName) {
          var _asProxyNameType, _returnType2, voProxy;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _asProxyNameType = flowRuntime_umd.string();
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)))));
                  flowRuntime_umd.param("asProxyName", _asProxyNameType).assert(asProxyName);
                  voProxy = this._proxyMap[asProxyName];
                  delete this._proxyMap[asProxyName];
                  delete this._metaProxyMap[asProxyName];

                  if (!voProxy) {
                    _context.next = 9;
                    break;
                  }

                  _context.next = 9;
                  return voProxy.onRemove();

                case 9:
                  if (this._container.isBound(asProxyName)) {
                    this._container.unbind(asProxyName);
                  }

                  if (this._container.isBound("Factory<".concat(asProxyName, ">"))) {
                    this._container.unbind("Factory<".concat(asProxyName, ">"));
                  }

                  return _context.abrupt("return", _returnType2.assert(voProxy));

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function removeProxy(_x) {
          return _removeProxy.apply(this, arguments);
        }

        return removeProxy;
      }()
    }, {
      key: "retrieveProxy",
      value: function retrieveProxy(asProxyName) {
        var _asProxyNameType2 = flowRuntime_umd.string();

        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)));

        flowRuntime_umd.param("asProxyName", _asProxyNameType2).assert(asProxyName);

        if (this._proxyMap[asProxyName] == null) {
          var _ref = this._metaProxyMap[asProxyName] || {},
              className = _ref.className,
              data = _ref.data;

          if (!_.isEmpty(className)) {
            var voClass = this.ApplicationModule.NS[className];

            if (!this._container.isBound(asProxyName)) {
              this._container.bind(asProxyName).to(voClass).inSingletonScope();
            }

            var voProxy = flowRuntime_umd.ref(ProxyInterface$5).assert(this._container.get(asProxyName));
            voProxy.setName(asProxyName);
            if (data != null) voProxy.setData(data);
            this.registerProxy(voProxy);
          }
        }

        return _returnType7.assert(this._proxyMap[asProxyName] || null);
      }
    }, {
      key: "getProxy",
      value: function getProxy() {
        return this.retrieveProxy.apply(this, arguments);
      }
    }, {
      key: "hasProxy",
      value: function hasProxy(asProxyName) {
        var _asProxyNameType3 = flowRuntime_umd.string();

        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asProxyName", _asProxyNameType3).assert(asProxyName);
        return _returnType8.assert(this._proxyMap[asProxyName] != null || this._metaProxyMap[asProxyName] != null);
      }
    }, {
      key: "lazyRegisterProxy",
      value: function lazyRegisterProxy(asProxyName, asProxyClassName, ahData) {
        var _this2 = this;

        var _asProxyNameType4 = flowRuntime_umd.string();

        var _asProxyClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _ahDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asProxyName", _asProxyNameType4).assert(asProxyName);
        flowRuntime_umd.param("asProxyClassName", _asProxyClassNameType).assert(asProxyClassName);
        flowRuntime_umd.param("ahData", _ahDataType).assert(ahData);
        this._metaProxyMap[asProxyName] = {
          className: asProxyClassName != null ? asProxyClassName : asProxyName,
          data: ahData
        };
        var boundMethod = this._container.isBound("Factory<".concat(asProxyName, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asProxyName, ">")).toFactory(function (context) {
          return function () {
            return _this2.retrieveProxy(asProxyName);
          };
        });
      }
    }, {
      key: "addAdapter",
      value: function addAdapter(asKey, asClassName) {
        var _this3 = this;

        var _asKeyType3 = flowRuntime_umd.string();

        var _asClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType10 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType3).assert(asKey);
        flowRuntime_umd.param("asClassName", _asClassNameType).assert(asClassName);

        if (this._classNames[asKey] == null) {
          this._classNames[asKey] = asClassName != null ? asClassName : asKey;
        }

        var boundMethod = this._container.isBound("Factory<".concat(asKey, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asKey, ">")).toFactory(function (context) {
          return function () {
            return _this3.getAdapter(asKey);
          };
        });
      }
    }, {
      key: "hasAdapter",
      value: function hasAdapter(asKey) {
        var _asKeyType4 = flowRuntime_umd.string();

        var _returnType11 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType4).assert(asKey);
        return _returnType11.assert(this._classNames[asKey] != null);
      }
    }, {
      key: "removeAdapter",
      value: function () {
        var _removeAdapter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(asKey) {
          var _asKeyType5, _returnType3, voAdapter;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _asKeyType5 = flowRuntime_umd.string();
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType5).assert(asKey);

                  if (!this.hasAdapter(asKey)) {
                    _context2.next = 11;
                    break;
                  }

                  delete this._classNames[asKey];

                  if (this._container.isBound("Factory<".concat(asKey, ">"))) {
                    this._container.unbind("Factory<".concat(asKey, ">"));
                  }

                  if (!this._container.isBound(asKey)) {
                    _context2.next = 11;
                    break;
                  }

                  voAdapter = flowRuntime_umd.ref(AdapterInterface$3).assert(this._container.get(asKey));

                  this._container.unbind(asKey);

                  _context2.next = 11;
                  return voAdapter.onRemove();

                case 11:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function removeAdapter(_x2) {
          return _removeAdapter.apply(this, arguments);
        }

        return removeAdapter;
      }()
    }, {
      key: "getAdapter",
      value: function getAdapter(asKey) {
        var _this4 = this;

        var _asKeyType6 = flowRuntime_umd.string();

        var _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(AdapterInterface$3)));

        flowRuntime_umd.param("asKey", _asKeyType6).assert(asKey);
        var vAdapter;
        var vsClassName = this._classNames[asKey];

        if (!_.isEmpty(vsClassName)) {
          vAdapter = this.ApplicationModule.NS[vsClassName];
        }

        if (vAdapter != null) {
          if (!this._container.isBound(asKey)) {
            this._container.bind(asKey).to(vAdapter).inSingletonScope().onActivation(function (context, adapter) {
              adapter.setName(asKey);
              adapter.initializeNotifier(_this4._multitonKey);
              adapter.onRegister();
              return adapter;
            });
          }

          var voAdapter = flowRuntime_umd.ref(AdapterInterface$3).assert(this._container.get(asKey));
          return _returnType12.assert(voAdapter);
        }
      }
    }, {
      key: "_initializeModel",
      value: function _initializeModel() {
        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        return _returnType13.assert();
      }
    }, {
      key: "ApplicationModule",
      // @property _ApplicationModule: ?Class<*> = null;
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType4.assert(this._container.get('ApplicationModule')); // if (this._ApplicationModule != null) {
        //   return this._ApplicationModule;
        // } else {
        //   return this._ApplicationModule = (() => {if (this._multitonKey != null) {
        //     const voFacade = Module.NS.Facade.getInstance(this._multitonKey);
        //     const voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);
        //     if (voMediator != null) {
        //       const app = voMediator.getViewComponent();
        //       if (app != null && app.Module) {
        //         return app.Module;
        //       } else {
        //         return voFacade.Module;
        //       }
        //     } else {
        //       return voFacade.Module;
        //     }
        //   } else {
        //     return this.Module;
        //   }})()
        // }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey, container) {
        var _asKeyType = flowRuntime_umd.string();

        var _containerType = flowRuntime_umd.ref(inversify.Container);

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref(Model));

        flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
        flowRuntime_umd.param("container", _containerType).assert(container);

        if (!asKey) {
          return _returnType5.assert(null);
        }

        if (Model._instanceMap[asKey] == null) {
          Model._instanceMap[asKey] = this["new"](asKey, container);
        }

        return _returnType5.assert(Model._instanceMap[asKey]);
      }
    }, {
      key: "removeModel",
      value: function () {
        var _removeModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(asKey) {
          var _asKeyType2, _returnType, voModel, _iterator, _step, asProxyName, _iterator2, _step2, asAdapterName;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _asKeyType2 = flowRuntime_umd.string();
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType2).assert(asKey);
                  voModel = Model._instanceMap[asKey];

                  if (!(voModel != null)) {
                    _context3.next = 40;
                    break;
                  }

                  _iterator = _createForOfIteratorHelper(Reflect.ownKeys(voModel._proxyMap));
                  _context3.prev = 6;

                  _iterator.s();

                case 8:
                  if ((_step = _iterator.n()).done) {
                    _context3.next = 14;
                    break;
                  }

                  asProxyName = _step.value;
                  _context3.next = 12;
                  return voModel.removeProxy(asProxyName);

                case 12:
                  _context3.next = 8;
                  break;

                case 14:
                  _context3.next = 19;
                  break;

                case 16:
                  _context3.prev = 16;
                  _context3.t0 = _context3["catch"](6);

                  _iterator.e(_context3.t0);

                case 19:
                  _context3.prev = 19;

                  _iterator.f();

                  return _context3.finish(19);

                case 22:
                  _iterator2 = _createForOfIteratorHelper(Reflect.ownKeys(voModel._classNames));
                  _context3.prev = 23;

                  _iterator2.s();

                case 25:
                  if ((_step2 = _iterator2.n()).done) {
                    _context3.next = 31;
                    break;
                  }

                  asAdapterName = _step2.value;
                  _context3.next = 29;
                  return voModel.removeAdapter(asAdapterName);

                case 29:
                  _context3.next = 25;
                  break;

                case 31:
                  _context3.next = 36;
                  break;

                case 33:
                  _context3.prev = 33;
                  _context3.t1 = _context3["catch"](23);

                  _iterator2.e(_context3.t1);

                case 36:
                  _context3.prev = 36;

                  _iterator2.f();

                  return _context3.finish(36);

                case 39:
                  delete Model._instanceMap[asKey];

                case 40:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, null, [[6, 16, 19, 22], [23, 33, 36, 39]]);
        }));

        function removeModel(_x3) {
          return _removeModel.apply(this, arguments);
        }

        return removeModel;
      }()
    }]);

    function Model(asKey, container) {
      var _this;

      _classCallCheck(this, Model);

      var _asKeyType7 = flowRuntime_umd.string();

      var _containerType2 = flowRuntime_umd.ref(inversify.Container);

      flowRuntime_umd.param("asKey", _asKeyType7).assert(asKey);
      flowRuntime_umd.param("container", _containerType2).assert(container);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_proxyMap", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_metaProxyMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_classNames", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_container", _descriptor5, _assertThisInitialized(_this));

      assert(Model._instanceMap[asKey] == null, Model.MULTITON_MSG);
      _this._multitonKey = asKey;
      _this._container = container;
      _this._proxyMap = {};
      _this._metaProxyMap = {};
      _this._classNames = {};

      _this._initializeModel();

      flowRuntime_umd.ref(ModelInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Model;
  }(CoreObject), _class3.__filename = __filename$k, _class3.object = {}, _class3.MULTITON_MSG = 'Model instance for this multiton key already constructed!', _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_proxyMap", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_metaProxyMap", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_classNames", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_container", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [_dec9, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeModel", [method], Object.getOwnPropertyDescriptor(_class2, "removeModel"), _class2), _applyDecoratedDescriptor(_class2.prototype, "registerProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getAdapter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getAdapter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeModel", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeModel"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$l = '/puremvc/core/Controller.js';

var NotificationInterface$c = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CaseInterface$3 = flowRuntime_umd.tdz(function () {
  return CaseInterface;
});
var CommandInterface$2 = flowRuntime_umd.tdz(function () {
  return CommandInterface;
});
var ViewInterface$3 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ControllerInterface$4 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var Controller = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _init4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Controller = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Controller", function (Controller) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_view", flowRuntime_umd.ref(ViewInterface$3)), flowRuntime_umd.property("_commandMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.existential()))))), flowRuntime_umd.property("_classNames", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$4))))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)), flowRuntime_umd["return"](flowRuntime_umd.ref(Controller))), flowRuntime_umd.staticMethod("removeController", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("retrieveCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CommandInterface$2)))), flowRuntime_umd.method("getCommand", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("executeCommand", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$c, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd["void"]())];
    }), flowRuntime_umd.method("registerCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addCommand", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("lazyRegisterCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("getCase", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CaseInterface$3)))), flowRuntime_umd.method("addSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("getSuite", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("SuiteInterface")))), flowRuntime_umd.method("_initializeController", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("container", flowRuntime_umd.ref(inversify.Container)))];
  })), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.ref(ViewInterface$3)), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.existential()))))), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.string())))), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec8 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.ref(inversify.Container);
  }), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$4))))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Controller, _CoreObject);

    var _super = _createSuper(Controller);

    _createClass(Controller, [{
      key: "retrieveCommand",
      value: function retrieveCommand(asNotificationName) {
        var _asNotificationNameType = flowRuntime_umd.string();

        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CommandInterface$2)));

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType).assert(asNotificationName);
        var vCommand;
        vCommand = this._commandMap[asNotificationName];

        if (vCommand == null) {
          var vsClassName = this._classNames[asNotificationName];

          if (!_.isEmpty(vsClassName)) {
            vCommand = this._commandMap[asNotificationName] = this.ApplicationModule.NS[vsClassName];
          }
        }

        if (vCommand != null) {
          if (!this._container.isBound(asNotificationName)) {
            this._container.bind(asNotificationName).to(vCommand);
          }

          var voCommand = flowRuntime_umd.ref(CommandInterface$2).assert(this._container.get(asNotificationName));
          voCommand.initializeNotifier(this._multitonKey);
          return _returnType7.assert(voCommand);
        }
      }
    }, {
      key: "getCommand",
      value: function getCommand() {
        return this.retrieveCommand.apply(this, arguments);
      }
    }, {
      key: "executeCommand",
      value: function executeCommand(aoNotification) {
        var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

        var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$c, flowRuntime_umd.flowInto(T));

        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);

        if (!aoNotification) {
          return _returnType8.assert();
        }

        var vsName = aoNotification.getName();
        var voCommand = flowRuntime_umd.nullable(flowRuntime_umd.ref(CommandInterface$2)).assert(this.retrieveCommand(vsName));

        if (voCommand != null) {
          voCommand.execute(aoNotification);
        }
      }
    }, {
      key: "registerCommand",
      value: function registerCommand(asNotificationName, aCommand) {
        var _this2 = this;

        var _asNotificationNameType2 = flowRuntime_umd.string();

        var _aCommandType = flowRuntime_umd.Class(flowRuntime_umd.existential());

        var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType2).assert(asNotificationName);
        flowRuntime_umd.param("aCommand", _aCommandType).assert(aCommand);

        if (!this._commandMap[asNotificationName]) {
          this._view.registerObserver(asNotificationName, Module.NS.Observer["new"](this.executeCommand, this));

          this._commandMap[asNotificationName] = aCommand;

          if (!this._container.isBound("Factory<".concat(asNotificationName, ">"))) {
            this._container.bind("Factory<".concat(asNotificationName, ">")).toFactory(function (context) {
              return function () {
                return _this2.retrieveCommand(asNotificationName);
              };
            });
          }
        }
      }
    }, {
      key: "addCommand",
      value: function addCommand() {
        return this.lazyRegisterCommand.apply(this, arguments);
      }
    }, {
      key: "lazyRegisterCommand",
      value: function lazyRegisterCommand(asNotificationName, asClassName) {
        var _this3 = this;

        var _asNotificationNameType3 = flowRuntime_umd.string();

        var _asClassNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType10 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType3).assert(asNotificationName);
        flowRuntime_umd.param("asClassName", _asClassNameType).assert(asClassName);

        if (this._commandMap[asNotificationName] == null && this._classNames[asNotificationName] == null) {
          this._view.registerObserver(asNotificationName, Module.NS.Observer["new"](this.executeCommand, this));

          this._classNames[asNotificationName] = asClassName != null ? asClassName : asNotificationName;
        }

        var boundMethod = this._container.isBound("Factory<".concat(asNotificationName, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asNotificationName, ">")).toFactory(function (context) {
          return function () {
            return _this3.retrieveCommand(asNotificationName);
          };
        });
      }
    }, {
      key: "hasCommand",
      value: function hasCommand(asNotificationName) {
        var _asNotificationNameType4 = flowRuntime_umd.string();

        var _returnType11 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asNotificationName", _asNotificationNameType4).assert(asNotificationName);
        return _returnType11.assert(this._commandMap[asNotificationName] != null || this._classNames[asNotificationName] != null);
      }
    }, {
      key: "removeCommand",
      value: function () {
        var _removeCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asNotificationName) {
          var _asNotificationNameType5, _returnType2;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _asNotificationNameType5 = flowRuntime_umd.string();
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asNotificationName", _asNotificationNameType5).assert(asNotificationName);

                  if (this.hasCommand(asNotificationName)) {
                    this._view.removeObserver(asNotificationName, this);

                    delete this._commandMap[asNotificationName];
                    delete this._classNames[asNotificationName];
                  }

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function removeCommand(_x) {
          return _removeCommand.apply(this, arguments);
        }

        return removeCommand;
      }()
    }, {
      key: "addCase",
      value: function addCase(asKey, asClassName) {
        var _this4 = this;

        var _asKeyType3 = flowRuntime_umd.string();

        var _asClassNameType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType12 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType3).assert(asKey);
        flowRuntime_umd.param("asClassName", _asClassNameType2).assert(asClassName);

        if (this._classNames[asKey] == null) {
          this._classNames[asKey] = asClassName != null ? asClassName : asKey;
        }

        var boundMethod = this._container.isBound("Factory<".concat(asKey, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asKey, ">")).toFactory(function (context) {
          return function () {
            return _this4.getCase(asKey);
          };
        });
      }
    }, {
      key: "hasCase",
      value: function hasCase(asKey) {
        var _asKeyType4 = flowRuntime_umd.string();

        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType4).assert(asKey);
        return _returnType13.assert(this._classNames[asKey] != null);
      }
    }, {
      key: "removeCase",
      value: function () {
        var _removeCase = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(asKey) {
          var _asKeyType5, _returnType3;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _asKeyType5 = flowRuntime_umd.string();
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType5).assert(asKey);

                  if (this.hasCase(asKey)) {
                    delete this._classNames[asKey];

                    if (this._container.isBound("Factory<".concat(asKey, ">"))) {
                      this._container.unbind("Factory<".concat(asKey, ">"));
                    }

                    if (this._container.isBound(asKey)) {
                      this._container.unbind(asKey);
                    }
                  }

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function removeCase(_x2) {
          return _removeCase.apply(this, arguments);
        }

        return removeCase;
      }()
    }, {
      key: "getCase",
      value: function getCase(asKey) {
        var _asKeyType6 = flowRuntime_umd.string();

        var _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(CaseInterface$3)));

        flowRuntime_umd.param("asKey", _asKeyType6).assert(asKey);
        var vCase;
        var vsClassName = this._classNames[asKey];

        if (!_.isEmpty(vsClassName)) {
          vCase = this.ApplicationModule.NS[vsClassName];
        }

        if (vCase != null) {
          if (!this._container.isBound(asKey)) {
            this._container.bind(asKey).to(vCase);
          }

          var voCase = flowRuntime_umd.ref(CaseInterface$3).assert(this._container.get(asKey));
          voCase.initializeNotifier(this._multitonKey);
          return _returnType14.assert(voCase);
        }
      }
    }, {
      key: "addSuite",
      value: function addSuite(asKey, asClassName) {
        var _this5 = this;

        var _asKeyType7 = flowRuntime_umd.string();

        var _asClassNameType3 = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType15 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asKey", _asKeyType7).assert(asKey);
        flowRuntime_umd.param("asClassName", _asClassNameType3).assert(asClassName);

        if (this._classNames[asKey] == null) {
          this._classNames[asKey] = asClassName != null ? asClassName : asKey;
        }

        var boundMethod = this._container.isBound("Factory<".concat(asKey, ">")) ? 'rebind' : 'bind';

        this._container[boundMethod]("Factory<".concat(asKey, ">")).toFactory(function (context) {
          return function () {
            return _this5.getSuite(asKey);
          };
        });
      }
    }, {
      key: "hasSuite",
      value: function hasSuite(asKey) {
        var _asKeyType8 = flowRuntime_umd.string();

        var _returnType16 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("asKey", _asKeyType8).assert(asKey);
        return _returnType16.assert(this._classNames[asKey] != null);
      }
    }, {
      key: "removeSuite",
      value: function () {
        var _removeSuite = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(asKey) {
          var _asKeyType9, _returnType4;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _asKeyType9 = flowRuntime_umd.string();
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType9).assert(asKey);

                  if (this.hasSuite(asKey)) {
                    delete this._classNames[asKey];

                    if (this._container.isBound("Factory<".concat(asKey, ">"))) {
                      this._container.unbind("Factory<".concat(asKey, ">"));
                    }

                    if (this._container.isBound(asKey)) {
                      this._container.unbind(asKey);
                    }
                  }

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function removeSuite(_x3) {
          return _removeSuite.apply(this, arguments);
        }

        return removeSuite;
      }()
    }, {
      key: "getSuite",
      value: function getSuite(asKey) {
        var _asKeyType10 = flowRuntime_umd.string();

        var _returnType17 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("SuiteInterface")));

        flowRuntime_umd.param("asKey", _asKeyType10).assert(asKey);
        var vSuite;
        var vsClassName = this._classNames[asKey];

        if (!_.isEmpty(vsClassName)) {
          vSuite = this.ApplicationModule.NS[vsClassName];
        }

        if (vSuite != null) {
          if (!this._container.isBound(asKey)) {
            this._container.bind(asKey).to(vSuite);
          }

          var voSuite = flowRuntime_umd.ref("SuiteInterface").assert(this._container.get(asKey));
          voSuite.initializeNotifier(this._multitonKey);
          return _returnType17.assert(voSuite);
        }
      }
    }, {
      key: "_initializeController",
      value: function _initializeController() {
        var _returnType18 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        this._view = Module.NS.View.getInstance(this._multitonKey, this._container);
      }
    }, {
      key: "ApplicationModule",
      // @property _ApplicationModule: ?Class<*> = null;
      get: function get() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        return _returnType5.assert(this._container.get('ApplicationModule')); // if (this._ApplicationModule != null) {
        //   return this._ApplicationModule;
        // } else {
        //   return this._ApplicationModule = (() => {if (this._multitonKey != null) {
        //     const voFacade = Module.NS.Facade.getInstance(this._multitonKey);
        //     const voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);
        //     if (voMediator != null) {
        //       const app = voMediator.getViewComponent();
        //       if (app != null && app.Module) {
        //         return app.Module;
        //       } else {
        //         return voFacade.Module;
        //       }
        //     } else {
        //       return voFacade.Module;
        //     }
        //   } else {
        //     return this.Module;
        //   }})()
        // }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey, container) {
        var _asKeyType = flowRuntime_umd.string();

        var _containerType = flowRuntime_umd.ref(inversify.Container);

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.ref(Controller));

        flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
        flowRuntime_umd.param("container", _containerType).assert(container);

        if (!asKey) {
          return _returnType6.assert(null);
        }

        if (Controller._instanceMap[asKey] == null) {
          Controller._instanceMap[asKey] = this["new"](asKey, container);
        }

        return _returnType6.assert(Controller._instanceMap[asKey]);
      }
    }, {
      key: "removeController",
      value: function () {
        var _removeController = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(asKey) {
          var _asKeyType2, _returnType, voController, _iterator, _step, asNotificationName, _iterator2, _step2, asName;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _asKeyType2 = flowRuntime_umd.string();
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asKey", _asKeyType2).assert(asKey);
                  voController = Controller._instanceMap[asKey];

                  if (!(voController != null)) {
                    _context4.next = 42;
                    break;
                  }

                  _iterator = _createForOfIteratorHelper(Reflect.ownKeys(voController._commandMap));
                  _context4.prev = 6;

                  _iterator.s();

                case 8:
                  if ((_step = _iterator.n()).done) {
                    _context4.next = 14;
                    break;
                  }

                  asNotificationName = _step.value;
                  _context4.next = 12;
                  return voController.removeCommand(asNotificationName);

                case 12:
                  _context4.next = 8;
                  break;

                case 14:
                  _context4.next = 19;
                  break;

                case 16:
                  _context4.prev = 16;
                  _context4.t0 = _context4["catch"](6);

                  _iterator.e(_context4.t0);

                case 19:
                  _context4.prev = 19;

                  _iterator.f();

                  return _context4.finish(19);

                case 22:
                  _iterator2 = _createForOfIteratorHelper(Reflect.ownKeys(voController._classNames));
                  _context4.prev = 23;

                  _iterator2.s();

                case 25:
                  if ((_step2 = _iterator2.n()).done) {
                    _context4.next = 33;
                    break;
                  }

                  asName = _step2.value;
                  _context4.next = 29;
                  return voController.removeCase(asName);

                case 29:
                  _context4.next = 31;
                  return voController.removeSuite(asName);

                case 31:
                  _context4.next = 25;
                  break;

                case 33:
                  _context4.next = 38;
                  break;

                case 35:
                  _context4.prev = 35;
                  _context4.t1 = _context4["catch"](23);

                  _iterator2.e(_context4.t1);

                case 38:
                  _context4.prev = 38;

                  _iterator2.f();

                  return _context4.finish(38);

                case 41:
                  delete Controller._instanceMap[asKey];

                case 42:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, null, [[6, 16, 19, 22], [23, 35, 38, 41]]);
        }));

        function removeController(_x4) {
          return _removeController.apply(this, arguments);
        }

        return removeController;
      }()
    }]);

    function Controller(asKey, container) {
      var _this;

      _classCallCheck(this, Controller);

      var _asKeyType11 = flowRuntime_umd.string();

      var _containerType2 = flowRuntime_umd.ref(inversify.Container);

      flowRuntime_umd.param("asKey", _asKeyType11).assert(asKey);
      flowRuntime_umd.param("container", _containerType2).assert(container);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_view", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_commandMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_classNames", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_container", _descriptor5, _assertThisInitialized(_this));

      assert(Controller._instanceMap[asKey] == null, Controller.MULTITON_MSG);
      _this._multitonKey = asKey;
      _this._container = container;
      _this._commandMap = {};
      _this._classNames = {};

      _this._initializeController();

      flowRuntime_umd.ref(ControllerInterface$4).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Controller;
  }(CoreObject), _class3.__filename = __filename$l, _class3.object = {}, _class3.MULTITON_MSG = 'Controller instance for this multiton key already constructed!', _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_view", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_commandMap", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_classNames", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_container", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [_dec9, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeController", [method], Object.getOwnPropertyDescriptor(_class2, "removeController"), _class2), _applyDecoratedDescriptor(_class2.prototype, "retrieveCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "executeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "executeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getCase", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getCase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getSuite", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getSuite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeController", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeController"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var _dec$1, _dec2$1, _class$5, _class2$1, _init$1, _init2$1, _descriptor$1, _descriptor2$1, _descriptor3$1, _descriptor4$1, _descriptor5$1, _descriptor6$1, _descriptor7$1, _descriptor8$1, _descriptor9$1, _descriptor10$1, _descriptor11$1, _descriptor12$1, _descriptor13$1, _class3$1, _temp$1;
var _ES$NS = ES.NS,
    CoreObject$1 = _ES$NS.CoreObject,
    initialize$1 = _ES$NS.initialize,
    meta$1 = _ES$NS.meta,
    nameBy$1 = _ES$NS.nameBy,
    constant$1 = _ES$NS.constant,
    resolver$1 = _ES$NS.resolver,
    util$1 = _ES$NS.util,
    decorator$1 = _ES$NS.decorator;
inversify.decorate(inversify.injectable(), CoreObject$1);
var PureMVC = (_dec$1 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PureMVC", flowRuntime_umd["extends"](ES), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_MEDIATOR", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_PROXY", flowRuntime_umd.any()), flowRuntime_umd.property("inversify", flowRuntime_umd.any()), flowRuntime_umd.property("injectable", flowRuntime_umd.any()), flowRuntime_umd.property("decorate", flowRuntime_umd.any()), flowRuntime_umd.property("inject", flowRuntime_umd.any()), flowRuntime_umd.property("tagged", flowRuntime_umd.any()), flowRuntime_umd.property("named", flowRuntime_umd.any()), flowRuntime_umd.property("optional", flowRuntime_umd.any()), flowRuntime_umd.property("unmanaged", flowRuntime_umd.any()), flowRuntime_umd.property("multiInject", flowRuntime_umd.any()), flowRuntime_umd.property("targetName", flowRuntime_umd.any()))), _dec2$1 = resolver$1(require, function (name) {
  return require(name);
}), _dec$1(_class$5 = Controller(_class$5 = Model(_class$5 = View(_class$5 = Facade(_class$5 = Command(_class$5 = Mediator(_class$5 = Proxy$1(_class$5 = Suite(_class$5 = Case(_class$5 = Adapter(_class$5 = Observer(_class$5 = Notifier(_class$5 = Notification(_class$5 = initialize$1(_class$5 = _dec2$1(_class$5 = (_class2$1 = (_temp$1 = _class3$1 = /*#__PURE__*/function (_ES) {
  _inherits(PureMVC, _ES);

  var _super = _createSuper(PureMVC);

  function PureMVC() {
    var _this;

    _classCallCheck(this, PureMVC);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_MEDIATOR", _descriptor2$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_PROXY", _descriptor3$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "inversify", _descriptor4$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "injectable", _descriptor5$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "decorate", _descriptor6$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "inject", _descriptor7$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "tagged", _descriptor8$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "named", _descriptor9$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "optional", _descriptor10$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "unmanaged", _descriptor11$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "multiInject", _descriptor12$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "targetName", _descriptor13$1, _assertThisInitialized(_this));

    return _this;
  }

  return PureMVC;
}(ES), _class3$1.__filename = 'PureMVC', _class3$1.object = {}, _temp$1), (_applyDecoratedDescriptor(_class2$1, "__filename", [nameBy$1], (_init$1 = Object.getOwnPropertyDescriptor(_class2$1, "__filename"), _init$1 = _init$1 ? _init$1.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$1;
  }
}), _class2$1), _applyDecoratedDescriptor(_class2$1, "object", [meta$1], (_init2$1 = Object.getOwnPropertyDescriptor(_class2$1, "object"), _init2$1 = _init2$1 ? _init2$1.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$1;
  }
}), _class2$1), _descriptor$1 = _applyDecoratedDescriptor(_class2$1.prototype, "ROOT", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$2;
  }
}), _descriptor2$1 = _applyDecoratedDescriptor(_class2$1.prototype, "APPLICATION_MEDIATOR", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationMediator';
  }
}), _descriptor3$1 = _applyDecoratedDescriptor(_class2$1.prototype, "APPLICATION_PROXY", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationProxy';
  }
}), _descriptor4$1 = _applyDecoratedDescriptor(_class2$1.prototype, "inversify", [util$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify;
  }
}), _descriptor5$1 = _applyDecoratedDescriptor(_class2$1.prototype, "injectable", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.injectable;
  }
}), _descriptor6$1 = _applyDecoratedDescriptor(_class2$1.prototype, "decorate", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.decorate;
  }
}), _descriptor7$1 = _applyDecoratedDescriptor(_class2$1.prototype, "inject", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.inject;
  }
}), _descriptor8$1 = _applyDecoratedDescriptor(_class2$1.prototype, "tagged", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.tagged;
  }
}), _descriptor9$1 = _applyDecoratedDescriptor(_class2$1.prototype, "named", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.named;
  }
}), _descriptor10$1 = _applyDecoratedDescriptor(_class2$1.prototype, "optional", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.optional;
  }
}), _descriptor11$1 = _applyDecoratedDescriptor(_class2$1.prototype, "unmanaged", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.unmanaged;
  }
}), _descriptor12$1 = _applyDecoratedDescriptor(_class2$1.prototype, "multiInject", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.multiInject;
  }
}), _descriptor13$1 = _applyDecoratedDescriptor(_class2$1.prototype, "targetName", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inversify.targetName;
  }
})), _class2$1)) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5) || _class$5);

var __dirname$4 = '/pipes';

var __filename$m = '/pipes/Pipe.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var PipeMessageInterface = flowRuntime_umd.type("PipeMessageInterface", flowRuntime_umd.object(flowRuntime_umd.property("getType", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setType", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getPriority", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.number()))), flowRuntime_umd.property("setPriority", flowRuntime_umd["function"](flowRuntime_umd.param("anPriority", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getHeader", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("setHeader", flowRuntime_umd["function"](flowRuntime_umd.param("aoHeader", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getBody", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("setBody", flowRuntime_umd["function"](flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

// This file is part of LeanES.
var PipeMessageInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface = flowRuntime_umd.type("PipeFittingInterface", function (PipeFittingInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("connect", flowRuntime_umd["function"](flowRuntime_umd.param("aoOutput", PipeFittingInterface), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("disconnect", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(PipeFittingInterface)))), flowRuntime_umd.property("write", flowRuntime_umd["function"](flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))));
});

var PipeMessageInterface$2 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var Pipe = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Pipe = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Pipe", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_output", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1))), flowRuntime_umd.method("connect", flowRuntime_umd.param("aoOutput", flowRuntime_umd.ref(PipeFittingInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1)))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1)))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Pipe, _CoreObject);

    var _super = _createSuper(Pipe);

    _createClass(Pipe, [{
      key: "connect",
      value: function connect(aoOutput) {
        var _aoOutputType = flowRuntime_umd.ref(PipeFittingInterface$1);

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("aoOutput", _aoOutputType).assert(aoOutput);
        var vbSuccess = false;

        if (this._output == null) {
          this._output = aoOutput;
          vbSuccess = true;
        }

        return _returnType2.assert(vbSuccess);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1)));

        var disconnectedFitting = this._output;
        this._output = null;
        return _returnType3.assert(disconnectedFitting);
      }
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoMessage) {
          var _aoMessageType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$2);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);
                  _context.t0 = _returnType;
                  _context.t2 = this._output;

                  if (!_context.t2) {
                    _context.next = 9;
                    break;
                  }

                  _context.next = 8;
                  return this._output.write(aoMessage);

                case 8:
                  _context.t2 = _context.sent;

                case 9:
                  _context.t1 = _context.t2;

                  if (_context.t1) {
                    _context.next = 12;
                    break;
                  }

                  _context.t1 = true;

                case 12:
                  _context.t3 = _context.t1;
                  return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t3));

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function write(_x) {
          return _write.apply(this, arguments);
        }

        return write;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Pipe(aoOutput) {
      var _this;

      _classCallCheck(this, Pipe);

      var _aoOutputType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1));

      flowRuntime_umd.param("aoOutput", _aoOutputType2).assert(aoOutput);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_output", _descriptor, _assertThisInitialized(_this));

      if (aoOutput != null) {
        _this.connect(aoOutput);
      }

      flowRuntime_umd.ref(PipeFittingInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return Pipe;
  }(CoreObject), _class3.__filename = __filename$m, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_output", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$n = '/pipes/PipeMessage.js';

var PipeMessageInterface$3 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeMessage = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var PipeMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeMessage", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("PRIORITY_HIGH", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("PRIORITY_MED", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("PRIORITY_LOW", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("BASE", flowRuntime_umd.string()), flowRuntime_umd.staticMethod("NORMAL"), flowRuntime_umd.property("_type", flowRuntime_umd.string()), flowRuntime_umd.property("_priority", flowRuntime_umd.number()), flowRuntime_umd.property("_header", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_body", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getType", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setType", flowRuntime_umd.param("asType", flowRuntime_umd.string())), flowRuntime_umd.method("getPriority", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("setPriority", flowRuntime_umd.param("anPriority", flowRuntime_umd.number())), flowRuntime_umd.method("getHeader", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("setHeader", flowRuntime_umd.param("aoHeader", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("getBody", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("setBody", flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoHeader", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("anPriority", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), _dec10 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.any())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeMessage, _CoreObject);

    var _super = _createSuper(PipeMessage);

    _createClass(PipeMessage, [{
      key: "getType",
      value: function getType() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType.assert(this._type);
      }
    }, {
      key: "setType",
      value: function setType(asType) {
        var _asTypeType = flowRuntime_umd.string();

        flowRuntime_umd.param("asType", _asTypeType).assert(asType);
        this._type = asType;
      }
    }, {
      key: "getPriority",
      value: function getPriority() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.number());

        return _returnType2.assert(this._priority);
      }
    }, {
      key: "setPriority",
      value: function setPriority(anPriority) {
        var _anPriorityType = flowRuntime_umd.number();

        flowRuntime_umd.param("anPriority", _anPriorityType).assert(anPriority);
        this._priority = anPriority;
      }
    }, {
      key: "getHeader",
      value: function getHeader() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

        return _returnType3.assert(this._header);
      }
    }, {
      key: "setHeader",
      value: function setHeader(aoHeader) {
        var _aoHeaderType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("aoHeader", _aoHeaderType).assert(aoHeader);
        this._header = aoHeader;
      }
    }, {
      key: "getBody",
      value: function getBody() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType4.assert(this._body);
      }
    }, {
      key: "setBody",
      value: function setBody(aoBody) {
        var _aoBodyType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        flowRuntime_umd.param("aoBody", _aoBodyType).assert(aoBody);
        this._body = aoBody;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "NORMAL",
      get: function get() {
        return "".concat(this.BASE, "normal");
      }
    }]);

    function PipeMessage(asType) {
      var _this;

      var aoHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var aoBody = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var anPriority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;

      _classCallCheck(this, PipeMessage);

      var _asTypeType2 = flowRuntime_umd.string();

      var _aoHeaderType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

      var _aoBodyType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());

      var _anPriorityType2 = flowRuntime_umd.nullable(flowRuntime_umd.number());

      flowRuntime_umd.param("asType", _asTypeType2).assert(asType);
      flowRuntime_umd.param("aoHeader", _aoHeaderType2).assert(aoHeader);
      flowRuntime_umd.param("aoBody", _aoBodyType2).assert(aoBody);
      flowRuntime_umd.param("anPriority", _anPriorityType2).assert(anPriority);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_type", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_priority", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_header", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_body", _descriptor4, _assertThisInitialized(_this));

      _this.setType(asType);

      if (aoHeader != null) {
        _this.setHeader(aoHeader);
      }

      if (aoBody != null) {
        _this.setBody(aoBody);
      }

      _this.setPriority(anPriority);

      flowRuntime_umd.ref(PipeMessageInterface$3).assert(_assertThisInitialized(_this));
      return _this;
    }

    return PipeMessage;
  }(CoreObject), _class3.__filename = __filename$n, _class3.object = {}, _class3.PRIORITY_HIGH = 1, _class3.PRIORITY_MED = 5, _class3.PRIORITY_LOW = 10, _class3.BASE = 'namespaces/pipes/messages/', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_HIGH", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_HIGH"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_MED", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_MED"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_LOW", [_dec5, property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_LOW"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [_dec6, property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "BASE"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "NORMAL", [property], Object.getOwnPropertyDescriptor(_class2, "NORMAL"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_type", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_priority", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_header", [_dec9, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_body", [_dec10, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getHeader", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getHeader"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setHeader", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setHeader"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setBody"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$o = '/pipes/PipeListener.js';

var PipeMessageInterface$4 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$2 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeListener = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var PipeListener = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeListener", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_context", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_listener", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd["return"](flowRuntime_umd.flowInto(T))];
  })), flowRuntime_umd.method("connect", flowRuntime_umd.param("pipe", flowRuntime_umd.ref(PipeFittingInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$2)))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$4)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoContext", flowRuntime_umd.ref("object")), flowRuntime_umd.param("amListener", flowRuntime_umd["function"]())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.ref("object")), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd["function"](function (_fn2) {
    var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd["return"](flowRuntime_umd.flowInto(T))];
  })), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeListener, _CoreObject);

    var _super = _createSuper(PipeListener);

    _createClass(PipeListener, [{
      key: "connect",
      value: function connect(pipe) {
        var _pipeType = flowRuntime_umd.ref(PipeFittingInterface$2);

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("pipe", _pipeType).assert(pipe);
        return _returnType2.assert(false);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$2)));

        return _returnType3.assert(null);
      }
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoMessage) {
          var _aoMessageType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$4);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);
                  _context.next = 5;
                  return this._listener.call(this._context, aoMessage);

                case 5:
                  return _context.abrupt("return", _returnType.assert(true));

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function write(_x) {
          return _write.apply(this, arguments);
        }

        return write;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function PipeListener(aoContext, amListener) {
      var _this;

      _classCallCheck(this, PipeListener);

      var _aoContextType = flowRuntime_umd.ref("object");

      var _amListenerType = flowRuntime_umd["function"]();

      flowRuntime_umd.param("aoContext", _aoContextType).assert(aoContext);
      flowRuntime_umd.param("amListener", _amListenerType).assert(amListener);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_context", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_listener", _descriptor2, _assertThisInitialized(_this));

      _this._context = aoContext;
      _this._listener = amListener;
      flowRuntime_umd.ref(PipeFittingInterface$2).assert(_assertThisInitialized(_this));
      return _this;
    }

    return PipeListener;
  }(CoreObject), _class3.__filename = __filename$o, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_context", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_listener", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$p = '/pipes/FilterControlMessage.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var FilterControlMessage = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var FilterControlMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("FilterControlMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_PARAMS", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_FILTER", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("BYPASS", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FILTER", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.property("_filter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.property("_params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.method("setName", flowRuntime_umd.param("asName", flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setFilter", flowRuntime_umd.param("amFilter", flowRuntime_umd["function"]())), flowRuntime_umd.method("getFilter", flowRuntime_umd["return"](flowRuntime_umd["function"]())), flowRuntime_umd.method("setParams", flowRuntime_umd.param("aoParams", flowRuntime_umd.ref("object"))), flowRuntime_umd.method("getParams", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("amFilter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd["function"]())), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(FilterControlMessage, _PipeMessage);

    var _super = _createSuper(FilterControlMessage);

    _createClass(FilterControlMessage, [{
      key: "setName",
      value: function setName(asName) {
        var _asNameType = flowRuntime_umd.string();

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        this._name = asName;
      }
    }, {
      key: "getName",
      value: function getName() {
        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType6.assert(this._name);
      }
    }, {
      key: "setFilter",
      value: function setFilter(amFilter) {
        var _amFilterType = flowRuntime_umd["function"]();

        flowRuntime_umd.param("amFilter", _amFilterType).assert(amFilter);
        this._filter = amFilter;
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd["function"]());

        return _returnType7.assert(this._filter);
      }
    }, {
      key: "setParams",
      value: function setParams(aoParams) {
        var _aoParamsType = flowRuntime_umd.ref("object");

        flowRuntime_umd.param("aoParams", _aoParamsType).assert(aoParams);
        this._params = aoParams;
      }
    }, {
      key: "getParams",
      value: function getParams() {
        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        return _returnType8.assert(this._params);
      }
    }], [{
      key: "BASE",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType.assert("".concat(PipeMessage.BASE, "filter-control/"));
      }
    }, {
      key: "SET_PARAMS",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType2.assert("".concat(this.BASE, "setparams"));
      }
    }, {
      key: "SET_FILTER",
      get: function get() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType3.assert("".concat(this.BASE, "setfilter"));
      }
    }, {
      key: "BYPASS",
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType4.assert("".concat(this.BASE, "bypass"));
      }
    }, {
      key: "FILTER",
      get: function get() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType5.assert("".concat(this.BASE, "filter"));
      }
    }]);

    function FilterControlMessage(asType, asName) {
      var _this;

      var amFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var aoParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, FilterControlMessage);

      var _asTypeType = flowRuntime_umd.string();

      var _asNameType2 = flowRuntime_umd.string();

      var _amFilterType2 = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

      var _aoParamsType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

      flowRuntime_umd.param("asType", _asTypeType).assert(asType);
      flowRuntime_umd.param("asName", _asNameType2).assert(asName);
      flowRuntime_umd.param("amFilter", _amFilterType2).assert(amFilter);
      flowRuntime_umd.param("aoParams", _aoParamsType2).assert(aoParams);
      _this = _super.call(this, asType);

      _initializerDefineProperty(_this, "_name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_filter", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_params", _descriptor3, _assertThisInitialized(_this));

      _this.setName(asName);

      if (amFilter != null) {
        _this.setFilter(amFilter);
      }

      if (aoParams != null) {
        _this.setParams(aoParams);
      }

      return _this;
    }

    return FilterControlMessage;
  }(PipeMessage), _class3.__filename = __filename$p, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "SET_PARAMS", [property], Object.getOwnPropertyDescriptor(_class2, "SET_PARAMS"), _class2), _applyDecoratedDescriptor(_class2, "SET_FILTER", [property], Object.getOwnPropertyDescriptor(_class2, "SET_FILTER"), _class2), _applyDecoratedDescriptor(_class2, "BYPASS", [property], Object.getOwnPropertyDescriptor(_class2, "BYPASS"), _class2), _applyDecoratedDescriptor(_class2, "FILTER", [property], Object.getOwnPropertyDescriptor(_class2, "FILTER"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_filter", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_params", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "setName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setParams"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getParams"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$q = '/pipes/LogMessage.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var LogMessage = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _init7, _init8, _init9, _init10, _init11, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LogMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("DEBUG", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("INFO", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("WARN", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("ERROR", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("FATAL", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("NONE", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("CHANGE", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("LEVELS", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SEND_TO_LOG", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticProperty("STDLOG", flowRuntime_umd.string()), flowRuntime_umd.method("logLevel", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("logLevel", flowRuntime_umd.param("logLevel", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("sender", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("sender", flowRuntime_umd.param("sender", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("time", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("time", flowRuntime_umd.param("time", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("message", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("logLevel", flowRuntime_umd.number()), flowRuntime_umd.param("sender", flowRuntime_umd.string()), flowRuntime_umd.param("message", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec9 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec10 = flowRuntime_umd.decorate(flowRuntime_umd.array(flowRuntime_umd.string())), _dec11 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(LogMessage, _PipeMessage);

    var _super = _createSuper(LogMessage);

    _createClass(LogMessage, [{
      key: "logLevel",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.number());

        return _returnType2.assert(this.getHeader().logLevel);
      },
      set: function set(logLevel) {
        var _logLevelType = flowRuntime_umd.number();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.number());

        flowRuntime_umd.param("logLevel", _logLevelType).assert(logLevel);
        var header = this.getHeader();
        header.logLevel = logLevel;
        this.setHeader(header);
        return _returnType3.assert(logLevel);
      }
    }, {
      key: "sender",
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType4.assert(this.getHeader().sender);
      },
      set: function set(sender) {
        var _senderType = flowRuntime_umd.string();

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.string());

        flowRuntime_umd.param("sender", _senderType).assert(sender);
        var header = this.getHeader();
        header.sender = sender;
        this.setHeader(header);
        return _returnType5.assert(sender);
      }
    }, {
      key: "time",
      get: function get() {
        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType6.assert(this.getHeader().time);
      },
      set: function set(time) {
        var _timeType = flowRuntime_umd.string();

        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.string());

        flowRuntime_umd.param("time", _timeType).assert(time);
        var header = this.getHeader();
        header.time = time;
        this.setHeader(header);
        return _returnType7.assert(time);
      }
    }, {
      key: "message",
      get: function get() {
        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        return _returnType8.assert(this.getBody());
      }
    }], [{
      key: "SEND_TO_LOG",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType.assert(PipeMessage.BASE + 'LoggerModule/sendToLog');
      }
    }]);

    function LogMessage(logLevel, sender, message) {
      _classCallCheck(this, LogMessage);

      var _logLevelType2 = flowRuntime_umd.number();

      var _senderType2 = flowRuntime_umd.string();

      var _messageType = flowRuntime_umd.any();

      flowRuntime_umd.param("logLevel", _logLevelType2).assert(logLevel);
      flowRuntime_umd.param("sender", _senderType2).assert(sender);
      flowRuntime_umd.param("message", _messageType).assert(message);
      var time = new Date().toISOString();
      var headers = {
        logLevel: logLevel,
        sender: sender,
        time: time
      };
      return _super.call(this, PipeMessage.NORMAL, headers, message);
    }

    return LogMessage;
  }(PipeMessage), _class3.__filename = __filename$q, _class3.object = {}, _class3.DEBUG = 5, _class3.INFO = 4, _class3.WARN = 3, _class3.ERROR = 2, _class3.FATAL = 1, _class3.NONE = 0, _class3.CHANGE = -1, _class3.LEVELS = ['NONE', 'FATAL', 'ERROR', 'WARN', 'INFO', 'DEBUG'], _class3.STDLOG = 'standardLog', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "DEBUG", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "DEBUG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "INFO", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "INFO"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "WARN", [_dec5, property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "WARN"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ERROR", [_dec6, property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "ERROR"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "FATAL", [_dec7, property], (_init7 = Object.getOwnPropertyDescriptor(_class2, "FATAL"), _init7 = _init7 ? _init7.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init7;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "NONE", [_dec8, property], (_init8 = Object.getOwnPropertyDescriptor(_class2, "NONE"), _init8 = _init8 ? _init8.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init8;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CHANGE", [_dec9, property], (_init9 = Object.getOwnPropertyDescriptor(_class2, "CHANGE"), _init9 = _init9 ? _init9.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init9;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "LEVELS", [_dec10, property], (_init10 = Object.getOwnPropertyDescriptor(_class2, "LEVELS"), _init10 = _init10 ? _init10.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init10;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "SEND_TO_LOG", [property], Object.getOwnPropertyDescriptor(_class2, "SEND_TO_LOG"), _class2), _applyDecoratedDescriptor(_class2, "STDLOG", [_dec11, property], (_init11 = Object.getOwnPropertyDescriptor(_class2, "STDLOG"), _init11 = _init11 ? _init11.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init11;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "logLevel", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "logLevel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "logLevel", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "logLevel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sender", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "sender"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sender", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "sender"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "time", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "time"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "time", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "time"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$r = '/pipes/LogFilterMessage.js';

var PipeMessageInterface$5 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var LogFilterMessage = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      FilterControlMessage = _Module$NS.FilterControlMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LogFilterMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogFilterMessage", flowRuntime_umd["extends"](FilterControlMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("LOG_FILTER_NAME", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_LOG_LEVEL", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("logLevel", flowRuntime_umd.number()), flowRuntime_umd.staticMethod("filterLogByLevel", flowRuntime_umd.param("message", flowRuntime_umd.ref(PipeMessageInterface$5)), flowRuntime_umd.param("params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("logLevel", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_FilterControlMessage) {
    _inherits(LogFilterMessage, _FilterControlMessage);

    var _super = _createSuper(LogFilterMessage);

    _createClass(LogFilterMessage, null, [{
      key: "filterLogByLevel",
      value: function filterLogByLevel(message, params) {
        var _messageType = flowRuntime_umd.ref(PipeMessageInterface$5);

        var _paramsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("message", _messageType).assert(message);
        flowRuntime_umd.param("params", _paramsType).assert(params);
        var voParams = params || {};
        var logLevel = voParams.logLevel;

        if (logLevel == null) {
          logLevel = 0;
        }

        if (message.getHeader().logLevel > voParams.logLevel) {
          throw new Error();
        }
      }
    }, {
      key: "BASE",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType.assert("".concat(FilterControlMessage.BASE, "LoggerModule/"));
      }
    }, {
      key: "LOG_FILTER_NAME",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType2.assert("".concat(this.BASE, "logFilter/"));
      }
    }, {
      key: "SET_LOG_LEVEL",
      get: function get() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType3.assert("".concat(this.BASE, "setLogLevel/"));
      }
    }]);

    function LogFilterMessage(action) {
      var _this;

      var logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      _classCallCheck(this, LogFilterMessage);

      var _actionType = flowRuntime_umd.string();

      var _logLevelType = flowRuntime_umd.nullable(flowRuntime_umd.number());

      flowRuntime_umd.param("action", _actionType).assert(action);
      flowRuntime_umd.param("logLevel", _logLevelType).assert(logLevel);
      _this = _super.call(this, action, LogFilterMessage.LOG_FILTER_NAME, null, {
        logLevel: logLevel
      });

      _initializerDefineProperty(_this, "logLevel", _descriptor, _assertThisInitialized(_this));

      _this.logLevel = logLevel;
      return _this;
    }

    return LogFilterMessage;
  }(FilterControlMessage), _class3.__filename = __filename$r, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "LOG_FILTER_NAME", [property], Object.getOwnPropertyDescriptor(_class2, "LOG_FILTER_NAME"), _class2), _applyDecoratedDescriptor(_class2, "SET_LOG_LEVEL", [property], Object.getOwnPropertyDescriptor(_class2, "SET_LOG_LEVEL"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "logLevel", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _applyDecoratedDescriptor(_class2, "filterLogByLevel", [method], Object.getOwnPropertyDescriptor(_class2, "filterLogByLevel"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$s = '/pipes/Filter.js';

var PipeFittingInterface$3 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeMessageInterface$6 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var Filter = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      PipeMessage = _Module$NS.PipeMessage,
      FilterControlMessage = _Module$NS.FilterControlMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var NORMAL = PipeMessage.NORMAL;
  var FILTER = FilterControlMessage.FILTER,
      SET_PARAMS = FilterControlMessage.SET_PARAMS,
      SET_FILTER = FilterControlMessage.SET_FILTER,
      BYPASS = FilterControlMessage.BYPASS;
  var Filter = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Filter", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mode", flowRuntime_umd.string()), flowRuntime_umd.method("_filter", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.property("_params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("_isTarget", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("applyFilter", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeMessageInterface$6))), flowRuntime_umd.method("setParams", flowRuntime_umd.param("aoParams", flowRuntime_umd.ref("object"))), flowRuntime_umd.method("setFilter", flowRuntime_umd.param("amFilter", flowRuntime_umd["function"]())), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$3))), flowRuntime_umd.param("amFilter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(Filter, _Pipe);

    var _super = _createSuper(Filter);

    _createClass(Filter, [{
      key: "_filter",

      /**
       * @protected
       * @type string
       */

      /**
       * @protected
       * @return {void}
       */
      value: function _filter(aoMessage, aoParams) {
        var _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$6);

        var _aoParamsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);
        flowRuntime_umd.param("aoParams", _aoParamsType).assert(aoParams);
      }
    }, {
      key: "_isTarget",

      /**
       * @protected
       * @param {object} aoMessage
       * @return {boolean}
       */
      value: function _isTarget(aoMessage) {
        var _aoMessageType2 = flowRuntime_umd.ref(PipeMessageInterface$6);

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("aoMessage", _aoMessageType2).assert(aoMessage);
        // must be instance of FilterControlMessage
        return _returnType3.assert(aoMessage instanceof FilterControlMessage && (aoMessage != null ? aoMessage.getName() : void 0) === this._name);
      }
      /**
       * @protected
       * @param {object} aoMessage
       * @return {object}
       */

    }, {
      key: "applyFilter",
      value: function applyFilter(aoMessage) {
        var _aoMessageType3 = flowRuntime_umd.ref(PipeMessageInterface$6);

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.ref(PipeMessageInterface$6));

        flowRuntime_umd.param("aoMessage", _aoMessageType3).assert(aoMessage);

        this._filter.apply(this, [aoMessage, this._params]);

        return _returnType4.assert(aoMessage);
      }
    }, {
      key: "setParams",
      value: function setParams(aoParams) {
        var _aoParamsType2 = flowRuntime_umd.ref("object");

        flowRuntime_umd.param("aoParams", _aoParamsType2).assert(aoParams);
        this._params = aoParams;
      }
    }, {
      key: "setFilter",
      value: function setFilter(amFilter) {
        var _amFilterType = flowRuntime_umd["function"]();

        flowRuntime_umd.param("amFilter", _amFilterType).assert(amFilter);
        Reflect.defineProperty(this, '_filter', method(this, '_filter', {
          value: amFilter
        }));
      }
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoMessage) {
          var _aoMessageType4, _returnType, vbSuccess, voOutputMessage;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoMessageType4 = flowRuntime_umd.ref(PipeMessageInterface$6);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType4).assert(aoMessage);
                  vbSuccess = true;
                  voOutputMessage = null;
                  _context.t0 = aoMessage.getType();
                  _context.next = _context.t0 === NORMAL ? 8 : _context.t0 === SET_PARAMS ? 20 : _context.t0 === SET_FILTER ? 28 : _context.t0 === BYPASS ? 36 : _context.t0 === FILTER ? 36 : 44;
                  break;

                case 8:
                  _context.prev = 8;

                  if (this._mode === FILTER) {
                    voOutputMessage = this.applyFilter(aoMessage);
                  } else {
                    voOutputMessage = aoMessage;
                  }

                  _context.next = 12;
                  return this._output.write(voOutputMessage);

                case 12:
                  vbSuccess = _context.sent;
                  _context.next = 19;
                  break;

                case 15:
                  _context.prev = 15;
                  _context.t1 = _context["catch"](8);
                  console.log('>>>>>>>>>>>>>>> err', _context.t1);
                  vbSuccess = false;

                case 19:
                  return _context.abrupt("break", 47);

                case 20:
                  if (!this._isTarget(aoMessage)) {
                    _context.next = 24;
                    break;
                  }

                  this.setParams(aoMessage.getParams());
                  _context.next = 27;
                  break;

                case 24:
                  _context.next = 26;
                  return this._output.write(voOutputMessage);

                case 26:
                  vbSuccess = _context.sent;

                case 27:
                  return _context.abrupt("break", 47);

                case 28:
                  if (!this._isTarget(aoMessage)) {
                    _context.next = 32;
                    break;
                  }

                  this.setFilter(aoMessage.getFilter());
                  _context.next = 35;
                  break;

                case 32:
                  _context.next = 34;
                  return this._output.write(voOutputMessage);

                case 34:
                  vbSuccess = _context.sent;

                case 35:
                  return _context.abrupt("break", 47);

                case 36:
                  if (!this._isTarget(aoMessage)) {
                    _context.next = 40;
                    break;
                  }

                  this._mode = aoMessage.getType();
                  _context.next = 43;
                  break;

                case 40:
                  _context.next = 42;
                  return this._output.write(voOutputMessage);

                case 42:
                  vbSuccess = _context.sent;

                case 43:
                  return _context.abrupt("break", 47);

                case 44:
                  _context.next = 46;
                  return this._output.write(outputMessage);

                case 46:
                  vbSuccess = _context.sent;

                case 47:
                  return _context.abrupt("return", _returnType.assert(vbSuccess));

                case 48:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[8, 15]]);
        }));

        function write(_x) {
          return _write.apply(this, arguments);
        }

        return write;
      }()
    }]);

    function Filter(asName) {
      var _this;

      var aoOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var amFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var aoParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, Filter);

      var _asNameType = flowRuntime_umd.string();

      var _aoOutputType = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$3));

      var _amFilterType2 = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

      var _aoParamsType3 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

      flowRuntime_umd.param("asName", _asNameType).assert(asName);
      flowRuntime_umd.param("aoOutput", _aoOutputType).assert(aoOutput);
      flowRuntime_umd.param("amFilter", _amFilterType2).assert(amFilter);
      flowRuntime_umd.param("aoParams", _aoParamsType3).assert(aoParams);
      _this = _super.call(this, aoOutput);

      _initializerDefineProperty(_this, "_mode", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_params", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_name", _descriptor3, _assertThisInitialized(_this));

      _this._name = asName;

      if (amFilter != null) {
        _this.setFilter(amFilter);
      }

      if (aoParams != null) {
        _this.setParams(aoParams);
      }

      return _this;
    }

    return Filter;
  }(Pipe), _class3.__filename = __filename$s, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mode", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return FILTER;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_filter"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_params", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_isTarget", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_isTarget"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "applyFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setParams"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$t = '/pipes/Junction.js';

var PipeMessageInterface$7 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$4 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var Junction = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _init, _init2, _init3, _init4, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      PipeListener = _Module$NS.PipeListener,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var splice = [].splice;
  var Junction = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Junction", function (Junction) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("INPUT", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("OUTPUT", flowRuntime_umd.string()), flowRuntime_umd.property("_inputPipes", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("_outputPipes", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("_pipesMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$4))))), flowRuntime_umd.property("_pipeTypesMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.union(flowRuntime_umd.ref(Junction.INPUT), flowRuntime_umd.ref(Junction.OUTPUT))))), flowRuntime_umd.method("registerPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("type", flowRuntime_umd.string()), flowRuntime_umd.param("pipe", flowRuntime_umd.ref(PipeFittingInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasInputPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasOutputPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removePipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrievePipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$4))), flowRuntime_umd.method("addPipeListener", flowRuntime_umd.param("inputPipeName", flowRuntime_umd.string()), flowRuntime_umd.param("context", flowRuntime_umd.ref("object")), flowRuntime_umd.param("listener", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("sendMessage", flowRuntime_umd.param("outputPipeName", flowRuntime_umd.string()), flowRuntime_umd.param("message", flowRuntime_umd.ref(PipeMessageInterface$7)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject")];
  })), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.array(flowRuntime_umd.string())), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.array(flowRuntime_umd.string())), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$4))))), _dec8 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.union(flowRuntime_umd.ref(Junction.INPUT), flowRuntime_umd.ref(Junction.OUTPUT))));
  }), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Junction, _CoreObject);

    var _super = _createSuper(Junction);

    _createClass(Junction, [{
      key: "registerPipe",
      value: function registerPipe(name, type, pipe) {
        var _nameType = flowRuntime_umd.string();

        var _typeType = flowRuntime_umd.string();

        var _pipeType = flowRuntime_umd.ref(PipeFittingInterface$4);

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("name", _nameType).assert(name);
        flowRuntime_umd.param("type", _typeType).assert(type);
        flowRuntime_umd.param("pipe", _pipeType).assert(pipe);
        var vbSuccess = true;

        if (this._pipesMap[name] == null) {
          this._pipesMap[name] = pipe;
          this._pipeTypesMap[name] = type;

          switch (type) {
            case Junction.INPUT:
              this._inputPipes.push(name);

              break;

            case Junction.OUTPUT:
              this._outputPipes.push(name);

              break;

            default:
              vbSuccess = false;
          }
        } else {
          vbSuccess = false;
        }

        return _returnType2.assert(vbSuccess);
      }
    }, {
      key: "hasPipe",
      value: function hasPipe(name) {
        var _nameType2 = flowRuntime_umd.string();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("name", _nameType2).assert(name);
        return _returnType3.assert(this._pipesMap[name] != null);
      }
    }, {
      key: "hasInputPipe",
      value: function hasInputPipe(name) {
        var _nameType3 = flowRuntime_umd.string();

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("name", _nameType3).assert(name);
        return _returnType4.assert(this.hasPipe(name) && this._pipeTypesMap[name] === Junction.INPUT);
      }
    }, {
      key: "hasOutputPipe",
      value: function hasOutputPipe(name) {
        var _nameType4 = flowRuntime_umd.string();

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("name", _nameType4).assert(name);
        return _returnType5.assert(this.hasPipe(name) && this._pipeTypesMap[name] === Junction.OUTPUT);
      }
    }, {
      key: "removePipe",
      value: function removePipe(name) {
        var _nameType5 = flowRuntime_umd.string();

        var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("name", _nameType5).assert(name);
        var ref;

        if (this.hasPipe(name)) {
          var type = this._pipeTypesMap[name];

          var pipesList = function () {
            switch (type) {
              case Junction.INPUT:
                return this._inputPipes;

              case Junction.OUTPUT:
                return this._outputPipes;

              default:
                return [];
            }
          }.call(this);

          var j;

          for (var i = j = 0, len = pipesList.length; j < len; i = ++j) {
            var pipe = pipesList[i];

            if (pipe === name) {
              splice.apply(pipesList, [i, i - i + 1].concat(ref = [])), ref;
              break;
            }
          }

          delete this._pipesMap[name];
          delete this._pipeTypesMap[name];
        }
      }
    }, {
      key: "retrievePipe",
      value: function retrievePipe(name) {
        var _nameType6 = flowRuntime_umd.string();

        var _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$4));

        flowRuntime_umd.param("name", _nameType6).assert(name);
        return _returnType7.assert(this._pipesMap[name]);
      }
    }, {
      key: "addPipeListener",
      value: function addPipeListener(inputPipeName, context, listener) {
        var _inputPipeNameType = flowRuntime_umd.string();

        var _contextType = flowRuntime_umd.ref("object");

        var _listenerType = flowRuntime_umd["function"]();

        var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("inputPipeName", _inputPipeNameType).assert(inputPipeName);
        flowRuntime_umd.param("context", _contextType).assert(context);
        flowRuntime_umd.param("listener", _listenerType).assert(listener);
        var vbSuccess = false;

        if (this.hasInputPipe(inputPipeName)) {
          var pipe = this._pipesMap[inputPipeName];
          vbSuccess = pipe.connect(new PipeListener(context, listener));
        }

        return _returnType8.assert(vbSuccess);
      }
    }, {
      key: "sendMessage",
      value: function () {
        var _sendMessage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(outputPipeName, message) {
          var _outputPipeNameType, _messageType, _returnType, vbSuccess, pipe;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _outputPipeNameType = flowRuntime_umd.string();
                  _messageType = flowRuntime_umd.ref(PipeMessageInterface$7);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("outputPipeName", _outputPipeNameType).assert(outputPipeName);
                  flowRuntime_umd.param("message", _messageType).assert(message);
                  vbSuccess = false;

                  if (!this.hasOutputPipe(outputPipeName)) {
                    _context.next = 11;
                    break;
                  }

                  pipe = this._pipesMap[outputPipeName];
                  _context.next = 10;
                  return pipe.write(message);

                case 10:
                  vbSuccess = _context.sent;

                case 11:
                  return _context.abrupt("return", _returnType.assert(vbSuccess));

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function sendMessage(_x, _x2) {
          return _sendMessage.apply(this, arguments);
        }

        return sendMessage;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Junction() {
      var _this;

      _classCallCheck(this, Junction);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_inputPipes", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_outputPipes", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pipesMap", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pipeTypesMap", _descriptor4, _assertThisInitialized(_this));

      _this._inputPipes = [];
      _this._outputPipes = [];
      _this._pipesMap = {};
      _this._pipeTypesMap = {};
      return _this;
    }

    return Junction;
  }(CoreObject), _class3.__filename = __filename$t, _class3.object = {}, _class3.INPUT = 'input', _class3.OUTPUT = 'output', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "INPUT", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "INPUT"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "OUTPUT", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "OUTPUT"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_inputPipes", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_outputPipes", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_pipesMap", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_pipeTypesMap", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "registerPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasInputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasInputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasOutputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasOutputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removePipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removePipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrievePipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrievePipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addPipeListener", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addPipeListener"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendMessage", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendMessage"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$u = '/pipes/JunctionMediator.js';

var PipeMessageInterface$8 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var NotificationInterface$d = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var JunctionMediator = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _init, _init2, _init3, _init4, _init5, _class3, _temp;

  var _Module$NS = Module.NS,
      Mediator = _Module$NS.Mediator,
      Junction = _Module$NS.Junction,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var INPUT = Junction.INPUT,
      OUTPUT = Junction.OUTPUT;
  var JunctionMediator = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("JunctionMediator", flowRuntime_umd["extends"](Mediator), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("ACCEPT_INPUT_PIPE", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("ACCEPT_OUTPUT_PIPE", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("REMOVE_PIPE", flowRuntime_umd.string()), flowRuntime_umd.method("_junction", flowRuntime_umd["return"](flowRuntime_umd.ref(Junction))), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$d, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
  }), flowRuntime_umd.method("handlePipeMessage", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$8)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Mediator) {
    _inherits(JunctionMediator, _Mediator);

    var _super = _createSuper(JunctionMediator);

    function JunctionMediator() {
      _classCallCheck(this, JunctionMediator);

      return _super.apply(this, arguments);
    }

    _createClass(JunctionMediator, [{
      key: "listNotificationInterests",
      value: function listNotificationInterests() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

        return _returnType3.assert([JunctionMediator.ACCEPT_INPUT_PIPE, JunctionMediator.ACCEPT_OUTPUT_PIPE, JunctionMediator.REMOVE_PIPE]);
      }
    }, {
      key: "handleNotification",
      value: function handleNotification(aoNotification) {
        var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

        var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$d, flowRuntime_umd.flowInto(T));

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

        flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
        var pipeName = aoNotification.getType();

        switch (aoNotification.getName()) {
          case JunctionMediator.ACCEPT_INPUT_PIPE:
            var inputPipe = aoNotification.getBody();

            if (this._junction.registerPipe(pipeName, INPUT, inputPipe)) {
              this._junction.addPipeListener(pipeName, this, this.handlePipeMessage);
            }

            break;

          case JunctionMediator.ACCEPT_OUTPUT_PIPE:
            var outputPipe = aoNotification.getBody();

            this._junction.registerPipe(pipeName, OUTPUT, outputPipe);

            break;

          case JunctionMediator.REMOVE_PIPE:
            this._junction.removePipe(pipeName);

        }
      }
    }, {
      key: "handlePipeMessage",
      value: function () {
        var _handlePipeMessage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoMessage) {
          var _aoMessageType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$8);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);
                  _context.next = 5;
                  return this.send(aoMessage.getType(), aoMessage);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handlePipeMessage(_x) {
          return _handlePipeMessage.apply(this, arguments);
        }

        return handlePipeMessage;
      }()
    }, {
      key: "_junction",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.ref(Junction));

        return _returnType2.assert(this.getViewComponent());
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return JunctionMediator;
  }(Mediator), _class3.__filename = __filename$u, _class3.object = {}, _class3.ACCEPT_INPUT_PIPE = 'acceptInputPipe', _class3.ACCEPT_OUTPUT_PIPE = 'acceptOutputPipe', _class3.REMOVE_PIPE = 'removePipe', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ACCEPT_INPUT_PIPE", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "ACCEPT_INPUT_PIPE"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ACCEPT_OUTPUT_PIPE", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "ACCEPT_OUTPUT_PIPE"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "REMOVE_PIPE", [_dec5, property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "REMOVE_PIPE"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "_junction", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "_junction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handlePipeMessage", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handlePipeMessage"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$v = '/pipes/PipeAwareModule.js';

// This file is part of LeanES.
var PipeFittingInterface$5 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeAwareInterface = flowRuntime_umd.type("PipeAwareInterface", flowRuntime_umd.object(flowRuntime_umd.property("acceptInputPipe", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.ref(PipeFittingInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("acceptOutputPipe", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.ref(PipeFittingInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var PipeAwareInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeAwareInterface;
});
var FacadeInterface$3 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var PipeAwareModule = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      JunctionMediator = _Module$NS.JunctionMediator,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var ACCEPT_INPUT_PIPE = JunctionMediator.ACCEPT_INPUT_PIPE,
      ACCEPT_OUTPUT_PIPE = JunctionMediator.ACCEPT_OUTPUT_PIPE;
  var PipeAwareModule = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeAwareModule", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("STDOUT", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDIN", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDLOG", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDSHELL", flowRuntime_umd.string()), flowRuntime_umd.property("facade", flowRuntime_umd.ref(FacadeInterface$3)), flowRuntime_umd.method("acceptInputPipe", flowRuntime_umd.param("asName", flowRuntime_umd.any()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.any())), flowRuntime_umd.method("acceptOutputPipe", flowRuntime_umd.param("asName", flowRuntime_umd.any()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.any())), flowRuntime_umd.method("send", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
  }), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoFacade", flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$3)))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd.ref(FacadeInterface$3)), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeAwareModule, _CoreObject);

    var _super = _createSuper(PipeAwareModule);

    _createClass(PipeAwareModule, [{
      key: "acceptInputPipe",
      value: function acceptInputPipe(asName, aoPipe) {
        this.facade.send(ACCEPT_INPUT_PIPE, aoPipe, asName);
      }
    }, {
      key: "acceptOutputPipe",
      value: function acceptOutputPipe(asName, aoPipe) {
        this.facade.send(ACCEPT_OUTPUT_PIPE, aoPipe, asName);
      }
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asName, aoBody, asType) {
          var T, _asNameType, _aoBodyType, _asTypeType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _asNameType = flowRuntime_umd.string();
                  _aoBodyType = flowRuntime_umd.flowInto(T);
                  _asTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asName", _asNameType).assert(asName);
                  flowRuntime_umd.param("aoBody", _aoBodyType).assert(aoBody);
                  flowRuntime_umd.param("asType", _asTypeType).assert(asType);

                  if (!(this.facade != null)) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 11;
                  return this.facade.send(asName, aoBody, asType);

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function send(_x, _x2, _x3) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function PipeAwareModule(aoFacade) {
      var _this;

      _classCallCheck(this, PipeAwareModule);

      var _aoFacadeType = flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$3));

      flowRuntime_umd.param("aoFacade", _aoFacadeType).assert(aoFacade);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "facade", _descriptor, _assertThisInitialized(_this));

      if (aoFacade != null) {
        _this.facade = aoFacade;
      }

      flowRuntime_umd.ref(PipeAwareInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    return PipeAwareModule;
  }(CoreObject), _class3.__filename = __filename$v, _class3.object = {}, _class3.STDOUT = 'standardOutput', _class3.STDIN = 'standardInput', _class3.STDLOG = 'standardLog', _class3.STDSHELL = 'standardShell', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDOUT", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "STDOUT"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDIN", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "STDIN"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDLOG", [_dec5, property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "STDLOG"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDSHELL", [_dec6, property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "STDSHELL"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "facade", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "acceptInputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptInputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptOutputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptOutputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$w = '/pipes/LineControlMessage.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var LineControlMessage = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LineControlMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LineControlMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FLUSH", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SORT", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FIFO", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string())))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(LineControlMessage, _PipeMessage);

    var _super = _createSuper(LineControlMessage);

    _createClass(LineControlMessage, null, [{
      key: "BASE",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType.assert("".concat(PipeMessage.BASE, "queue/"));
      }
    }, {
      key: "FLUSH",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType2.assert("".concat(this.BASE, "flush"));
      }
    }, {
      key: "SORT",
      get: function get() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType3.assert("".concat(this.BASE, "sort"));
      }
    }, {
      key: "FIFO",
      get: function get() {
        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType4.assert("".concat(this.BASE, "fifo"));
      }
    }]);

    function LineControlMessage(asType) {
      _classCallCheck(this, LineControlMessage);

      var _asTypeType = flowRuntime_umd.string();

      flowRuntime_umd.param("asType", _asTypeType).assert(asType);
      return _super.call(this, asType);
    }

    return LineControlMessage;
  }(PipeMessage), _class3.__filename = __filename$w, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "FLUSH", [property], Object.getOwnPropertyDescriptor(_class2, "FLUSH"), _class2), _applyDecoratedDescriptor(_class2, "SORT", [property], Object.getOwnPropertyDescriptor(_class2, "SORT"), _class2), _applyDecoratedDescriptor(_class2, "FIFO", [property], Object.getOwnPropertyDescriptor(_class2, "FIFO"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$x = '/pipes/Line.js';

var PipeFittingInterface$6 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeMessageInterface$9 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var Line = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      PipeMessage = _Module$NS.PipeMessage,
      LineControlMessage = _Module$NS.LineControlMessage,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var NORMAL = PipeMessage.NORMAL;
  var SORT = LineControlMessage.SORT,
      FLUSH = LineControlMessage.FLUSH,
      FIFO = LineControlMessage.FIFO;
  var Line = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Line", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mode", flowRuntime_umd.string()), flowRuntime_umd.property("_messages", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeMessageInterface$9)))), flowRuntime_umd.method("_sortMessagesByPriority", flowRuntime_umd.param("msgA", flowRuntime_umd.ref(PipeMessageInterface$9)), flowRuntime_umd.param("msgB", flowRuntime_umd.ref(PipeMessageInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("_store", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$9)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_flush", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$6)))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeMessageInterface$9)))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(Line, _Pipe);

    var _super = _createSuper(Line);

    _createClass(Line, [{
      key: "_sortMessagesByPriority",
      value: function _sortMessagesByPriority(msgA, msgB) {
        var _msgAType = flowRuntime_umd.ref(PipeMessageInterface$9);

        var _msgBType = flowRuntime_umd.ref(PipeMessageInterface$9);

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.number());

        flowRuntime_umd.param("msgA", _msgAType).assert(msgA);
        flowRuntime_umd.param("msgB", _msgBType).assert(msgB);
        var vnNum = 0;

        if (msgA.getPriority() < msgB.getPriority()) {
          vnNum = -1;
        }

        if (msgA.getPriority() > msgB.getPriority()) {
          vnNum = 1;
        }

        return _returnType3.assert(vnNum);
      }
    }, {
      key: "_store",
      value: function _store(aoMessage) {
        var _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$9);

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);

        if (this._messages == null) {
          this._messages = [];
        }

        this._messages.push(aoMessage);

        if (this._mode === SORT) {
          this._messages.sort(this._sortMessagesByPriority.bind(this));
        }
      }
    }, {
      key: "_flush",
      value: function () {
        var _flush2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType, voMessage, vbSuccess, ok;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  vbSuccess = true;

                  if (this._messages == null) {
                    this._messages = [];
                  }

                case 3:
                  if (!((voMessage = this._messages.shift()) != null)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 6;
                  return this._output.write(voMessage);

                case 6:
                  ok = _context.sent;

                  if (!ok) {
                    vbSuccess = false;
                  }

                  _context.next = 3;
                  break;

                case 10:
                  return _context.abrupt("return", _returnType.assert(vbSuccess));

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _flush() {
          return _flush2.apply(this, arguments);
        }

        return _flush;
      }()
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoMessage) {
          var _aoMessageType2, _returnType2, vbSuccess;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _aoMessageType2 = flowRuntime_umd.ref(PipeMessageInterface$9);
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType2).assert(aoMessage);
                  vbSuccess = true;
                  _context2.t0 = aoMessage.getType();
                  _context2.next = _context2.t0 === NORMAL ? 8 : _context2.t0 === FLUSH ? 10 : _context2.t0 === SORT ? 14 : _context2.t0 === FIFO ? 14 : 15;
                  break;

                case 8:
                  this._store(aoMessage);

                  return _context2.abrupt("break", 15);

                case 10:
                  _context2.next = 12;
                  return this._flush();

                case 12:
                  vbSuccess = _context2.sent;
                  return _context2.abrupt("break", 15);

                case 14:
                  this._mode = aoMessage.getType();

                case 15:
                  return _context2.abrupt("return", _returnType2.assert(vbSuccess));

                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function write(_x) {
          return _write.apply(this, arguments);
        }

        return write;
      }()
    }]);

    function Line() {
      var _this;

      var aoOutput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      _classCallCheck(this, Line);

      var _aoOutputType = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$6));

      flowRuntime_umd.param("aoOutput", _aoOutputType).assert(aoOutput);
      _this = _super.call(this, aoOutput);

      _initializerDefineProperty(_this, "_mode", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_messages", _descriptor2, _assertThisInitialized(_this));

      return _this;
    }

    return Line;
  }(Pipe), _class3.__filename = __filename$x, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mode", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return SORT;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_messages", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_sortMessagesByPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_sortMessagesByPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_store", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_store"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_flush", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_flush"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$y = '/pipes/TeeMerge.js';

var PipeFittingInterface$7 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var TeeMerge = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var TeeMerge = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("TeeMerge", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("connectInput", flowRuntime_umd.param("aoInput", flowRuntime_umd.ref(PipeFittingInterface$7)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("input1", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7))), flowRuntime_umd.param("input2", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7)))))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(TeeMerge, _Pipe);

    var _super = _createSuper(TeeMerge);

    _createClass(TeeMerge, [{
      key: "connectInput",
      value: function connectInput(aoInput) {
        var _aoInputType = flowRuntime_umd.ref(PipeFittingInterface$7);

        var _returnType = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("aoInput", _aoInputType).assert(aoInput);
        return _returnType.assert(aoInput.connect(this));
      }
    }]);

    function TeeMerge() {
      var _this;

      var input1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var input2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, TeeMerge);

      var _input1Type = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7));

      var _input2Type = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7));

      flowRuntime_umd.param("input1", _input1Type).assert(input1);
      flowRuntime_umd.param("input2", _input2Type).assert(input2);
      _this = _super.apply(this, arguments);

      if (input1 != null) {
        _this.connectInput(input1);
      }

      if (input2 != null) {
        _this.connectInput(input2);
      }

      return _this;
    }

    return TeeMerge;
  }(Pipe), _class3.__filename = __filename$y, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "connectInput", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connectInput"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$z = '/pipes/TeeSplit.js';

var PipeMessageInterface$a = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$8 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var splice$4 = [].splice;
var TeeSplit = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var TeeSplit = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("TeeSplit", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_outputs", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeFittingInterface$8)))), flowRuntime_umd.method("connect", flowRuntime_umd.param("aoOutput", flowRuntime_umd.ref(PipeFittingInterface$8)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8)))), flowRuntime_umd.method("disconnectFitting", flowRuntime_umd.param("aoTarget", flowRuntime_umd.ref(PipeFittingInterface$8)), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$8))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("output1", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8))), flowRuntime_umd.param("output2", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8)))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeFittingInterface$8)))), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(TeeSplit, _CoreObject);

    var _super = _createSuper(TeeSplit);

    _createClass(TeeSplit, [{
      key: "connect",
      value: function connect(aoOutput) {
        var _aoOutputType = flowRuntime_umd.ref(PipeFittingInterface$8);

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("aoOutput", _aoOutputType).assert(aoOutput);

        if (this._outputs == null) {
          this._outputs = [];
        }

        this._outputs.push(aoOutput);

        return _returnType2.assert(true);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8)));

        if (this._outputs == null) {
          this._outputs = [];
        }

        return _returnType3.assert(this._outputs.pop());
      }
    }, {
      key: "disconnectFitting",
      value: function disconnectFitting(aoTarget) {
        var _aoTargetType = flowRuntime_umd.ref(PipeFittingInterface$8);

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$8));

        flowRuntime_umd.param("aoTarget", _aoTargetType).assert(aoTarget);
        var ref1;
        var voRemoved = null;

        if (this._outputs == null) {
          this._outputs = [];
        }

        var alOutputs = this._outputs;
        var j;

        for (var i = j = 0, len = alOutputs.length; j < len; i = ++j) {
          var aoOutput = alOutputs[i];

          if (aoOutput === aoTarget) {
            splice$4.apply(this._outputs, [i, i - i + 1].concat(ref1 = [])), ref1;
            voRemoved = aoOutput;
            break;
          }
        }

        return _returnType4.assert(voRemoved);
      }
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoMessage) {
          var _aoMessageType, _returnType, vbSuccess, _iterator, _step, voOutput;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoMessageType = flowRuntime_umd.ref(PipeMessageInterface$a);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("aoMessage", _aoMessageType).assert(aoMessage);
                  vbSuccess = true;
                  _iterator = _createForOfIteratorHelper(this._outputs);
                  _context.prev = 5;

                  _iterator.s();

                case 7:
                  if ((_step = _iterator.n()).done) {
                    _context.next = 15;
                    break;
                  }

                  voOutput = _step.value;
                  _context.next = 11;
                  return voOutput.write(aoMessage);

                case 11:
                  if (_context.sent) {
                    _context.next = 13;
                    break;
                  }

                  return _context.abrupt("return", _returnType.assert(vbSuccess = false));

                case 13:
                  _context.next = 7;
                  break;

                case 15:
                  _context.next = 20;
                  break;

                case 17:
                  _context.prev = 17;
                  _context.t0 = _context["catch"](5);

                  _iterator.e(_context.t0);

                case 20:
                  _context.prev = 20;

                  _iterator.f();

                  return _context.finish(20);

                case 23:
                  return _context.abrupt("return", _returnType.assert(vbSuccess));

                case 24:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[5, 17, 20, 23]]);
        }));

        function write(_x) {
          return _write.apply(this, arguments);
        }

        return write;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function TeeSplit() {
      var _this;

      var output1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var output2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, TeeSplit);

      var _output1Type = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8));

      var _output2Type = flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8));

      flowRuntime_umd.param("output1", _output1Type).assert(output1);
      flowRuntime_umd.param("output2", _output2Type).assert(output2);
      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_outputs", _descriptor, _assertThisInitialized(_this));

      if (output1 != null) {
        _this.connect(output1);
      }

      if (output2 != null) {
        _this.connect(output2);
      }

      flowRuntime_umd.ref(PipeFittingInterface$8).assert(_assertThisInitialized(_this));
      return _this;
    }

    return TeeSplit;
  }(CoreObject), _class3.__filename = __filename$z, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_outputs", [_dec3, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnectFitting", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnectFitting"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var _dec$2, _dec2$2, _class$6, _class2$2, _init$2, _init2$2, _descriptor$2, _class3$2, _temp$2;
var _PureMVC$NS = PureMVC.NS,
    initialize$2 = _PureMVC$NS.initialize,
    meta$2 = _PureMVC$NS.meta,
    nameBy$2 = _PureMVC$NS.nameBy,
    freeze$1 = _PureMVC$NS.freeze,
    resolver$2 = _PureMVC$NS.resolver,
    constant$2 = _PureMVC$NS.constant;
var Pipes = (_dec$2 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Pipes", flowRuntime_umd["extends"](PureMVC), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()))), _dec2$2 = resolver$2(require, function (name) {
  return require(name);
}), _dec$2(_class$6 = TeeSplit(_class$6 = TeeMerge(_class$6 = Line(_class$6 = LineControlMessage(_class$6 = PipeAwareModule(_class$6 = JunctionMediator(_class$6 = Junction(_class$6 = Filter(_class$6 = LogFilterMessage(_class$6 = LogMessage(_class$6 = FilterControlMessage(_class$6 = PipeListener(_class$6 = PipeMessage(_class$6 = Pipe(_class$6 = initialize$2(_class$6 = _dec2$2(_class$6 = (_class2$2 = (_temp$2 = _class3$2 = /*#__PURE__*/function (_PureMVC) {
  _inherits(Pipes, _PureMVC);

  var _super = _createSuper(Pipes);

  function Pipes() {
    var _this;

    _classCallCheck(this, Pipes);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$2, _assertThisInitialized(_this));

    return _this;
  }

  return Pipes;
}(PureMVC), _class3$2.__filename = 'Pipes', _class3$2.object = {}, _temp$2), (_applyDecoratedDescriptor(_class2$2, "__filename", [nameBy$2], (_init$2 = Object.getOwnPropertyDescriptor(_class2$2, "__filename"), _init$2 = _init$2 ? _init$2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$2;
  }
}), _class2$2), _applyDecoratedDescriptor(_class2$2, "object", [meta$2], (_init2$2 = Object.getOwnPropertyDescriptor(_class2$2, "object"), _init2$2 = _init2$2 ? _init2$2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$2;
  }
}), _class2$2), _descriptor$2 = _applyDecoratedDescriptor(_class2$2.prototype, "ROOT", [constant$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$4;
  }
})), _class2$2)) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6);
var Pipes$1 = freeze$1(Pipes);

var __filename$A = '/leanes/utils/genRandomAlphaNumbers.js';

var genRandomAlphaNumbers = (function (Module) {
  Module.defineUtil(__filename$A, function (length) {
    return crypto$1.randomBytes(length).toString('hex');
  });
});

var __filename$B = '/leanes/utils/hashPassword.js';

var hashPassword = (function (Module) {
  Module.defineUtil(__filename$B, function (password) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _opts$hashMethod = opts.hashMethod,
        method = _opts$hashMethod === void 0 ? 'sha256' : _opts$hashMethod,
        _opts$saltLength = opts.saltLength,
        saltLength = _opts$saltLength === void 0 ? 16 : _opts$saltLength;
    var salt = crypto$1.randomBytes(saltLength).toString('hex');
    var hash = crypto$1.createHash(method).update(salt + password).digest('hex');
    return {
      method: method,
      salt: salt,
      hash: hash
    };
  });
});

var __filename$C = '/leanes/utils/jwtDecode.js';

var jwtDecode = (function (Module) {
  Module.defineUtil(__filename$C, flowRuntime_umd.annotate( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asKey, asToken) {
      var abNoVerify,
          _asKeyType,
          _asTokenType,
          _abNoVerifyType,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              abNoVerify = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
              _asKeyType = flowRuntime_umd.string();
              _asTokenType = flowRuntime_umd.string();
              _abNoVerifyType = flowRuntime_umd["boolean"]();
              flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
              flowRuntime_umd.param("asToken", _asTokenType).assert(asToken);
              flowRuntime_umd.param("abNoVerify", _abNoVerifyType).assert(abNoVerify);
              _context.next = 9;
              return abNoVerify ? jwt.decode(asToken) : jwt.verify(asToken, asKey);

            case 9:
              return _context.abrupt("return", _context.sent);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asToken", flowRuntime_umd.string()), flowRuntime_umd.param("abNoVerify", flowRuntime_umd["boolean"]()))));
});

var __filename$D = '/leanes/utils/jwtEncode.js';

var jwtEncode = (function (Module) {
  Module.defineUtil(__filename$D, flowRuntime_umd.annotate( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asKey, asMessage, asAlgorithm) {
      var _asKeyType, _asMessageType, _asAlgorithmType;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _asKeyType = flowRuntime_umd.string();
              _asMessageType = flowRuntime_umd.any();
              _asAlgorithmType = flowRuntime_umd.string();
              flowRuntime_umd.param("asKey", _asKeyType).assert(asKey);
              flowRuntime_umd.param("asMessage", _asMessageType).assert(asMessage);
              flowRuntime_umd.param("asAlgorithm", _asAlgorithmType).assert(asAlgorithm);
              _context.next = 8;
              return jwt.sign(asMessage, asKey, {
                algorithm: asAlgorithm
              });

            case 8:
              return _context.abrupt("return", _context.sent);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }(), flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asMessage", flowRuntime_umd.any()), flowRuntime_umd.param("asAlgorithm", flowRuntime_umd.string()))));
});

var __filename$E = '/leanes/utils/makeHash.js';

var makeHash = (function (Module) {
  var jsonStringify = Module.NS.Utils.jsonStringify;
  Module.defineUtil(__filename$E, flowRuntime_umd.annotate(function (algorithm, data) {
    var _algorithmType = flowRuntime_umd.string();

    var _dataType = flowRuntime_umd.any();

    var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

    flowRuntime_umd.param("algorithm", _algorithmType).assert(algorithm);
    flowRuntime_umd.param("data", _dataType).assert(data);
    var str = jsonStringify(data);
    return _returnType.assert(crypto$1.createHash(algorithm).update(str).digest('hex'));
  }, flowRuntime_umd["function"](flowRuntime_umd.param("algorithm", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.string()))));
});

var __filename$F = '/leanes/utils/makeSignature.js';

var makeSignature = (function (Module) {
  var jsonStringify = Module.NS.Utils.jsonStringify;
  Module.defineUtil(__filename$F, flowRuntime_umd.annotate(function (algorithm, secret, attributes) {
    var _algorithmType = flowRuntime_umd.string();

    var _secretType = flowRuntime_umd.string();

    var _attributesType = flowRuntime_umd.any();

    var _returnType = flowRuntime_umd["return"](flowRuntime_umd.string());

    flowRuntime_umd.param("algorithm", _algorithmType).assert(algorithm);
    flowRuntime_umd.param("secret", _secretType).assert(secret);
    flowRuntime_umd.param("attributes", _attributesType).assert(attributes);
    var str = jsonStringify(attributes);
    return _returnType.assert(crypto$1.createHmac(algorithm, secret).update(str).digest('hex'));
  }, flowRuntime_umd["function"](flowRuntime_umd.param("algorithm", flowRuntime_umd.string()), flowRuntime_umd.param("secret", flowRuntime_umd.string()), flowRuntime_umd.param("attributes", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.string()))));
});

var __filename$G = '/leanes/utils/request.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var LegacyResponseInterface = flowRuntime_umd.type("LegacyResponseInterface", function (LegacyResponseInterface) {
  var T = LegacyResponseInterface.typeParameter("T", undefined, flowRuntime_umd.tdz(function () {
    return AxiosResponse;
  }, "AxiosResponse"));
  return flowRuntime_umd.object(flowRuntime_umd.property("body", flowRuntime_umd.nullable(flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("data")))), flowRuntime_umd.property("headers", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("headers"))), flowRuntime_umd.property("status", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("status"))), flowRuntime_umd.property("message", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("statusText"))));
});

var AxiosResponse = flowRuntime_umd.type("AxiosResponse", function (AxiosResponse) {
  var T = AxiosResponse.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = AxiosResponse.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("data", R), flowRuntime_umd.property("status", flowRuntime_umd.number()), flowRuntime_umd.property("statusText", flowRuntime_umd.string()), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("config", flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)), flowRuntime_umd.property("request", flowRuntime_umd.nullable(flowRuntime_umd.any())));
});
var AxiosTransformer = flowRuntime_umd.type("AxiosTransformer", function (AxiosTransformer) {
  var T = AxiosTransformer.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("data", T), flowRuntime_umd.param("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd["return"](flowRuntime_umd.ref("object")))));
});
var AxiosBasicCredentials = flowRuntime_umd.type("AxiosBasicCredentials", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())));
var AxiosProxyConfig = flowRuntime_umd.type("AxiosProxyConfig", flowRuntime_umd.object(flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("port", flowRuntime_umd.number()), flowRuntime_umd.property("auth", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())), true), flowRuntime_umd.property("protocol", flowRuntime_umd.string(), true)));
var Method = flowRuntime_umd.type("Method", flowRuntime_umd.union(flowRuntime_umd.string("get"), flowRuntime_umd.string("GET"), flowRuntime_umd.string("delete"), flowRuntime_umd.string("DELETE"), flowRuntime_umd.string("head"), flowRuntime_umd.string("HEAD"), flowRuntime_umd.string("options"), flowRuntime_umd.string("OPTIONS"), flowRuntime_umd.string("post"), flowRuntime_umd.string("POST"), flowRuntime_umd.string("put"), flowRuntime_umd.string("PUT"), flowRuntime_umd.string("patch"), flowRuntime_umd.string("PATCH")));
var ResponseType = flowRuntime_umd.type("ResponseType", flowRuntime_umd.union(flowRuntime_umd.string("arraybuffer"), flowRuntime_umd.string("blob"), flowRuntime_umd.string("document"), flowRuntime_umd.string("json"), flowRuntime_umd.string("text"), flowRuntime_umd.string("stream")));
var RequestArgumentsT = flowRuntime_umd.type("RequestArgumentsT", function (RequestArgumentsT) {
  var T = RequestArgumentsT.typeParameter("T"),
      R = RequestArgumentsT.typeParameter("R", undefined, T);
  return flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)));
}); // export type AxiosPromise<T = any, R = T> = Promise<AxiosResponse<T, R>>;

var Config = flowRuntime_umd.type("Config", function (Config) {
  var T = Config.typeParameter("T"),
      R = Config.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("url", flowRuntime_umd.string(), true), flowRuntime_umd.property("method", Method, true), flowRuntime_umd.property("baseURL", flowRuntime_umd.string(), true), flowRuntime_umd.property("transformRequest", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, T), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, T)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("transformResponse", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, R), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, R)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("params", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("paramsSerializer", flowRuntime_umd["function"](flowRuntime_umd.param("params", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("data", flowRuntime_umd.any(), true), flowRuntime_umd.property("body", flowRuntime_umd.any(), true), flowRuntime_umd.property("form", flowRuntime_umd.any(), true), flowRuntime_umd.property("timeout", flowRuntime_umd.number(), true), flowRuntime_umd.property("withCredentials", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("adapter", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T"),
        R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(AxiosResponse, T, R)))];
  }), true), flowRuntime_umd.property("auth", AxiosBasicCredentials, true), flowRuntime_umd.property("responseType", ResponseType, true), flowRuntime_umd.property("xsrfCookieName", flowRuntime_umd.string(), true), flowRuntime_umd.property("xsrfHeaderName", flowRuntime_umd.string(), true), flowRuntime_umd.property("onUploadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("onDownloadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("maxContentLength", flowRuntime_umd.number(), true), flowRuntime_umd.property("validateStatus", flowRuntime_umd["function"](flowRuntime_umd.param("status", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), true), flowRuntime_umd.property("followRedirect", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("maxRedirects", flowRuntime_umd.number(), true), flowRuntime_umd.property("socketPath", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["null"]()), true), flowRuntime_umd.property("httpAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("httpsAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("proxy", flowRuntime_umd.union(AxiosProxyConfig, flowRuntime_umd["boolean"](false)), true), flowRuntime_umd.property("cancelToken", flowRuntime_umd.tdz(function () {
    return CancelToken;
  }, "CancelToken"), true));
});
var LegacyRequestInterface = flowRuntime_umd.type("LegacyRequestInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](function (_fn2) {
  var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn2.typeParameter("R", undefined, T),
      L = _fn2.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("head", flowRuntime_umd["function"](function (_fn3) {
  var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn3.typeParameter("R", undefined, T),
      L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("options", flowRuntime_umd["function"](function (_fn4) {
  var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn4.typeParameter("R", undefined, T),
      L = _fn4.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("get", flowRuntime_umd["function"](function (_fn5) {
  var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn5.typeParameter("R", undefined, T),
      L = _fn5.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("post", flowRuntime_umd["function"](function (_fn6) {
  var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn6.typeParameter("R", undefined, T),
      L = _fn6.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("put", flowRuntime_umd["function"](function (_fn7) {
  var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn7.typeParameter("R", undefined, T),
      L = _fn7.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("patch", flowRuntime_umd["function"](function (_fn8) {
  var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn8.typeParameter("R", undefined, T),
      L = _fn8.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("delete", flowRuntime_umd["function"](function (_fn9) {
  var T = _fn9.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn9.typeParameter("R", undefined, T),
      L = _fn9.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
}))));

var Cancel = flowRuntime_umd.type("Cancel", flowRuntime_umd.object(flowRuntime_umd.property("message", flowRuntime_umd.string())));
var Canceler = flowRuntime_umd.type("Canceler", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("message", flowRuntime_umd.string(), true), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenStatic = flowRuntime_umd.type("CancelTokenStatic", flowRuntime_umd.object(flowRuntime_umd.property("new", flowRuntime_umd["function"](flowRuntime_umd.param("executor", flowRuntime_umd["function"](flowRuntime_umd.param("cancel", Canceler), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelToken;
}, "CancelToken")))), flowRuntime_umd.property("source", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelTokenSource;
}, "CancelTokenSource"))))));
var CancelToken = flowRuntime_umd.type("CancelToken", flowRuntime_umd.object(flowRuntime_umd.property("promise", flowRuntime_umd.ref("Promise", Cancel)), flowRuntime_umd.property("reason", Cancel, true), flowRuntime_umd.property("throwIfRequested", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenSource = flowRuntime_umd.type("CancelTokenSource", flowRuntime_umd.object(flowRuntime_umd.property("token", CancelToken), flowRuntime_umd.property("cancel", Canceler)));
var AxiosInterceptorManager = flowRuntime_umd.type("AxiosInterceptorManager", function (AxiosInterceptorManager) {
  var V = AxiosInterceptorManager.typeParameter("V");
  return flowRuntime_umd.object(flowRuntime_umd.property("use", flowRuntime_umd["function"](flowRuntime_umd.param("onFulfilled", flowRuntime_umd["function"](flowRuntime_umd.param("value", V), flowRuntime_umd["return"](flowRuntime_umd.union(V, flowRuntime_umd.ref("Promise", V)))), true), flowRuntime_umd.param("onRejected", flowRuntime_umd["function"](flowRuntime_umd.param("error", flowRuntime_umd.mixed()), flowRuntime_umd["return"](flowRuntime_umd.mixed())), true), flowRuntime_umd["return"](flowRuntime_umd.number()))), flowRuntime_umd.property("eject", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))));
});
var RequestT = flowRuntime_umd.type("RequestT", flowRuntime_umd.spread(LegacyRequestInterface, flowRuntime_umd.object(flowRuntime_umd.property("defaults", flowRuntime_umd.intersection(flowRuntime_umd.object(flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"))), flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("interceptors", flowRuntime_umd.object(flowRuntime_umd.property("request", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("response", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(AxiosResponse, flowRuntime_umd.mixed()))))), flowRuntime_umd.property("CancelToken", CancelTokenStatic), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential())), flowRuntime_umd["return"](LegacyRequestInterface))), flowRuntime_umd.property("all", flowRuntime_umd["function"](function (_fn10) {
  var T = _fn10.typeParameter("T");

  return [flowRuntime_umd.param("values", flowRuntime_umd.array(flowRuntime_umd.union(T, flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))];
})), flowRuntime_umd.property("spread", flowRuntime_umd["function"](function (_fn11) {
  var T = _fn11.typeParameter("T"),
      R = _fn11.typeParameter("R");

  return [flowRuntime_umd.param("callback", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R))), flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("array", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R)))];
})))));
 // export type RequestT = RequestT;

var LegacyResponseInterface$1 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$1 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$1 = flowRuntime_umd.tdz(function () {
  return Config;
});
var request = (function (Module) {
  var assign = Module.NS.Utils.assign;
  var convertToAxiosOptions = flowRuntime_umd.annotate(function convertToAxiosOptions(asMethod, asUrl) {
    var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asMethodType = flowRuntime_umd.string();

    var _asUrlType = flowRuntime_umd.string();

    var _ahOptionsType = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(Config$1, T, R));

    flowRuntime_umd.param("asMethod", _asMethodType).assert(asMethod);
    flowRuntime_umd.param("asUrl", _asUrlType).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType).assert(ahOptions);
    ahOptions.headers = ahOptions.headers || {};
    ahOptions.headers['Accept'] = ahOptions.headers['Accept'] || ahOptions.headers['accept'] || '*/*';
    delete ahOptions.headers['accept'];
    var vhOptions = assign({}, ahOptions, {
      method: asMethod,
      url: asUrl
    });

    if (vhOptions.followRedirect) {
      vhOptions.maxRedirects = vhOptions.maxRedirects || 10;
    } else {
      delete vhOptions.maxRedirects;
    }

    delete vhOptions.followRedirect;
    var data = vhOptions.body || vhOptions.form;
    delete vhOptions.body;
    delete vhOptions.form;
    vhOptions.data = vhOptions.data || data;
    vhOptions.timeout = vhOptions.timeout || 2 * 60 * 1000; // ms

    vhOptions.maxContentLength = vhOptions.maxContentLength || 2 * 1024 * 1024; //byte

    return _returnType.assert(vhOptions);
  }, flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, T);

    var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref(Config$1, T, R))];
  }));
  var request = flowRuntime_umd.annotate(function request(asMethod, asUrl) {
    var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asMethodType2 = flowRuntime_umd.string();

    var _asUrlType2 = flowRuntime_umd.string();

    var _ahOptionsType2 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType2 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asMethod", _asMethodType2).assert(asMethod);
    flowRuntime_umd.param("asUrl", _asUrlType2).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType2).assert(ahOptions);
    var vhOptions = convertToAxiosOptions(asMethod, asUrl, ahOptions); // console.log('/////////////////////</L>', axios.request(vhOptions));

    return axios.request(vhOptions).then(flowRuntime_umd.annotate(function (res) {
      var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
      var R = flowRuntime_umd.typeParameter("R", undefined, T);

      var _resType = flowRuntime_umd.ref(AxiosResponse$1, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R));

      flowRuntime_umd.param("res", _resType).assert(res);
      return {
        body: res.data,
        headers: res.headers,
        status: res.status,
        message: res.statusText
      };
    }, flowRuntime_umd["function"](function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn2.typeParameter("R", undefined, T);

      return [flowRuntime_umd.param("res", flowRuntime_umd.ref(AxiosResponse$1, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R)))];
    })))["catch"](function (err) {
      console.log('Error in request', err.code, err.response, err.message, err);
      return {
        body: undefined,
        headers: {},
        status: err.code || err.response && err.response.status || 500,
        message: err.message
      };
    }).then(function (_arg) {
      return _returnType2.assert(_arg);
    });
  }, flowRuntime_umd["function"](function (_fn3) {
    var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn3.typeParameter("R", undefined, T);

    var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  Reflect.defineProperty(request, 'defaults', {
    value: new Proxy(axios.defaults, {})
  });
  Reflect.defineProperty(request, 'interceptors', {
    value: new Proxy(axios.interceptors, {})
  });
  Reflect.defineProperty(request, 'all', {
    value: new Proxy(axios.all, {})
  });
  Reflect.defineProperty(request, 'spread', {
    value: new Proxy(axios.spread, {})
  });
  Reflect.defineProperty(request, 'CancelToken', {
    value: new Proxy(axios.CancelToken, {})
  });
  Reflect.defineProperty(request, 'create', {
    value: new Proxy(function () {}, {
      apply: function apply(tmp1, tmp2, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            defaultOpts = _ref2[0];

        return new Proxy(request, {
          apply: function apply(target, thisValue, _ref3) {
            var _ref4 = _slicedToArray(_ref3, 3),
                asMethod = _ref4[0],
                asUrl = _ref4[1],
                _ref4$ = _ref4[2],
                ahOptions = _ref4$ === void 0 ? {} : _ref4$;

            return target.call(thisValue, asMethod, asUrl, assign({}, defaultOpts, ahOptions));
          },
          get: function get(target, name, receiver) {
            switch (false) {
              case !(name === 'get'):
              case !(name === 'delete'):
              case !(name === 'head'):
              case !(name === 'options'):
              case !(name === 'post'):
              case !(name === 'put'):
              case !(name === 'patch'):
                return function (asUrl) {
                  var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                  return target[name].call(target, asUrl, assign({}, defaultOpts, ahOptions));
                };

              case !(name === 'request'):
                return function (asMethod, asUrl) {
                  var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                  return target.call(target, asMethod, asUrl, assign({}, defaultOpts, ahOptions));
                };

              default:
                return target[name];
            }
          }
        });
      }
    })
  });
  request.head = flowRuntime_umd.annotate(function head(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType3 = flowRuntime_umd.string();

    var _ahOptionsType3 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType3 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType3).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType3).assert(ahOptions);
    return request('HEAD', asUrl, ahOptions).then(function (_arg2) {
      return _returnType3.assert(_arg2);
    });
  }, flowRuntime_umd["function"](function (_fn4) {
    var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn4.typeParameter("R", undefined, T);

    var L = _fn4.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.options = flowRuntime_umd.annotate(function options(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType4 = flowRuntime_umd.string();

    var _ahOptionsType4 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType4 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType4).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType4).assert(ahOptions);
    return request('OPTIONS', asUrl, ahOptions).then(function (_arg3) {
      return _returnType4.assert(_arg3);
    });
  }, flowRuntime_umd["function"](function (_fn5) {
    var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn5.typeParameter("R", undefined, T);

    var L = _fn5.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.get = flowRuntime_umd.annotate(function get(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType5 = flowRuntime_umd.string();

    var _ahOptionsType5 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType5 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType5).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType5).assert(ahOptions);
    return request('GET', asUrl, ahOptions).then(function (_arg4) {
      return _returnType5.assert(_arg4);
    });
  }, flowRuntime_umd["function"](function (_fn6) {
    var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn6.typeParameter("R", undefined, T);

    var L = _fn6.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.post = flowRuntime_umd.annotate(function post(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType6 = flowRuntime_umd.string();

    var _ahOptionsType6 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType6 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType6).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType6).assert(ahOptions);
    return request('POST', asUrl, ahOptions).then(function (_arg5) {
      return _returnType6.assert(_arg5);
    });
  }, flowRuntime_umd["function"](function (_fn7) {
    var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn7.typeParameter("R", undefined, T);

    var L = _fn7.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.put = flowRuntime_umd.annotate(function put(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType7 = flowRuntime_umd.string();

    var _ahOptionsType7 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType7 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType7).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType7).assert(ahOptions);
    return request('PUT', asUrl, ahOptions).then(function (_arg6) {
      return _returnType7.assert(_arg6);
    });
  }, flowRuntime_umd["function"](function (_fn8) {
    var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn8.typeParameter("R", undefined, T);

    var L = _fn8.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.patch = flowRuntime_umd.annotate(function patch(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType8 = flowRuntime_umd.string();

    var _ahOptionsType8 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType8 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType8).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType8).assert(ahOptions);
    return request('PATCH', asUrl, ahOptions).then(function (_arg7) {
      return _returnType8.assert(_arg7);
    });
  }, flowRuntime_umd["function"](function (_fn9) {
    var T = _fn9.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn9.typeParameter("R", undefined, T);

    var L = _fn9.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request['delete'] = flowRuntime_umd.annotate(function (asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
    var R = flowRuntime_umd.typeParameter("R", undefined, T);
    var L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    var _asUrlType9 = flowRuntime_umd.string();

    var _ahOptionsType9 = flowRuntime_umd.ref(Config$1, T, R);

    var _returnType9 = flowRuntime_umd["return"](L);

    flowRuntime_umd.param("asUrl", _asUrlType9).assert(asUrl);
    flowRuntime_umd.param("ahOptions", _ahOptionsType9).assert(ahOptions);
    return request('DELETE', asUrl, ahOptions).then(function (_arg8) {
      return _returnType9.assert(_arg8);
    });
  }, flowRuntime_umd["function"](function (_fn10) {
    var T = _fn10.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn10.typeParameter("R", undefined, T);

    var L = _fn10.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  Module.defineUtil(__filename$G, request);
  Module.defineUtil('convertToAxiosOptions', convertToAxiosOptions);
});

var __filename$H = '/leanes/utils/verifyPassword.js';

var verifyPassword = (function (Module) {
  Module.defineUtil(__filename$H, function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$method = _ref.method,
        method = _ref$method === void 0 ? 'sha256' : _ref$method,
        salt = _ref.salt,
        storedHash = _ref.hash;

    var password = arguments.length > 1 ? arguments[1] : undefined;
    var generatedHash = crypto$1.createHash(method).update(salt + password).digest('hex');
    return storedHash === generatedHash;
  });
});

var __filename$I = '/leanes/mixins/ApplicationMediatorMixin.js';

var LegacyResponseInterface$2 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$2 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$2 = flowRuntime_umd.tdz(function () {
  return Config;
});
var NotificationInterface$e = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ApplicationMediatorMixin = (function (Module) {
  var _Module$NS = Module.NS,
      SCRIPT_RESULT = _Module$NS.SCRIPT_RESULT,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      genRandomAlphaNumbers = _Module$NS.Utils.genRandomAlphaNumbers;
  Module.defineMixin(__filename$I, function (BaseClass) {
    var _dec, _dec2, _class, _class2, _init, _descriptor, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("emitter", flowRuntime_umd.ref(EventEmitter)), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$e, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
    }), flowRuntime_umd.method("run", function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))];
    }))), _dec2 = flowRuntime_umd.decorate(function () {
      return flowRuntime_umd.ref(EventEmitter);
    }), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      _createClass(Mixin, [{
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          var _get2;

          var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var interests = (_get2 = _get(_getPrototypeOf(Mixin.prototype), "listNotificationInterests", this)).call.apply(_get2, [this].concat(args));

          interests.push(SCRIPT_RESULT);
          return _returnType2.assert(interests);
        }
      }, {
        key: "handleNotification",
        value: function handleNotification(aoNotification) {
          var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

          var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$e, flowRuntime_umd.flowInto(T));

          var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

          flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
          var vsName = aoNotification.getName();
          var voBody = aoNotification.getBody();
          var vsType = aoNotification.getType();

          switch (vsName) {
            case SCRIPT_RESULT:
              this.emitter.emit(vsType, voBody);
              break;

            default:
              _get(_getPrototypeOf(Mixin.prototype), "handleNotification", this).call(this, aoNotification);

          }
        }
      }, {
        key: "run",
        value: function () {
          var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(scriptName, data) {
            var _this2 = this;

            var T, _scriptNameType, _dataType, _returnType;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                    _scriptNameType = flowRuntime_umd.string();
                    _dataType = flowRuntime_umd.flowInto(T);
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                    flowRuntime_umd.param("scriptName", _scriptNameType).assert(scriptName);
                    flowRuntime_umd.param("data", _dataType).assert(data);
                    _context.t0 = _returnType;
                    _context.next = 9;
                    return new Promise(function (resolve, reject) {
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this2.emitter.once(reverse, function (_ref) {
                          var error = _ref.error,
                              result = _ref.result;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve(result);
                        });

                        _this2.send(scriptName, data, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 9:
                    _context.t1 = _context.sent;
                    return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function run(_x, _x2) {
            return _run.apply(this, arguments);
          }

          return run;
        }()
      }]);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        _this = _super.apply(this, arguments);

        _initializerDefineProperty(_this, "emitter", _descriptor, _assertThisInitialized(_this));

        _this.emitter = new EventEmitter();

        _this.emitter.setMaxListeners(Number.MAX_SAFE_INTEGER);

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "emitter", [_dec2, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$J = '/leanes/mixins/LoggingJunctionMixin.js';

var NotificationInterface$f = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var LoggingJunctionMixin = (function (Module) {
  var _Module$NS = Module.NS,
      Pipes = _Module$NS.Pipes,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      genRandomAlphaNumbers = _Module$NS.Utils.genRandomAlphaNumbers;
  var _Pipes$NS = Pipes.NS,
      FilterControlMessage = _Pipes$NS.FilterControlMessage,
      JunctionMediator = _Pipes$NS.JunctionMediator,
      PipeAwareModule = _Pipes$NS.PipeAwareModule,
      LogFilterMessage = _Pipes$NS.LogFilterMessage,
      LogMessage = _Pipes$NS.LogMessage;
  var SEND_TO_LOG = LogMessage.SEND_TO_LOG,
      LEVELS = LogMessage.LEVELS,
      DEBUG = LogMessage.DEBUG,
      ERROR = LogMessage.ERROR,
      FATAL = LogMessage.FATAL,
      INFO = LogMessage.INFO,
      WARN = LogMessage.WARN,
      CHANGE = LogMessage.CHANGE;
  var SET_PARAMS = FilterControlMessage.SET_PARAMS;
  var STDLOG = PipeAwareModule.STDLOG;
  Module.defineMixin(__filename$J, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

      return [flowRuntime_umd.param("note", flowRuntime_umd.ref(NotificationInterface$f, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))];
    }))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          var _get2;

          var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var interests = (_get2 = _get(_getPrototypeOf(Mixin.prototype), "listNotificationInterests", this)).call.apply(_get2, [this].concat(args));

          interests.push(SEND_TO_LOG);
          interests.push(LogFilterMessage.SET_LOG_LEVEL);
          return _returnType2.assert(interests);
        }
      }, {
        key: "handleNotification",
        value: function () {
          var _handleNotification = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(note) {
            var T, _noteType, _returnType, level, logMessage, logLevel, setLogLevelMessage, changedLevelMessage;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                    _noteType = flowRuntime_umd.ref(NotificationInterface$f, flowRuntime_umd.flowInto(T));
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("note", _noteType).assert(note);
                    _context.t0 = note.getName();
                    _context.next = _context.t0 === SEND_TO_LOG ? 7 : _context.t0 === LogFilterMessage.SET_LOG_LEVEL ? 26 : 34;
                    break;

                  case 7:
                    _context.t1 = note.getType();
                    _context.next = _context.t1 === LEVELS[DEBUG] ? 10 : _context.t1 === LEVELS[ERROR] ? 12 : _context.t1 === LEVELS[FATAL] ? 14 : _context.t1 === LEVELS[INFO] ? 16 : _context.t1 === LEVELS[WARN] ? 18 : 20;
                    break;

                  case 10:
                    level = DEBUG;
                    return _context.abrupt("break", 22);

                  case 12:
                    level = ERROR;
                    return _context.abrupt("break", 22);

                  case 14:
                    level = FATAL;
                    return _context.abrupt("break", 22);

                  case 16:
                    level = INFO;
                    return _context.abrupt("break", 22);

                  case 18:
                    level = WARN;
                    return _context.abrupt("break", 22);

                  case 20:
                    level = DEBUG;
                    return _context.abrupt("break", 22);

                  case 22:
                    logMessage = LogMessage["new"](level, this._multitonKey, note.getBody());
                    _context.next = 25;
                    return this._junction.sendMessage(STDLOG, logMessage);

                  case 25:
                    return _context.abrupt("break", 36);

                  case 26:
                    logLevel = note.getBody();
                    setLogLevelMessage = LogFilterMessage["new"](SET_PARAMS, logLevel);
                    _context.next = 30;
                    return this._junction.sendMessage(STDLOG, setLogLevelMessage);

                  case 30:
                    changedLevelMessage = LogMessage["new"](CHANGE, this._multitonKey, "Changed Log Level to: ".concat(LogMessage.LEVELS[logLevel]));
                    _context.next = 33;
                    return this._junction.sendMessage(STDLOG, changedLevelMessage);

                  case 33:
                    return _context.abrupt("break", 36);

                  case 34:
                    _context.next = 36;
                    return _get(_getPrototypeOf(Mixin.prototype), "handleNotification", this).call(this, note);

                  case 36:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function handleNotification(_x) {
            return _handleNotification.apply(this, arguments);
          }

          return handleNotification;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$K = '/leanes/facade/Application.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
// import type { ResourceInterface } from './ResourceInterface';
// import type { ContextInterface } from './ContextInterface';
var ApplicationInterface = flowRuntime_umd.type("ApplicationInterface", flowRuntime_umd.object(flowRuntime_umd.property("isLightweight", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("start", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("finish", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("run", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn.typeParameter("R", undefined, flowRuntime_umd.any());

  return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
}))));

var LegacyResponseInterface$3 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$3 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$3 = flowRuntime_umd.tdz(function () {
  return Config;
});
var ApplicationInterface$1 = flowRuntime_umd.tdz(function () {
  return ApplicationInterface;
});
var Application = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      LIGHTWEIGHT = _Module$NS.LIGHTWEIGHT,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      Pipes = _Module$NS.Pipes,
      Facade = _Module$NS.Facade,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      uuid = _Module$NS.Utils.uuid;
  var PipeAwareModule = Pipes.NS.PipeAwareModule;
  var Application = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Application", flowRuntime_umd["extends"](PipeAwareModule), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("LOGGER_PROXY", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_MODULE_TO_LOGGER", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_SHELL_TO_LOGGER", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_MODULE_TO_SHELL", flowRuntime_umd.string()), flowRuntime_umd.property("isLightweight", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.method("start", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("finish", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("run", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, flowRuntime_umd.any());

    return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
  }), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("ApplicationFacade", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("symbol", flowRuntime_umd.nullable(flowRuntime_umd.symbol()))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd["boolean"]()), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeAwareModule) {
    _inherits(Application, _PipeAwareModule);

    var _super = _createSuper(Application);

    _createClass(Application, [{
      key: "start",
      value: function start() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        this.facade.startup(this);
      }
    }, {
      key: "finish",
      value: function () {
        var _finish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context.next = 3;
                  return this.facade.remove();

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function finish() {
          return _finish.apply(this, arguments);
        }

        return finish;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(scriptName, data) {
          var T, R, _scriptNameType, _dataType, _returnType2, appMediator;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
                  R = flowRuntime_umd.typeParameter("R", undefined, flowRuntime_umd.any());
                  _scriptNameType = flowRuntime_umd.string();
                  _dataType = flowRuntime_umd.flowInto(T);
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(R, flowRuntime_umd.ref("Promise", R)));
                  flowRuntime_umd.param("scriptName", _scriptNameType).assert(scriptName);
                  flowRuntime_umd.param("data", _dataType).assert(data);
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context2.t0 = _returnType2;
                  _context2.next = 11;
                  return appMediator.run(scriptName, data);

                case 11:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 13:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function run(_x, _x2) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }]);

    function Application(name, ApplicationFacade, symbol) {
      var _this;

      _classCallCheck(this, Application);

      var _nameType = flowRuntime_umd.string();

      var _ApplicationFacadeType = flowRuntime_umd.Class(flowRuntime_umd.existential());

      var _symbolType = flowRuntime_umd.nullable(flowRuntime_umd.symbol());

      flowRuntime_umd.param("name", _nameType).assert(name);
      flowRuntime_umd.param("ApplicationFacade", _ApplicationFacadeType).assert(ApplicationFacade);
      flowRuntime_umd.param("symbol", _symbolType).assert(symbol);
      var isLightweight = symbol === LIGHTWEIGHT;

      if (isLightweight) {
        var appName = "".concat(name, "|>").concat(uuid.v4());
        _this = _super.call(this, ApplicationFacade.getInstance(appName));

        _initializerDefineProperty(_this, "isLightweight", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "name", _descriptor2, _assertThisInitialized(_this));

        _this.name = appName;
      } else {
        _this = _super.call(this, ApplicationFacade.getInstance(name));

        _initializerDefineProperty(_this, "isLightweight", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "name", _descriptor2, _assertThisInitialized(_this));

        _this.name = name;
      }

      _this.isLightweight = isLightweight;
      flowRuntime_umd.ref(ApplicationInterface$1).assert(_assertThisInitialized(_this));
      return _possibleConstructorReturn(_this);
    }

    return Application;
  }(PipeAwareModule), _class3.__filename = __filename$K, _class3.object = {}, _class3.LOGGER_PROXY = 'LoggerProxy', _class3.CONNECT_MODULE_TO_LOGGER = 'connectModuleToLogger', _class3.CONNECT_SHELL_TO_LOGGER = 'connectShellToLogger', _class3.CONNECT_MODULE_TO_SHELL = 'connectModuleToShell', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "LOGGER_PROXY", [_dec3, property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "LOGGER_PROXY"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_MODULE_TO_LOGGER", [_dec4, property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_MODULE_TO_LOGGER"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_SHELL_TO_LOGGER", [_dec5, property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_SHELL_TO_LOGGER"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_MODULE_TO_SHELL", [_dec6, property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_MODULE_TO_SHELL"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLightweight", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "start", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "start"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "finish", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "finish"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$L = '/leanes/command/LogMessageCommand.js';

var NotificationInterface$g = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var LogMessageCommand = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Command = _Module$NS.Command,
      Application = _Module$NS.Application,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LOGGER_PROXY = Application.LOGGER_PROXY;
  var LogMessageCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogMessageCommand", flowRuntime_umd["extends"](Command), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("execute", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$g, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd["void"]())];
  }))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Command) {
    _inherits(LogMessageCommand, _Command);

    var _super = _createSuper(LogMessageCommand);

    function LogMessageCommand() {
      _classCallCheck(this, LogMessageCommand);

      return _super.apply(this, arguments);
    }

    _createClass(LogMessageCommand, [{
      key: "execute",
      value: function execute(aoNotification) {
        var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

        var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$g, flowRuntime_umd.flowInto(T));

        var _returnType = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
        var proxy = this.facade.getProxy(LOGGER_PROXY);
        proxy.addLogEntry(aoNotification.getBody());
        return _returnType.assert();
      }
    }]);

    return LogMessageCommand;
  }(Command), _class3.__filename = __filename$L, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$M = '/leanes/command/Script.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var ScriptInterface = flowRuntime_umd.type("ScriptInterface", flowRuntime_umd.object(flowRuntime_umd.property("body", flowRuntime_umd["function"](flowRuntime_umd.param("data", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

var ScriptInterface$1 = flowRuntime_umd.tdz(function () {
  return ScriptInterface;
});
var NotificationInterface$h = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var Script = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      SCRIPT_RESULT = _Module$NS.SCRIPT_RESULT,
      Command = _Module$NS.Command,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Script = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Script", flowRuntime_umd["extends"](Command), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("body", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("data", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))];
  }), flowRuntime_umd.method("execute", function (_fn2) {
    var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$h, flowRuntime_umd.flowInto(T))), flowRuntime_umd["return"](flowRuntime_umd["void"]())];
  }))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Command) {
    _inherits(Script, _Command);

    var _super = _createSuper(Script);

    function Script() {
      var _this;

      _classCallCheck(this, Script);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      flowRuntime_umd.ref(ScriptInterface$1).assert(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(Script, [{
      key: "body",
      value: function () {
        var _body = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
          var T, _dataType, _returnType;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _dataType = flowRuntime_umd.flowInto(T);
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                  flowRuntime_umd.param("data", _dataType).assert(data);
                  return _context.abrupt("return", _returnType.assert());

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function body(_x) {
          return _body.apply(this, arguments);
        }

        return body;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoNotification) {
          var T, _aoNotificationType, _returnType3, voBody, reverse, voResult, result;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
                  _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$h, flowRuntime_umd.flowInto(T));
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["void"]());
                  flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
                  voBody = aoNotification.getBody();
                  reverse = aoNotification.getType();
                  voResult = null;
                  _context2.prev = 7;
                  _context2.next = 10;
                  return this.body(voBody);

                case 10:
                  result = _context2.sent;
                  voResult = {
                    result: result
                  };
                  _context2.next = 19;
                  break;

                case 14:
                  _context2.prev = 14;
                  _context2.t0 = _context2["catch"](7);
                  _context2.t0.message = 'ERROR in Script::execute ' + _context2.t0.message;
                  console.error(_context2.t0);
                  voResult = {
                    error: _context2.t0
                  };

                case 19:
                  this.send(SCRIPT_RESULT, voResult, reverse);

                case 20:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[7, 14]]);
        }));

        function execute(_x2) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }]);

    return Script;
  }(Command), _class3.__filename = __filename$M, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "body", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var JoiT = flowRuntime_umd.type("JoiT", flowRuntime_umd.object(flowRuntime_umd.property("isJoi", flowRuntime_umd["boolean"](true)), flowRuntime_umd.property("_type", flowRuntime_umd.any())));

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var MomentT = flowRuntime_umd.type("MomentT", flowRuntime_umd.object(flowRuntime_umd.property("_isAMomentObject", flowRuntime_umd["boolean"](true))));

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var StreamT = flowRuntime_umd.type("StreamT", flowRuntime_umd.object(flowRuntime_umd.property("pipe", flowRuntime_umd["function"]())));

var _dec$3, _dec2$3, _class$7, _class2$3, _init$3, _init2$3, _descriptor$3, _descriptor2$2, _descriptor3$2, _descriptor4$2, _descriptor5$2, _descriptor6$2, _descriptor7$2, _descriptor8$2, _descriptor9$2, _descriptor10$2, _descriptor11$2, _descriptor12$2, _class3$3, _temp$3;
var _PureMVC$NS$1 = PureMVC.NS,
    initialize$3 = _PureMVC$NS$1.initialize,
    meta$3 = _PureMVC$NS$1.meta,
    nameBy$3 = _PureMVC$NS$1.nameBy,
    constant$3 = _PureMVC$NS$1.constant,
    resolver$3 = _PureMVC$NS$1.resolver,
    util$2 = _PureMVC$NS$1.util,
    freeze$2 = _PureMVC$NS$1.freeze;
var LeanES = (_dec$3 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LeanES", flowRuntime_umd["extends"](PureMVC), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("STARTUP", flowRuntime_umd.any()), flowRuntime_umd.property("SCRIPT_RESULT", flowRuntime_umd.any()), flowRuntime_umd.property("STARTUP_COMPLETE", flowRuntime_umd.any()), flowRuntime_umd.property("LIGHTWEIGHT", flowRuntime_umd.any()), flowRuntime_umd.property("SHELL", flowRuntime_umd.any()), flowRuntime_umd.property("LOGGER", flowRuntime_umd.any()), flowRuntime_umd.property("LOGGER_MODULE", flowRuntime_umd.any()), flowRuntime_umd.property("LOG_MSG", flowRuntime_umd.any()), flowRuntime_umd.property("joi", flowRuntime_umd.any()), flowRuntime_umd.property("moment", flowRuntime_umd.any()), flowRuntime_umd.property("Pipes", flowRuntime_umd.any()))), _dec2$3 = resolver$3(require, function (name) {
  return require(name);
}), _dec$3(_class$7 = LoggingJunctionMixin(_class$7 = ApplicationMediatorMixin(_class$7 = LogMessageCommand(_class$7 = Script(_class$7 = Application(_class$7 = genRandomAlphaNumbers(_class$7 = hashPassword(_class$7 = jwtDecode(_class$7 = jwtEncode(_class$7 = makeHash(_class$7 = makeSignature(_class$7 = request(_class$7 = verifyPassword(_class$7 = initialize$3(_class$7 = _dec2$3(_class$7 = (_class2$3 = (_temp$3 = _class3$3 = /*#__PURE__*/function (_PureMVC) {
  _inherits(LeanES, _PureMVC);

  var _super = _createSuper(LeanES);

  function LeanES() {
    var _this;

    _classCallCheck(this, LeanES);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$3, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STARTUP", _descriptor2$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SCRIPT_RESULT", _descriptor3$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STARTUP_COMPLETE", _descriptor4$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LIGHTWEIGHT", _descriptor5$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SHELL", _descriptor6$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LOGGER", _descriptor7$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LOGGER_MODULE", _descriptor8$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LOG_MSG", _descriptor9$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "joi", _descriptor10$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "moment", _descriptor11$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "Pipes", _descriptor12$2, _assertThisInitialized(_this));

    return _this;
  }

  return LeanES;
}(PureMVC), _class3$3.__filename = 'LeanES', _class3$3.object = {}, _temp$3), (_applyDecoratedDescriptor(_class2$3, "__filename", [nameBy$3], (_init$3 = Object.getOwnPropertyDescriptor(_class2$3, "__filename"), _init$3 = _init$3 ? _init$3.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$3;
  }
}), _class2$3), _applyDecoratedDescriptor(_class2$3, "object", [meta$3], (_init2$3 = Object.getOwnPropertyDescriptor(_class2$3, "object"), _init2$3 = _init2$3 ? _init2$3.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$3;
  }
}), _class2$3), _descriptor$3 = _applyDecoratedDescriptor(_class2$3.prototype, "ROOT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$1;
  }
}), _descriptor2$2 = _applyDecoratedDescriptor(_class2$3.prototype, "STARTUP", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STARTUP';
  }
}), _descriptor3$2 = _applyDecoratedDescriptor(_class2$3.prototype, "SCRIPT_RESULT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'SCRIPT_RESULT';
  }
}), _descriptor4$2 = _applyDecoratedDescriptor(_class2$3.prototype, "STARTUP_COMPLETE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STARTUP_COMPLETE';
  }
}), _descriptor5$2 = _applyDecoratedDescriptor(_class2$3.prototype, "LIGHTWEIGHT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Symbol["for"]('LIGHTWEIGHT');
  }
}), _descriptor6$2 = _applyDecoratedDescriptor(_class2$3.prototype, "SHELL", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ShellJunctionMediator';
  }
}), _descriptor7$2 = _applyDecoratedDescriptor(_class2$3.prototype, "LOGGER", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'LoggerJunctionMediator';
  }
}), _descriptor8$2 = _applyDecoratedDescriptor(_class2$3.prototype, "LOGGER_MODULE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'LoggerModuleMediator';
  }
}), _descriptor9$2 = _applyDecoratedDescriptor(_class2$3.prototype, "LOG_MSG", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'LOG_MSG';
  }
}), _descriptor10$2 = _applyDecoratedDescriptor(_class2$3.prototype, "joi", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return joi;
  }
}), _descriptor11$2 = _applyDecoratedDescriptor(_class2$3.prototype, "moment", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return moment;
  }
}), _descriptor12$2 = _applyDecoratedDescriptor(_class2$3.prototype, "Pipes", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Pipes$1;
  }
})), _class2$3)) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7) || _class$7);
var LeanES$1 = freeze$2(LeanES);

// This file is part of LeanES.

exports.AdapterInterface = AdapterInterface;
exports.ApplicationInterface = ApplicationInterface;
exports.AxiosBasicCredentials = AxiosBasicCredentials;
exports.AxiosInterceptorManager = AxiosInterceptorManager;
exports.AxiosProxyConfig = AxiosProxyConfig;
exports.AxiosResponse = AxiosResponse;
exports.AxiosTransformer = AxiosTransformer;
exports.Cancel = Cancel;
exports.CancelToken = CancelToken;
exports.CancelTokenSource = CancelTokenSource;
exports.CancelTokenStatic = CancelTokenStatic;
exports.Canceler = Canceler;
exports.CaseInterface = CaseInterface;
exports.CommandInterface = CommandInterface;
exports.Config = Config;
exports.ControllerInterface = ControllerInterface;
exports.CoreObjectInterface = CoreObjectInterface;
exports.EventInterface = EventInterface$1;
exports.FacadeInterface = FacadeInterface;
exports.HookedObjectInterface = HookedObjectInterface;
exports.JoiT = JoiT;
exports.LegacyRequestInterface = LegacyRequestInterface;
exports.LegacyResponseInterface = LegacyResponseInterface;
exports.MediatorInterface = MediatorInterface;
exports.ModelInterface = ModelInterface;
exports.MomentT = MomentT;
exports.NotificationInterface = NotificationInterface;
exports.NotifierInterface = NotifierInterface;
exports.ObserverInterface = ObserverInterface;
exports.PipeAwareInterface = PipeAwareInterface;
exports.PipeFittingInterface = PipeFittingInterface;
exports.PipeMessageInterface = PipeMessageInterface;
exports.ProxyInterface = ProxyInterface;
exports.RequestArgumentsT = RequestArgumentsT;
exports.RequestT = RequestT;
exports.ScriptInterface = ScriptInterface;
exports.StateInterface = StateInterface;
exports.StateMachineInterface = StateMachineInterface;
exports.StreamT = StreamT;
exports.SuiteInterface = SuiteInterface;
exports.TransitionInterface = TransitionInterface;
exports.ViewInterface = ViewInterface;
exports.default = LeanES$1;
//# sourceMappingURL=index.dev.js.map
